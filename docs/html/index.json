[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/AdaptivePlayer.js",
    "content": "import './require-babel-polyfill.js'\n\nimport { FakeEventTarget } from './Utils/FakeEventTarget';\nimport { FakeEvent } from './Utils/FakeEvent';\n\nimport * as UrlUtil from './Utils/Url';\nimport * as ObjectUtil from './Utils/Object';\nimport { LogUtil } from './Utils/Log';\nimport * as PlatformUtil from './Utils/Platform';\nimport { NLError } from './Media/NLError';\nimport * as VideoUtil from './Utils/Video';\nimport UAParser from '../externals/ua-parser-js/ua-parser.min'\nimport * as XHRUtil from './Utils/Xhr';\nimport ISO6392 from '../externals/iso639/iso639-2';\n\nimport { StateManager } from './Manager/StateManager';\nimport { EventManager } from './Manager/EventManager';\nimport { StatisticManager } from './Manager/StatisticManager';\nimport { CuepointManager } from './Manager/CuepointManager';\nimport { MultiviewsManager } from './Manager/MultiviewsManager';\nimport { DebugPanel } from './Manager/DebugPanel';\n\nimport { Settings } from './config';\n\nimport DashPlayer from './Player/DashPlayer';\nimport HlsPlayer from './Player/HlsPlayer';\nimport BasicPlayer from './Player/BasicPlayer';\nimport WebRTCPlayer from './Player/WebRTCPlayer';\n\n/**\n * Endeavor Streaming HTML5 Adaptive Player\n * <br>Support DASH with Shaka player, support HLS with native player and hls.js\n * <br>And HTTP video (mp4/ogg/webm) with native support\n * @version 3.0.0\n * @param {HTMLVideoElement} video - video element to play with; return error when null\n * @param {object} [opt] - other informations, reserved\n * @example\n * let player = new AdaptivePlayer(document.getElementById('video'));\n * ...\n * @class AdaptivePlayer\n * @implements FakeEventTarget\n */\nexport class AdaptivePlayer extends FakeEventTarget {\n\tconstructor(video, options) {\n\t\tsuper();\n\n\t\tthis._video = video;\n\t\tthis._player = null;\n\t\tthis._config = {};\n\t\tthis._url = '';\n\t\tthis._loaded = false;\n\t\tthis._autoPlayStatusEventSent = false;\n\n\t\tthis._logger = new LogUtil();\n\t\tthis._logger.setLogLevel(Settings.DEFAULT_LOG_LEVEL);\n\n\t\tthis._statisticManager = new StatisticManager(this._video, this);\n\t\tthis._statisticManager.setErrorCallback(function() {\n\t\t\tthis.stop({ triggerPlayEndEvent: false });\n\t\t}.bind(this), { level: 15, url: '' });\n\n\t\t// check video object\n\t\tif (!this._video) {\n\t\t\treturn { error: 'Invaild video object!' };\n\t\t}\n\n\t\t// only register volumechange globally\n\t\tthis._video.addEventListener('volumechange', this._onVolumeChange.bind(this));\n\n\t\t// keep autoplay state\n\t\tthis._videoautoplay = video.autoplay;\n\n\t\t// manage state change of video element\n\t\tAdaptivePlayer.ActionReason = StateManager.ActionReason;\n\t\tthis._stateManager = new StateManager(this, function (oldState, newState, details) {\n\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.StateChange, {\n\t\t\t\toldState: oldState,\n\t\t\t\tnewState: newState,\n\t\t\t\tdetails: { oldState: oldState, newState: newState, from: details.from || details.reason || '' }\n\t\t\t}));\n\t\t}.bind(this));\n\n\t\t// manage ID3 handling.\n\t\tthis._cuepointManager = new CuepointManager(this);\n\t\tthis._clearID3AfterSeek = false; // only remove id3 after manully seek, or may remove id3 nearby 0.\n\n\t\tthis._multiViewsManager = new MultiviewsManager(this);\n\n\t\t// initial configuration\n\t\tthis._config = ObjectUtil.mergeObject({}, Settings.BASE_CONFIG);\n\n\t\t// debug panel\n\t\tthis._debugPanel = new DebugPanel(this, Settings.DEBUG_PANEL_REFRESH_INTERVAL);\n\n\t\t// for ad-stitching\n\t\tthis._emptyAdvertisementList = [];\n\n\t\t// prevent default context menu\n\t\tif (Settings.DISABLE_CONTEXT_MENU) {\n\t\t\tthis._video.addEventListener('contextmenu', function (e) {\n\t\t\t\te.preventDefault();\n\t\t\t}, false);\n\t\t}\n\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', '[' + AdaptivePlayer.version + '] Instance created! ');\n\t}\n\n\t/**\n\t * Destroy instance, this instance can't be used anymore\n\t */\n\tdestroy() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'destroy called!');\n\n\t\tsuper.destroy();\n\n\t\tthis._video.removeEventListener('volumechange', this._onVolumeChange.bind(this));\n\n\t\treturn this.stop({ triggerPlayEndEvent: true })\n\t\t\t.then(function () {\n\t\t\t\tif (this._stateManager) {\n\t\t\t\t\tthis._stateManager.destroy();\n\t\t\t\t}\n\t\t\t}.bind(this))\n\t\t\t.then(function () {\n\t\t\t\tif (this._eventManager) {\n\t\t\t\t\tthis._eventManager.destroy();\n\t\t\t\t}\n\t\t\t}.bind(this))\n\t\t\t.then(function () {\n\t\t\t\tif (this._statisticManager) {\n\t\t\t\t\tthis._statisticManager.stop();\n\t\t\t\t}\n\t\t\t}.bind(this))\n\t\t\t.then(function () {\n\t\t\t\tif (this._debugPanel) {\n\t\t\t\t\tthis._debugPanel.destroy.bind();\n\t\t\t\t}\n\t\t\t}.bind(this))\n\t\t\t.then(function () {\n\t\t\t\tif (this._player && this._player.destroy) {\n\t\t\t\t\tthis._player.destroy();\n\t\t\t\t}\n\t\t\t}.bind(this))\n\t\t\t.then(function () {\n\t\t\t\tthis._debugPanel = null;\n\t\t\t\tthis._eventManager = null;\n\t\t\t\tthis._stateManager = null;\n\t\t\t\tthis._player = null;\n\t\t\t\tthis._loaded = false;\n\t\t\t\tthis._statisticManager = null;\n\t\t\t\tthis._multiViewsManager = null;\n\t\t\t\tthis._cuepointManager = null;\n\t\t\t}.bind(this));\n\t}\n\n\t/**\n\t * Determine native support of stream protocol by browser\n\t *\n\t * @returns {json}\n\t * @example { m3u8: false, mpd: false }\n\t */\n\tnativeCanPlay() {\n\t\treturn {\n\t\t\tm3u8: VideoUtil.canPlayNative(this._video, 'm3u8'),\n\t\t\tmpd: VideoUtil.canPlayNative(this._video, 'mpd')\n\t\t};\n\t}\n\n\t/**\n\t * callback of get support types\n\t *\n\t * @callback SupportCb\n\t * @param {object}\n   * @property {Object} manifest A map of supported manifest types. The keys are manifest MIME types and file extensions.\n   * @property {Object} media A map of supported media types. The keys are media MIME types.\n   * @property {Object} drm A map of supported key systems. The keys are the key system names. The value is null if it is not supported. Key systems not probed will not be in this dictionary.\n\t *\n\t * @example {\n\t\t\t'manifest': {\n\t\t\t\t'mpd': true,\n\t\t\t\t'm3u8': true,\n\t\t\t\t'ism': false,\n\t\t\t\t...\n\t\t\t},\n\t\t\t'media': {\n\t\t\t\t'video/mp4; codecs=\\'avc1.42E01E\\': true,\n\t\t\t\t'video/mp4': true,\n\t\t\t\t'video/mp4; codecs=\\'avc3.42E01E\\': true,\n\t\t\t\t...\n\t\t\t},\n\t\t\t'drm': {\n\t\t\t\t'com.widevine.alpha': {\n\t\t\t\t\t'persistentState': true\n\t\t\t\t},\n\t\t\t\t'com.microsoft.playready': null,\n\t\t\t\t'com.apple.fps.2_0': null,\n\t\t\t\t...\n\t\t\t},\n\t\t\t'offline': true\n\t\t}\n   */\n  /**\n   * Return support information\n   * @param {SupportCb} callback - return 4 types of informations, including:\n   * <br>                                 1. supported drm systems\n   * <br>                                 2. supported media codecs\n   * <br>                                 3. supported manifest types\n   * <br>                                 4. support offline or not\n   */\n\tstatic support(callback) {\n\t\t// Static function\n\t\t// currently use shaka function to detect supports\n\t\treturn DashPlayer.support(callback);\n\t}\n\n\t/**\n\t * Set configurations of player\n\t * @param {object} config player configurations\n\t * @param {boolean} config.withCredentials false by default\n\t * @param {string[]} config.withCredentialsFragmentPattern set to use withCredentials for segment url with defined values, by default ['/nlds/', '/nldsu/', '/nlds_vod/', '/nldsu_vod/']\n\t * @param {boolean} config.useExternalM3U8Parser Use external m3u8 parser for native player (DRM streams on Mac and play on iOS browsers) to get UTC time and AD-stitching related tags\n   * @param {boolean} config.appendXPLAYForStitching Append playbackId for DASH stitching/failover (x-play=uuid) false by default\n\t * @param {object} config.abr adaptive playback or fixed bitrate\n\t * @param {boolean} config.abr.enabled true (adaptive playback) by default\n\t * @param {number} config.abr.startBitrate Start playback with defined bitrate; abr.enabled should set to false\n\t * @param {object} config.drm DRM related configurations\n\t * @param {object} config.drm.widevine Widevine related configurations\n\t * @param {string} config.drm.widevine.server License server url of Widevine\n\t * @param {object} config.drm.playready playready related configurations\n\t * @param {string} config.drm.playready.server License server url of playready\n\t * @param {object} config.drm.fairplay fairplay related configurations\n\t * @param {string} config.drm.fairplay.server License server url of fairplay\n\t * @param {string} config.drm.fairplay.serverCertificate url to get server certificate of fairplay\n\t * @param {object} config.drm.params parameters\n\t * @param {string} config.drm.params.token cro token for authentication of license server\n\t * @param {string} config.preferredAudioLanguage enable audio track of preferred audio language; Otherwise first audio track will be selected.\n\t * @param {string} config.preferredTextLanguage enable text track of preferred text language; Otherwise first text track will be selected.\n\t * @param {object} config.closedCaption CC configurations\n\t * @param {string} config.closedCaption.label display label of CC, 'English' by default\n\t * @param {string} config.closedCaption.language language of CC, 'en' by default\n\t * @param {boolean} config.dashCC enable to extract CC from DASH video segment, true by default\n\t */\n\tconfigure(config) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'configure called!');\n\t\tif (typeof config === 'object') {\n\t\t\tthis._config = ObjectUtil.mergeObject(config, Settings.BASE_CONFIG);\n\t\t}\n\n\t\t// normalize preferred language code from 639-2 to 639-1 (3-bytes to 2-bytes)\n\t\tthis._config.preferredAudioLanguage = ISO6392.toISO6391(this._config.preferredAudioLanguage);\n\t\tthis._config.preferredTextLanguage = ISO6392.toISO6391(this._config.preferredTextLanguage);\n\t\t\n\t\tlet ref = this._statisticManager.getErrorConfig();\n\t\tif (config.errorReportLevel) {\n\t\t\tref.level = config.errorReportLevel;\n\t\t} else {\n\t\t\tref.level = AdaptivePlayer.ErrorReportLevel.All;\n\t\t}\n\t}\n\n\t/**\n\t * Play video with url,\n\t * Return error when url is wrong, and current playback will not be stopped while playing\n\t *\n\t * @param {string} url playback url\n\t * @param {number} [startTime] start playback from certain position in second;\n\t * <br> if not set or set as -1, will start from 0 (VOD) or live edge (Live)\n\t * <br> if set as 0, will start from 0 (VOD) or first segment in list (Live)\n\t * <br> For HLS Live, time may be not accurate as player will seek to start time of TS chunk, i.e., pass 1501768500 will go to 1501768510\n\t * @param {StreamType} [streamType] to set streaming type in case of url doesn't end with explicit extension; auto set according to url if set as null\n\t */\n\tload(url, startTime, streamType) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'Load ' + url +\n\t\t\t((typeof startTime !== 'undefined') ? ', startTime=' + startTime : '') +\n\t\t\t((typeof streamType !== 'undefined') ? ', streamType=' + streamType : ''));\n\n\t\tthis._url = url;\n\n\t\t// if is NaN, set to null\n\t\tif (typeof startTime === 'number') {\n\t\t\tif (isNaN(startTime)) {\n\t\t\t\tstartTime = null;\n\t\t\t} else if (startTime === 0) {\n\t\t\t\tstartTime = Settings.SMALL_GAP_TO_START; // work-around of DASH live start position: not seek to start in case of 0\n\t\t\t}\n\t\t}\n\n\t\tthis._loaded = false;\n\n\t\tthis._video.autoplay = this._videoautoplay; // Fix bug of patch for NBA-4696\n\t\tthis._pauseAfterSeek = false;\n\t\tthis._lastDuration = 0.0;\n\t\tthis._oneTimeSeek = false;\n\t\tthis._oneTimeAutoPlay = true;\n\t\tthis._firstPlayAfterMetadataLoaded = false;\n\t\tthis._isInSeeking = false;\n\t\tthis._autoPlayStatusEventSent = false;\n\n\t\tthis._statisticManager.reset(url);\n\t\tthis._stateManager.reset({ reason: StateManager.ActionReason.START });\n\t\tthis._multiViewsManager.setSyncViews([]);\n\t\tthis._debugPanel.reset();\n\t\tthis._cuepointManager.cleanup();\n\t\tthis._emptyAdvertisementList = [];\n\n\t\tlet nextPlayerType = UrlUtil.detectPlayerType(url, streamType, !!this._config.drm);\n\t\tif (nextPlayerType === AdaptivePlayer.PlayerType.UNKNOWN) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'Probe url failed');\n\t\t\tthis._statisticManager.reportUnsupportedSchema(url);\n\t\t\treturn;\n\t\t}\n\n\t\tif ((nextPlayerType !== AdaptivePlayer.PlayerType.NATIVE && !PlatformUtil.probePlatformSupport()) ||\n\t\t\t(nextPlayerType === AdaptivePlayer.PlayerType.WEBRTC && !PlatformUtil.probeWebRTCSupport())) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'Type ' + nextPlayerType + ' is not supported.');\n\t\t\tthis._statisticManager.reportUnsupported();\n\t\t\treturn;\n\t\t}\n\n\t\t// Add x-play=[uuid] for DASH stitiching/failover\n\t\tif (!!this._config.appendXPLAYForStitching &&\n\t\t\tnextPlayerType === AdaptivePlayer.PlayerType.SHAKA && // DASH only\n\t\t\tthis._url.indexOf('x-play=') === -1) { // if not exist\n\t\t\tlet playbackId = PlatformUtil.generateUUID();\n\t\t\tthis._url += (this._url.indexOf('?') === -1) ? '?' : '&';\n\t\t\tthis._url += ('x-play=' + playbackId);\n\t\t}\n        \n\t\tlet createOrRenewFn = function () {\n\t\t\tif (this._eventManager) {\n\t\t\t\tthis._eventManager.destroy();\n\t\t\t}\n\n\t\t\tif (this._player) {\n\t\t\t\tif (nextPlayerType !== this._player.type) {\n\t\t\t\t\t// destroy if exist\n\t\t\t\t\treturn this._player.destroy().then(function () {\n\t\t\t\t\t\tthis._player = this._createPlayer(nextPlayerType);\n\t\t\t\t\t}.bind(this));\n\t\t\t\t} else {\n\t\t\t\t\treturn this._player.unload();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._player = this._createPlayer(nextPlayerType);\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t}.bind(this);\n\t\tcreateOrRenewFn().then(function () {\n\t\t\tif (this._player === null || this._video === null) {\n\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'player not created successfully or already destroyed');\n\t\t\t\tif (this._statisticManager) this._statisticManager.reportNativeVideoError('player not created successfully or already destroyed');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'current player type=' + this._player.type + ', next player type=' + nextPlayerType);\n\n\t\t\t// manage events of video element\n\t\t\tthis._eventManager = new EventManager();\n\n\t\t\t// not listen error when shaka player used\n\t\t\t// if (nextPlayerType !== AdaptivePlayer.PlayerType.SHAKA) {\n\t\t\tthis._eventManager.listen(this._video, 'error', this._onVideoError.bind(this));\n\t\t\t// }\n\t\t\tthis._eventManager.listen(this._video, 'timeupdate', this._onTimeUpdate.bind(this));\n\t\t\tthis._eventManager.listen(this._video, 'ratechange', this._onRateChange.bind(this));\n\t\t\tthis._eventManager.listen(this._video, 'progress', this._onProgress.bind(this));\n\t\t\tthis._eventManager.listen(this._video, 'resize', this._onResize.bind(this)); // not work on IE/Edge\n\t\t\tthis._eventManager.listen(this._video, 'ended', function () { // Play done\n\t\t\t\tthis._onEnded({ reason: StateManager.ActionReason.COMPLETE })\n\t\t\t}.bind(this)); \n\n\t\t\tif (this._video.textTracks) {\n\t\t\t\t// monitoring track change event\n\t\t\t\tthis._eventManager.listen(this._video.textTracks, 'addtrack', this._onTextTracksChanged.bind(this));\n\t\t\t\tthis._eventManager.listen(this._video.textTracks, 'removetrack', this._onTextTracksChanged.bind(this));\n\t\t\t\tthis._eventManager.listen(this._video, 'addtrack', this._onTextTracksChanged.bind(this));\n\t\t\t\tthis._eventManager.listen(this._video, 'removetrack', this._onTextTracksChanged.bind(this));\n\t\t\t}\n\n\t\t\t// other video events just pass to caller\n\t\t\t['seeking',\n\t\t\t\t'seeked',\n\t\t\t\t'pause',\n\t\t\t\t'play',\n\t\t\t\t'canplay',\n\t\t\t\t'canplaythrough',\n\t\t\t\t'playing',\n\t\t\t\t'loadedmetadata',\n\t\t\t\t'loadstart',\n\t\t\t\t'durationchange'\n\t\t\t].forEach(function (event) {\n\t\t\t\tthis._eventManager.listen(this._video, event, this._onVideoEvent.bind(this));\n\t\t\t}.bind(this));\n\n\t\t\tthis._player.configure(this._config);\n\n\t\t\tthis._startLoadTime = new Date();\n\n\t\t\treturn this._player.load(this._url, startTime).catch(function(e) {\n\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'Load failed! msg=' + e.message);\n\t\t\t\tthis._statisticManager.reportNativeVideoError(e.message, AdaptivePlayer.ErrorCode.Generic_Error);\n\t\t\t}.bind(this));\n\t\t}.bind(this));\n\t}\n\n\t/**\n\t * Return unique ID of this machine for playback control\n\t * @returns string in guid format\n\t */\n\tdeviceId() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'deviceId called!');\n\t\treturn PlatformUtil.getDeviceId();\n\t}\n\n\t/**\n\t * Determine stream is live or vod\n\t *\n\t * @returns {boolean} true when live, false when vod\n\t */\n\tisLive() {\n\t\tif (this._player) {\n\t\t\treturn this._player.isLive();\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Go to live position of live stream\n\t */\n\tgotoLive() {\n\t\tif (this._player && this._player.isLive()) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'gotoLive called!');\n\t\t\tthis._player.gotoLive();\n\t\t}\n\t}\n\n\t/**\n\t * Start to play, or resume\n\t */\n\tplay() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'play called!');\n\n\t\tif (this._video) {\n\t\t\t// NBA-4696: popup player : replay video doesn't auto play the video\n\t\t\t// best practices of https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n\t\t\tlet promise = this._video.play();\n\t\t\tif (promise != null) {\n\t\t\t\tpromise.then(function() {\n\t\t\t\t\t// Autoplay started!\n\t\t\t\t\tif (!this._autoPlayStatusEventSent) {\n            this._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'auto play started!');\n\t\t\t\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AutoPlayStatus, { details: { autoplay: true } }));\n          }\n\t\t\t\t\tthis._autoPlayStatusEventSent = true;\n\t\t\t\t}.bind(this)).catch(function() {\n\t\t\t\t\t// Autoplay was prevented.\n\t\t\t\t\t// Show a \"Play\" button so that user can start playback.\n\t\t\t\t\tif (!this._autoPlayStatusEventSent) {\n            this._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'auto play prevented!');\n\t\t\t\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AutoPlayStatus, { details: { autoplay: false } }));\n          }\n\t\t\t\t\tthis._autoPlayStatusEventSent = true;\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t\tthis._video.autoplay = this._videoautoplay;\n\t\t\tthis._pauseAfterSeek = false;\n\t\t}\n\t}\n\n\t/**\n\t * Pause playback\n\t */\n\tpause() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'pause called!');\n\n\t\tif (this._video) {\n\t\t\t// NBA-4696: popup player : replay video doesn't auto play the video\n\t\t\tthis._video.pause();\n\t\t\tthis._video.autoplay = false; // for load\n\t\t\tthis._pauseAfterSeek = true; // for seek\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback\n\t * @param {Object} options \n\t * @param {boolean} options.triggerPlayEndEvent whether or not send PlayEnd event when stop called, not send event when onError\n\t */\n\tstop(options) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'stop called!');\n\t\tthis._url = '';\n\n\t\tif (this.getState() === AdaptivePlayer.State.IDLE) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'skip stop call on state idle');\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (this._debugPanel) {\n\t\t\tthis._debugPanel.reset();\n\t\t}\n\t\tif (this._cuepointManager) {\n\t\t\tthis._cuepointManager.cleanup();\n\t\t}\n\t\tif (this._stateManager) {\n\t\t\tthis._stateManager.reset({ reason: StateManager.ActionReason.ABORT });\n\t\t}\n\t\tif (this._statisticManager) {\n\t\t\tthis._statisticManager.stop();\n\t\t}\n\t\tif (this._eventManager) {\n\t\t\tthis._eventManager.destroy();\n\t\t}\n\n\t\tif (this._player) {\n\t\t\treturn this._player.unload().then(function () {\n\t\t\t\tif (options == null || options.triggerPlayEndEvent == null || (options && options.triggerPlayEndEvent)) {\n\t\t\t\t\tthis._onEnded({ reason: StateManager.ActionReason.ABORT });\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t}.bind(this));\n\t\t}\n\n\t\treturn Promise.resolve().then(function () {\n\t\t\tif (options == null || options.triggerPlayEndEvent == null || (options && options.triggerPlayEndEvent)) {\n\t\t\t\tthis._onEnded({ reason: StateManager.ActionReason.ABORT });\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t}.bind(this));\n\t}\n\n\t/**\n\t * Determine stream switch is adaptation or manual(deprecated)\n\t * @param {boolean} value true is set adaptation, false is set to not.\n\t * @deprecated Renamed to setAdaptation\n\t */\n\tsetAdaption(value) {\n\t\tif (this._player) {\n\t\t\tthis._player.setAdaptation(value);\n\t\t}\n\t}\n\n\t/**\n\t * Determine stream switch is adaptation or manual\n\t * @param {boolean} value true is set adaptation, false is set to not.\n\t */\n\tsetAdaptation(value) {\n\t\tif (this._player) {\n\t\t\tthis._player.setAdaptation(value);\n\t\t}\n\t}\n\n\t/**\n\t * Select track\n\t * @params\n\t * @param {NLTrack} track - track object\n\t * @param {boolean} [optClearBuffer] - true by default. \n\t * Set true for clear buffer when switch, which cause to pause and resume for a while; otherwise set to false for smooth playback.\n\t * For HLS/DASH, not for Native (Safari)\n\t */\n\tselectTrack(track, optClearBuffer) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'selectTrack called, track={' + track.id + ', ' + track.name + '}' + (optClearBuffer == null ? '' : (', optClearBuffer=' + optClearBuffer)));\n\t\tif (this._player && track) {\n\t\t\tthis._player.selectTrack(track, (optClearBuffer == null) ? true : !!optClearBuffer);\n\t\t}\n\t}\n\n\t/**\n\t * hide all text track\n\t */\n\thideAllTextTracks() {\n\t\tlet textTracks = this._video.textTracks;\n\t\tfor (let i = 0; i < textTracks.length; i++) {\n\t\t\tlet base = textTracks[i];\n\t\t\tif (this._player.type === AdaptivePlayer.PlayerType.SHAKA && base.label === 'Shaka Player TextTrack') {\n\t\t\t\tthis._player.setTextTrackVisibility(false);\n\t\t\t} else if (base.mode !== 'disabled') {\n\t\t\t\tbase.mode = 'hidden';\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return video tracks\n\t * Return [] on Safari with native video player\n\t * @returns {NLTrack[]} Track info objects\n\t */\n\tvideoTracks() {\n\t\tif (this._player) {\n\t\t\treturn this._player.videoTracks();\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Return audio tracks\n\t * @returns {NLTrack[]} Track info objects\n\t */\n\taudioTracks() {\n\t\tif (this._player) {\n\t\t\treturn this._player.audioTracks();\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Return text tracks\n\t * @returns {NLTrack[]} Track info objects\n\t */\n\ttextTracks() {\n\t\tif (this._player) {\n\t\t\treturn this._player.textTracks();\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Return text tracks for cc control (Deprecated)\n\t * @deprecated\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n\t * @returns {TextTrack[]}\n\t */\n\tccTracks() {\n\t\tif (this._player) {\n\t\t\treturn this._player.ccTracks();\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * @typedef {object} Cuepoint\n\t * @property {number} time time to trigger\n\t * @property {string} name name of cuepoint\n\t * @property {object} object self-defined object which will be passed when triggered\n\t * @global\n\t */\n\t/**\n\t * Add cuepoint(s)\n\t * @param {Array.<Cuepoint>} cues\n\t * @returns {boolean} True when Success, Otherwise False\n\t */\n\taddCuepoints(cues) {\n\t\tif (this._cuepointManager) {\n\t\t\treturn this._cuepointManager.addCuepoints(cues);\n\t\t}\n\t}\n\n\t/**\n\t * Remove cuepoint with conditions\n\t * @param {Integer} time - time to trigger\n\t * @param {string} name - name of cuepoint\n\t * @returns {boolean} True when Success, Otherwise False\n\t */\n\tremoveCuepoint(time, name) {\n\t\tif (this._cuepointManager) {\n\t\t\treturn this._cuepointManager.removeCuepoint(time, name);\n\t\t}\n\t}\n\n\t/**\n\t * Return all cuepoints\n\t * @returns {Cuepoint[]}\n\t * @since v2.2.0\n\t */\n\tgetCuepoints() {\n\t\tif (this._cuepointManager) {\n\t\t\treturn this._cuepointManager.getCuepoints();\n\t\t}\n\t}\n\n\t/**\n\t * Remove all cuepoints\n\t */\n\tremoveAllCuepoints() {\n\t\tif (this._cuepointManager) {\n\t\t\treturn this._cuepointManager.removeAllCuepoints();\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {object} ThumbnailStream\n\t * @property {number} id\n\t * @property {number} width\n\t * @property {number} height\n\t * @property {number|undefined} baseTime in seconds\n\t * @global\n\t * @since v2.0.0\n\t */\n\t/**\n\t * Get thumbnail streams\n\t * @return {Array.<ThumbnailStream>}\n\t * @since v2.0.0\n\t */\n\tgetThumbnailStreams() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'getThumbnailStreams');\n\t\tlet thumbnails = [];\n\t\tif (this._player && this._player.getThumbnailStreams &&\n\t\t\t\t(this._player.type === AdaptivePlayer.PlayerType.SHAKA ||\n\t\t\t\tthis._player.type === AdaptivePlayer.PlayerType.HLSJS ||\n\t\t\t\tthis._player.type === AdaptivePlayer.PlayerType.NATIVE)) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'getThumbnailStreams result:');\n\t\t\tthumbnails = this._player.getThumbnailStreams();\n\t\t\tif (thumbnails) {\n\t\t\t\tthumbnails.forEach(function (element) {\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.WARING, 'AdaptivePlayer',\n\t\t\t\t\t\t'id-width-height: ' + element.id + '-' + element.width + '-' + element.height);\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t} else {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'Failed to get thumbnail streams');\n\t\t}\n\t\treturn thumbnails;\n\t}\n\n\t/**\n\t * @typedef {object} ThumbnailImage\n\t * @property {string} url\n\t * @property {number} startTime\n\t * @property {number} endTime\n\t * @property {number} topX\n\t * @property {number} topY\n\t * @property {number} width\n\t * @property {number} height\n\t * @global\n\t * @since v2.0.0\n\t */\n\t/**\n\t * callback of thumbnails, return thumbnails requested\n\t *\n\t * @callback ThumbnailsCb\n\t * @param {object}\n\t * @property {array.<ThumbnailImage>} images\n\t * @property {number|undefined} baseTime\n\t * @property {number} requestTime\n\t * @property {number} streamId\n\t * @global\n\t * @since v2.0.0\n\t */\n\t/**\n\t * Get thumbnails.\n\t * @param {number} id id get from function getThumbnailStreams\n\t * @param {number} time absolute pts time\n\t * @param {ThumbnailsCb} cb call back function\n\t * @since v2.0.0\n\t */\n\tgetThumbnailStreamImages(id, time, cb) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'getThumbnailStreamImages: id=' + id + ' time=' + time);\n\t\tif (this._player && this._player.getThumbnailStreamImages &&\n\t\t\t\t(this._player.type === AdaptivePlayer.PlayerType.SHAKA ||\n\t\t\t\tthis._player.type === AdaptivePlayer.PlayerType.HLSJS ||\n\t\t\t\tthis._player.type === AdaptivePlayer.PlayerType.NATIVE)) {\n\t\t\tthis._player.getThumbnailStreamImages(id, time, cb);\n\t\t} else {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'Failed to get thumbnail');\n\t\t}\n\t}\n\n\t/**\n\t * Set log level\n\t * @params {LogLevel} level\n\t * @example player.setLogLevel(AdaptivePlayer.LogLevel.DEBUG);\n\t */\n\tsetLogLevel(level) {\n\t\tthis._logger.setLogLevel(level);\n\t}\n\n\t/**\n\t * @description set other AdaptivePlayers and make them synchronized with this AdaptivePlayer.\n\t *\n\t * @param {AdaptivePlayer[]}\n\t * @since v2.1.0\n\t */\n\tsetSynchronizedViews(players) {\n\t\tthis._multiViewsManager.setSyncViews(players);\n\t}\n\n\t/**\n\t * Return state of player\n\t * @returns {STATE}\n\t * @example [IDLE, LOADING, BUFFERING, PLAYING, PAUSED, SEEKING]\n\t */\n\tgetState() {\n\t\tif (this._stateManager) {\n\t\t\treturn this._stateManager.getState();\n\t\t}\n\t\treturn AdaptivePlayer.State.IDLE;\n\t}\n\n\t/**\n\t * get current configuration\n\t * @deprecated\n\t */\n\tgetConfigure() {\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * get current configuration\n\t * @deprecated\n\t * @since v3.0.0\n\t */\n\tgetConfigurations() {\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * @typedef {Object} Statistics\n\t * @property {number} bandwidth in Kbps\n\t * @property {number} bitrate in Kbps\n\t * @property {TimeRanges} buffered\n\t * @property {number} currentTime in second\n\t * @property {number} droppedFrameCount total frames dropped\n\t * @property {number} totalVideoFrames total frames decoded\n\t * @property {number|Infinity} duration in second\n\t * @property {boolean} isAutoSwitch set to adaptive or not\n\t * @property {object} bytesLoaded\n\t * @property {string} bytesLoaded.cdnName\n\t * @property {number} bytesLoaded.bytes in byte\n\t * @property {boolean} muted\n\t * @property {number} playbackRate\n\t * @property {number} readyState\n\t * @property {State} state current state of player\n\t * @property {Object} switchHistory\n\t * @property {number} switchHistory.from\n\t * @property {number} switchHistory.to\n\t * @property {boolean} switchHistory.fromAdaptation true - auto, false - manual\n\t * @property {number} switchHistory.timestamp in second\n\t * @property {string} switchInfo i.e. 'Auto: [...] -> [800]'\n\t * @property {number} videoHeight\n\t * @property {number} videoWidth\n\t * @property {number} volume\n\t * @property {number | NaN} livePointOffest offset to live point from current position, NaN for VOD\n\t * @global\n\t */\n\n\t/**\n\t * Return statistics of playback\n\t * @returns {Statistics}\n\t */\n\tgetStats() {\n\t\tlet emptyStats = {\n\t\t\tcurrentTime: '',\n\t\t\tduration: '',\n\t\t\tvideoWidth: '',\n\t\t\tvideoHeight: '',\n\t\t\tmuted: '',\n\t\t\tvolume: 0,\n\t\t\tisLive: false,\n\t\t\tdroppedFrameCount: '',\n\t\t\ttotalVideoFrames: '',\n\t\t\treadyState: '',\n\t\t\tbuffered: '',\n\t\t\tbufferingTime: 0,\n\t\t\tplaybackRate: '',\n\t\t\tbytesLoaded: [],\n\t\t\tstate: '',\n\t\t\turl: '',\n\t\t\tbandwidth: '',\n\t\t\tbitrate: '',\n\t\t\tswitchInfo: '',\n\t\t\tswitchHistory: NaN,\n\t\t\tisAutoSwitch: '',\n\t\t\tlivePointOffest: -1\n\t\t};\n\t\t\n\t\tif (!this._player || !this._video) {\n\t\t\treturn emptyStats;\n\t\t}\n\n\t\tlet info = { droppedFrameCount: 0, totalVideoFrames: 0 };\n\t\tif (this._video.readyState >= 2) {\n\t\t\tif (HTMLVideoElement.prototype.getVideoPlaybackQuality) {\n\t\t\t\tlet e = this._video.getVideoPlaybackQuality();\n\t\t\t\tinfo.droppedFrameCount = e.droppedVideoFrames;\n\t\t\t\tinfo.totalVideoFrames = e.totalVideoFrames;\n\t\t\t} else if (typeof this._video.webkitDroppedFrameCount === 'number') {\n\t\t\t\tinfo.droppedFrameCount = this._video.webkitDroppedFrameCount;\n\t\t\t\tinfo.totalVideoFrames = this._video.webkitDecodedFrameCount\n\t\t\t}\n\t\t}\n\n\t\tlet playerStats = this._player.getStats();\n\t\tlet switchInfo = '';\n\t\tif (playerStats && playerStats.switchInfo) {\n\t\t\tswitchInfo = playerStats.switchInfo.fromAdaptation ? 'Auto: ' : 'Manual: ';\n\t\t\tif (playerStats.switchInfo.from) {\n\t\t\t\tswitchInfo += '[' + playerStats.switchInfo.from / 1000 + '] -> [';\n\t\t\t} else {\n\t\t\t\tswitchInfo += '[...] -> [';\n\t\t\t}\n\t\t\tif (playerStats.switchInfo.to) {\n\t\t\t\tswitchInfo += playerStats.switchInfo.to / 1000 + ']';\n\t\t\t} else {\n\t\t\t\tswitchInfo += '...]';\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tcurrentTime: this.currentTime,\n\t\t\tduration: this.duration,\n\t\t\tvideoWidth: this._video.videoWidth,\n\t\t\tvideoHeight: this._video.videoHeight,\n\t\t\tmuted: this._video.muted,\n\t\t\tvolume: this._video.volume,\n\t\t\tisLive: this.isLive(),\n\t\t\turl: this._url,\n\t\t\ttotalVideoFrames: info.totalVideoFrames,\n\t\t\tdroppedFrameCount: info.droppedFrameCount,\n\t\t\treadyState: this._video.readyState,\n\t\t\tbuffered: this._video.buffered,\n\t\t\tplaybackRate: this._video.playbackRate,\n\t\t\tstate: this.getState(),\n\t\t\tbufferingTime: this._stateManager.getBufferingTime() / 1000.0,\n\t\t\tbytesLoaded: playerStats.bytesLoaded,\n\t\t\tbandwidth: playerStats.bandwidth,\n\t\t\tbitrate: playerStats.bitrate,\n\t\t\tswitchInfo: switchInfo,\n\t\t\tswitchHistory: playerStats.switchHistory,\n\t\t\tisAutoSwitch: playerStats.isAutoSwitch,\n\t\t\tlivePointOffest: playerStats.livePointOffest\n\t\t};\n\t}\n\n\t/**\n \t * Get/Set current sample duration of current bitrate\n \t * @param {number} value return 0 when something wrong\n \t*/\n\tget sampleDuration() {\n\t\tif (this._player && this._url !== '') {\n\t\t\treturn this._player.sampleDuration;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Get/Set current time of video element\n\t * @param {number} value\n\t */\n\tget currentTime() {\n\t\tif (this._player) {\n\t\t\treturn this._player.currentTime;\n\t\t}\n\t\treturn 0;\n\t}\n\tset currentTime(value) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'Seek to ' + value);\n\t\t// set to 0 in case not defined or less than 0\n\t\tif (value == null || value <= 0) { \n\t\t\tvalue = Settings.SMALL_GAP_TO_START;\n\t\t}\n\t\tif (this._stateManager) {\n\t\t\tthis._stateManager.notifyUserSeek();\n\t\t}\n\t\tif (this._player) {\n\t\t\tthis._player.currentTime = value;\n\t\t\tthis._clearID3AfterSeek = true;\n\t\t}\n\t}\n\n  normalizeCurrentTime() {\n   if (this._player && this._url !== '') {\n      if (this._player.type === AdaptivePlayer.PlayerType.HLSJS) {\n        this._player.setNormalizeCurrentTime();\n      }\n    }\n  }\n\n  getNormalizeCurrentTime() {\n    if (this._player && this._url !== '') {\n      if (this._player.type === AdaptivePlayer.PlayerType.HLSJS) {\n        return this._player.getNormalizeCurrentTime(); \n      } else {\n        return this._player.currentTime;\n      }\n    }\n    return 0;\n  }\n\n\t/**\n\t * Get duration of video element\n\t * @returns {Number} In seconds, or NaN when not open, or Infinity when live\n\t * @readonly\n\t */\n\tget duration() {\n\t\tif (this.isLive()) {\n\t\t\treturn Infinity;\n\t\t}\n\t\treturn this._video.duration;\n\t}\n\n\t/**\n\t * Get stream type\n\t * @returns {AdaptivePlayer.StreamType}\n\t * @readonly\n\t */\n\tget streamType() {\n\t\tif (this._player) {\n\t\t\treturn this._player.streamType;\n\t\t}\n\t\treturn AdaptivePlayer.StreamType.UNKNOWN;\n\t}\n\n\t/**\n\t * Get type of player\n\t * @returns AdaptivePlayer.PlayerType\n\t * @readonly\n\t */\n\tget playerType() {\n\t\tif (this._player) {\n\t\t\treturn this._player.type;\n\t\t}\n\t\treturn AdaptivePlayer.PlayerType.UNKNOWN;\n\t}\n\n\t/**\n\t * Get buffered info of video element\n\t * @readonly\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n\t */\n\tget buffered() {\n\t\treturn this._video.buffered;\n\t}\n\n\t/**\n\t * Get/Set mute of video element\n\t * @params {boolean} value\n\t * @example player.muted = true;\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted\n\t */\n\tget muted() {\n\t\treturn this._video.muted;\n\t}\n\tset muted(value) {\n\t\tthis._video.muted = value;\n\t}\n\n\t/**\n\t * Get/Set volume of video element\n\t * @param {Number} value\n\t * @example\n\t\t\t// 1.0 is highest volume (100%. This is default)\n\t\t\t// 0.5 is half volume (50%)\n\t\t\t// 0.0 is silent (same as mute)\n\t\t\tplayer.volume = 1.0;\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume\n\t */\n\tget volume() {\n\t\treturn this._video.volume;\n\t}\n\tset volume(value) {\n\t\tthis._video.volume = value;\n\t}\n\n\t/**\n\t * Get/set source of video element\n\t * @param {string} value\n\t * @type String\n\t * @example player.src = 'https://sample.com/test.m3u8'\n\t * @returns {String}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src\n\t */\n\tget src() {\n\t\treturn this._video.src;\n\t}\n\tset src(value) {\n\t\tthis._video.src = value;\n\t}\n\n\t/**\n\t * Get/Set playbackRate of video element\n\t * @example\n\t\t\t1.0 is normal speed\n\t\t\t0.5 is half speed (slower)\n\t\t\t2.0 is double speed (faster)\n\t * @default 1.0\n\t * @returns {Number}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate\n\t */\n\tget playbackRate() {\n\t\treturn this._video.playbackRate;\n\t}\n\tset playbackRate(value) {\n\t\tthis._video.muted = (value !== 1);\n\t\tthis._video.playbackRate = value;\n\t}\n\n\t/**\n\t * Indicates the readiness state of the media.\n\t * @readonly\n\t * @returns {Number}\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState\n\t */\n\tget readyState() {\n\t\treturn this._video.readyState;\n\t}\n\n\t/**\n\t * Work-around to clear wrong cues of all text tracks during slate\n\t */\n\tclearWrongCues() {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'Clear wrong cues of all text tracks during slate');\n\t\tlet textTracks = this._video.textTracks;\n\t\tfor (let i = textTracks.length - 1; i >= 0; i--) {\n\t\t\tif ((textTracks[i].kind === 'subtitles' || textTracks[i].kind === 'captions') &&\n\t\t\t\t\t(textTracks[i].mode === 'showing')) {\n\t\t\t\ttextTracks[i].mode = 'hidden';\n\t\t\t\t// clear active cues\n\t\t\t\tif (textTracks[i].activeCues) {\n\t\t\t\t\tfor (let j = textTracks[i].activeCues.length - 1; j >= 0; j--) {\n\t\t\t\t\t\tlet cue = textTracks[i].activeCues[j];\n\t\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.WARING, 'AdaptivePlayer', 'Clear wrong active cue: [' + cue.startTime + ',' | cue.endTime + ']');\n\t\t\t\t\t\ttextTracks[i].removeCue(cue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// clear wrong cues\n\t\t\t\tif (textTracks[i].cues) {\n\t\t\t\t\tfor (let j = textTracks[i].cues.length - 1; j >= 0; j--) {\n\t\t\t\t\t\tlet cue = textTracks[i].cues[j];\n\t\t\t\t\t\tif (cue.startTime < this.currentTime && cue.endTime >= this.currentTime) {\n\t\t\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.WARING, 'AdaptivePlayer', 'Clear wrong cue: [' + cue.startTime + ',' | cue.endTime + ']');\n\t\t\t\t\t\t\ttextTracks[i].removeCue(cue);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttextTracks[i].mode = 'showing';\n\t\t\t}\n\t\t}\n\t}\n\n\t// private functions\n\n\t_createPlayer(type) {\n\t\tif (type === AdaptivePlayer.PlayerType.NATIVE) {\n\t\t\treturn new BasicPlayer(this._video, this);\n\t\t} else if (type === AdaptivePlayer.PlayerType.SHAKA) {\n\t\t\treturn new DashPlayer(this._video, this);\n\t\t} else if (type === AdaptivePlayer.PlayerType.HLSJS) {\n\t\t\treturn new HlsPlayer(this._video, this);\n\t\t} else if (type === AdaptivePlayer.PlayerType.WEBRTC) {\n\t\t\treturn new WebRTCPlayer(this._video, this);\n\t\t} else {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'Failed to create player with type=' + type);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// timeupdate will be thrown between about 4Hz and 66Hz (assuming the event handlers don't take longer than 250ms to run)\n\t// Use 4HZ to trigger timeupdate event to upper layer\n\t_onTimeUpdate(event) {\n\t\tlet data = {\n\t\t\tcurrentTime: this.currentTime,\n\t\t\tduration: this.duration,\n\t\t\tbuffered: this.buffered\n\t\t};\n\n\t\t// update cuepoint manager\n\t\tif (this._cuepointManager) {\n\t\t\tthis._cuepointManager.onTimeUpdate(data);\n\t\t}\n\t\t// send empty advertisement only\n\t\tthis._emptyAdvertisementList.sort(function (a, b) {\n\t\t\treturn a.time - b.time;\n\t\t});\n\t\tfor (let index = 0; index < this._emptyAdvertisementList.length; index++) {\n\t\t\tlet item = this._emptyAdvertisementList[index];\n\t\t\tif (item.time <= this.currentTime && item.time >= (this.currentTime - 1)) {\n\t\t\t\titem.urls.forEach(function (url) {\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', '+++ Posted beacon: ' + url);\n\t\t\t\t\tXHRUtil.sendWithIframe(url);\n\t\t\t\t\t// XHRUtil.createXHR({url: item.url}).catch(function (e) {});\n\t\t\t\t}.bind(this));\n\t\t\t\t// remove it\n\t\t\t\tthis._emptyAdvertisementList.splice(index, 1);\n\t\t\t\tindex--;\n\t\t\t} else if (item.time > this.currentTime) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// call inner player timeupdate\n\t\tif (this._player && this._player._onTimeUpdate) {\n\t\t\tthis._player._onTimeUpdate(data);\n\t\t}\n\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'Fired TimeUpdate: ' + event + '[' + JSON.stringify(data) + ']');\n\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.TimeUpdate, {\n\t\t\tcurrentTime: this.currentTime,\n\t\t\tduration: this.duration,\n\t\t\tbuffered: this.buffered,\n\t\t\tdetails: data\n\t\t}));\n\t}\n\n\t_onRateChange(event) {\n\t\tthis.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.RateChange, {\n\t\t\t\tdetails: {\n\t\t\t\t\trate: event.target.playbackRate\n\t\t\t\t}\n\t\t\t}));\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'Fired RateChange: ' + '[playbackRate = ' + event.target.playbackRate + ']');\n\n\t\t/*\n      Workaround of video.onended not triggered on Edge/IE 11\n      Conditions:\n      1. IE11/Edge only\n      2. VOD only\n      3. playbackRate == 0\n      4. Remain duration less that 0.5s\n    */\n\t\tif ((this.browserType === 'IE' || this.browserType === 'Edge') &&\n\t\t\t!this.isLive() &&\n\t\t\tthis._video.playbackRate === 0 &&\n\t\t\t(this._video.duration - this._video.currentTime <= 1)) {\n\t\t\tsetTimeout(function () {\n\t\t\t\tthis._stateManager.reset({ reason: StateManager.ActionReason.ABORT });\n\t\t\t\tthis._video.pause();\n\t\t\t\tthis._onEnded({ reason: StateManager.ActionReason.ABORT });\n\t\t\t}.bind(this), 1000); // Simulate onended after 1s\n\t\t}\n\t}\n\n\t_onProgress(event) {\n\t\tthis.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.Progress, {\n\t\t\t\tdetails: {\n\t\t\t\t\ttimeStamp: event.timeStamp,\n\t\t\t\t\teventPhase: event.eventPhase\n\t\t\t\t}\n\t\t\t}));\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', 'Fired Progress: ' + event);\n\t}\n\n\t_onResize(event) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'resize triggered');\n\t\tif (this._player && this._player.notifyProfileChanged) {\n\t\t\tthis._player.notifyProfileChanged({\n\t\t\t\tvideoWidth: event.target.videoWidth,\n\t\t\t\tvideoHeight: event.target.videoHeight\n\t\t\t});\n\t\t}\n\t}\n\n\t_onVolumeChange(event) {\n\t\tlet data = {\n\t\t\tmuted: event.target.muted,\n\t\t\tvolume: event.target.volume\n\t\t};\n\n\t\tthis.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.VolumeChange, { details: data }));\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'Fired VolumeChange: ' + event + '[' + JSON.stringify(data) + ']');\n\t}\n\n\t_onTextTracksChanged(event) {\n\t\t// only notify text track change for HLS\n\t\tif (this._player.type === AdaptivePlayer.PlayerType.HLSJS) {\n\t\t\tthis.dispatchEvent(\n\t\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { details: { type: AdaptivePlayer.Kind.TEXT, track: this.textTracks() } }));\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'Fired TrackChange: ' + '[' + event.track.kind + ' / ' + event.track.label + ']');\n\t\t}\n\t}\n\n\t_onEnded(event) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'Fired PlayEnd ' + JSON.stringify(event));\n\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.PlayEnd, { details: event }));\n\t}\n\n\t_onVideoEvent(evt) {\n\t\tlet data = '';\n\t\tswitch (evt.type) {\n\t\t\tcase 'durationchange':\n\t\t\t\tif (evt.target.duration - this._lastDuration <= 0.5) {\n\t\t\t\t\t// some browsers reports several duration change events with almost the same value ... avoid spamming video events\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastDuration = evt.target.duration;\n\t\t\t\tdata = Math.round(evt.target.duration * 1000);\n\t\t\t\tbreak;\n\t\t\tcase 'loadedmetadata':\n\t\t\t\tdata = 'duration:' + evt.target.duration + '/videoWidth:' + evt.target.videoWidth + '/videoHeight:' + evt.target.videoHeight;\n\t\t\t\tthis._oneTimeSeek = true;\n\t\t\t\tthis._firstPlayAfterMetadataLoaded = true;\n\t\t\t\tthis._oneTimeAutoPlay = true;\n\t\t\t\tbreak;\n\t\t\t// case 'loadeddata':\n\t\t\tcase 'canplay':\n\t\t\t\tif (this._firstPlayAfterMetadataLoaded) {\n\t\t\t\t\tthis._firstPlayAfterMetadataLoaded = false;\n\n\t\t\t\t\tthis._endLoadTime = new Date();\n\t\t\t\t\tthis._loaded = true;\n\t\t\t\t\tlet data = { loadTime: (this._endLoadTime - this._startLoadTime), details: { loadTime: (this._endLoadTime - this._startLoadTime) } };\n\t\t\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.PlayStart, data));\n\t\t\t\t\tthis._player.notifyPlayStarted(); // notify to player\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'Fired PlayStart: ' + '[' + JSON.stringify(data) + ']');\n\t\t\t\t}\n\n\t\t\t\t// Firefox will not get canplaythrough sometimes,\n\t\t\t\t// We need to add seek to buffer start here\n\t\t\t\t// Fix bug of 146, 151\n\t\t\t\ttry {\n\t\t\t\t\tif (this._oneTimeSeek && this._video.currentTime === 0 && this._video.buffered.length > 0) {\n\t\t\t\t\t\tthis._video.currentTime = this._video.buffered.start(0) + Settings.SMALL_GAP_TO_START; // add small offset to start play on Firefox\n\t\t\t\t\t\tthis._clearID3AfterSeek = false;\n\t\t\t\t\t\tthis._oneTimeSeek = false;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.WARNING, 'AdaptivePlayer', 'seek to buffer start exception: ' + e);\n\t\t\t\t}\n\t\t\t\tthis._statisticManager.stopLoadWatchDog();\n\n\t\t\t\t// work-around of Firefox 55 live stream paused after start play\n\t\t\t\tif (this._pauseAfterSeek) {\n\t\t\t\t\t// this.pause();\n\t\t\t\t\tthis._pauseAfterSeek = false;\n\t\t\t\t} else if (this._video.autoplay && this._oneTimeAutoPlay) {\n\t\t\t\t\tthis._oneTimeAutoPlay = false;\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'work-around of Firefox 55 live stream paused after start play')\n\t\t\t\t\tthis.play();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'canplaythrough':\n\t\t\t\tbreak;\n\t\t\tcase 'seeking':\n\t\t\t\tif (!this._isInSeeking) {\n\t\t\t\t\tif (this._statisticManager) {\n\t\t\t\t\t\tthis._statisticManager.startSeekWatchDog();\n\t\t\t\t\t}\n\t\t\t\t\tthis._isInSeeking = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'seeked':\n\t\t\t\tif (this._clearID3AfterSeek) {\n\t\t\t\t\tthis._cuepointManager.clearID3();\n\t\t\t\t}\n\t\t\t\tif (this._statisticManager) {\n\t\t\t\t\tthis._statisticManager.stopSeekWatchDog();\n\t\t\t\t}\n\t\t\t\tthis._isInSeeking = false;\n\n\t\t\t\t// for NBA-5218 NBA Timeline Inquiry\n\t\t\t\ttry {\n\t\t\t\t\tif (this._video.currentTime === 0 && this._video.buffered.length > 0 && this._video.buffered.start(0) !== 0) {\n\t\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.INFO, 'AdaptivePlayer', 'Do jump to buffered.start( ' + this._video.buffered.start(0) + ') when seek to ' + this._video.currentTime);\n\t\t\t\t\t\tthis._video.currentTime = this._video.buffered.start(0) + Settings.SMALL_GAP_TO_START; // add small offset to start play on Firefox\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.WARNING, 'AdaptivePlayer', 'seek to buffer start exception: ' + e);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'play':\n\t\t\t\tbreak;\n\t\t\tcase 'playing':\n\t\t\t\tbreak;\n\t\t\tcase 'pause':\n\t\t\tcase 'waiting':\n\t\t\tcase 'stalled':\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.dispatchEvent(evt);\n\n\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.StreamingEvent, {\n\t\t\tdetails: {\n\t\t\t\tdata: {\n\t\t\t\t\tfrom: 'AdaptivePlayer',\n\t\t\t\t\tdata: { type: evt.type }\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'Fired streaming event: ' + evt.type + '[' + data + ']');\n\t}\n\n\t_onVideoError(evt) {\n\t\tif (!evt.target.error) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet code = evt.target.error.code;\n\t\tif (code === 1 /* MEDIA_ERR_ABORTED */) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Extra error information from MS Edge and IE11:\n\t\tlet extended = evt.target.error.msExtendedCode;\n\t\tif (extended) {\n\t\t\t// Convert to unsigned:\n\t\t\tif (extended < 0) {\n\t\t\t\textended += Math.pow(2, 32);\n\t\t\t}\n\t\t\t// Format as hex:\n\t\t\textended = extended.toString(16);\n\t\t}\n\n\t\tlet errorCode = AdaptivePlayer.ErrorCode.Playback_Generic_Error;\n\t\tif (evt.type === 'error') {\n\t\t\tlet errorTxt = '';\n\t\t\tlet mediaError = evt.currentTarget.error;\n\t\t\tlet ext = UrlUtil.getExtension(this._url);\n\t\t\tswitch (mediaError.code) {\n\t\t\t\tcase mediaError.MEDIA_ERR_DECODE:\n\t\t\t\t\terrorTxt = 'The video playback was aborted due to a corruption problem or because the video used features your browser did not support';\n\t\t\t\t\terrorCode = AdaptivePlayer.ErrorCode.Incompatible_Codecs_Error;\n\t\t\t\t\tbreak;\n\t\t\t\tcase mediaError.MEDIA_ERR_SRC_NOT_SUPPORTED:\n\t\t\t\t\terrorTxt = 'The video could not be loaded, because the server or network failed';\n\t\t\t\t\t/*\n\t\t\t\t\t\t\tFor Safari 3rd party cookie block issue, using external m3u8 parser to detect 403\n\t\t\t\t\t\t\t. When BasicPlayer get 403 of external parser, set _basic_externalParser_403_found true\n\t\t\t\t\t\t\t. Return 21403 on video error MEDIA_ERR_SRC_NOT_SUPPORTED if _basic_externalParser_403_found true\n\t\t\t\t\t\t\t. Or return 21001\n\t\t\t\t\t\t\t(one-time token used normally for non-drm stream, external parser will get 403 in this case, so can't return 403 on external parser 403 directly)\n\t\t\t\t\t */\n\t\t\t\t\terrorCode = AdaptivePlayer.ErrorCode.Get_Primary_Manifest_Failed + (!!this._player._basic_externalParser_403_found ? AdaptivePlayer.ErrorDetailedCode.Cookie_Reject_Error : AdaptivePlayer.ErrorDetailedCode.Connect_Failed);\n\t\t\t\t\tthis._player._basic_externalParser_403_found = false;\n\n\t\t\t\t\tif ((ext === 'webm' && evt.target.canPlayType('video/webm; codecs=\"vp8, vorbis\"') === '') ||\n\t\t\t\t\t\t(ext === 'ogg' && evt.target.canPlayType('video/ogg; codecs=\"theora\"') === '')) {\n\t\t\t\t\t\terrorTxt = 'The video could not be loaded, because the format is not supported';\n\t\t\t\t\t\terrorCode = AdaptivePlayer.ErrorCode.Incompatible_Codecs_Error;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase mediaError.MEDIA_ERR_NETWORK:\n\t\t\t\t\terrorCode = AdaptivePlayer.ErrorCode.Get_Primary_Manifest_Failed + AdaptivePlayer.ErrorDetailedCode.Connect_Failed;\n\t\t\t\t\terrorTxt = 'A network error caused the video download to fail part-way';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet time = this.currentTime ? this.currentTime : Math.round(evt.target.currentTime * 1000);\n\t\t\terrorTxt += ', playback position: ' + time + (extended ? ' extendCode: ' + extended : ' ');\n\t\t\tthis._statisticManager.reportNativeVideoError(errorTxt, errorCode);\n\n\t\t\t// NFL-822 'The video can't be played on your device.' appear many times.\n\t\t\tthis.stop({ triggerPlayEndEvent: false });\n\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.ERROR, 'AdaptivePlayer', 'Fired streaming error: ' + errorTxt);\n\t\t}\n\t}\n\n\t/* Advertisement \n\t @private\n\t ad end event:\n   @example  {\n            start: xxxx,\n            data: { 'type':'ADEND', 'data': {'adid':'18732270_2659078'}}\n       }\n   ad start/keep event\n   @example  {\n            start: xxxx,\n            data: {'type':'ADSTART', data: {'adid':'18732270_2659078', 'urls':[{'type':'trackClick','url':'http://xxxx'}]}}\n       }\n   */\n\t_onAdvertisement(event) {\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'AdaptivePlayer', '_onAdvertisement');\n\t\t/*\n\t\t{\n\t\t\tadId: '',\n\t\t\ttype: 'ADSTART'/'ADEND'/'ADPOST',\n\t\t\turls: []  // {name:'defaultClick/trackClick, url:'http://...'}\n\t\t}\n\t\t*/\n\t\tif (event) {\n\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', '_onAdvertisement: ' + JSON.stringify(event));\n\t\t\tif (event.type === 'ADSTART' || event.type === 'ADEND') {\n\t\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AdEvent, { start: this.currentTime, data: event, details: event }));\n\t\t\t} else if (event.type === 'ADPOST') {\n\t\t\t\tevent.data.urls.forEach(function (item) {\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', '+++ Posted beacon: ' + item.url);\n\t\t\t\t\tXHRUtil.sendWithIframe(item.url);\n\t\t\t\t\t// XHRUtil.createXHR({url: item.url}).catch(function (e) {});\n\t\t\t\t}.bind(this))\n\t\t\t}\n\t\t}\n\t}\n\n\t/* empty advertisement\n\t @example event: [{type: string, time: number, urls: Array[string]}]\n\t @private\n\t */\n\t_onEmptyAdvertisement(event) {\n\t\tif (event) {\n\t\t\tfor (let i = 0; i < event.length; i++) {\n\t\t\t\tlet exist = this._emptyAdvertisementList.some(function (elem) {\n\t\t\t\t\treturn (elem.time === event[i].time);\n\t\t\t\t});\n\t\t\t\tif (exist === false) {\n\t\t\t\t\tthis._emptyAdvertisementList.push(event[i]);\n\t\t\t\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'AdaptivePlayer', 'Add empty advertisement: ' + JSON.stringify(event[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* range\n\t @example event.detail: [{id: string, start: number, end: number}]\n\t @private\n\t */\n\t_onAdRangesUpdate(event) {\n\t\tif (event) {\n\t\t\tlet data = { type: AdaptivePlayer.AD.RANGE_EVENT, data: event };\n\t\t\tthis.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AdEvent, { start: this.currentTime, details: data, data: data }));\n\t\t}\t\t\n\t}\n}\n\n// global variables\n\n/**\n * Version string\n * @global\n */\nAdaptivePlayer.version = __VERSION__;\n\n/**\n * Version of player cores\n * @global\n */\nAdaptivePlayer.coreVersion = 'shaka-player: ' + DashPlayer.version +\n\t', hls.js: ' + HlsPlayer.version +\n\t', basic: ' + BasicPlayer.version +\n\t', webrtc: ' + WebRTCPlayer.version;\n\n/**\n * Types of player used\n * @global\n * @enum {string}\n */\nAdaptivePlayer.PlayerType = {\n\tSHAKA: 'shaka',\n\tHLSJS: 'hls.js',\n\tNATIVE: 'native',\n\t/** since 3.0.0 */\n\tWEBRTC: 'nlwebrtc',\n\tUNKNOWN: 'unknown'\n};\n\n/**\n * Streaming types\n * @global\n * @enum {string}\n */\nAdaptivePlayer.StreamType = {\n\tHTTP_VIDEO: 'HTTP',\n\tDASH: 'DASH',\n\tHLS: 'HLS',\n\t/** since 3.0.0 */\n\tWEBRTC: 'WEBRTC',\n\tUNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Streaming components types\n * @global\n * @enum {string}\n */\nAdaptivePlayer.Kind = {\n\tVIDEO: 'VIDEO',\n\tAUDIO: 'AUDIO',\n\tTEXT: 'TEXT',\n\tUNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Error codes\n * @global\n * @see NLError.Code\n * @since v2.0.0\n */\nAdaptivePlayer.ErrorCode = NLError.Code;\n\n/**\n * Error detailed codes\n * @global\n * @see NLError.NetworkDetailCode\n * @since v2.0.0\n */\nAdaptivePlayer.ErrorDetailedCode = NLError.NetworkDetailCode;\n\n/**\n * Error report levels\n * @see NLError.SeverityLevel\n * @global\n * @since v2.0.0\n */\nAdaptivePlayer.ErrorReportLevel = NLError.SeverityLevel;\n\n/**\n * Logger levels\n * @see LogUtil.LogLevel\n * @global\n */\nAdaptivePlayer.LogLevel = LogUtil.LogLevel;\n\n/**\n * Detected OS info\n * @global\n * @see https://github.com/faisalman/ua-parser-js \n */\nAdaptivePlayer.OS = (new UAParser().getOS());\n\n/**\n * Browser's name\n * Use native player for iOS: browserType of iOS Webview is \"WebKit\"\n * in this case, browserType of iOS Webview set to 'Mobile Safari' \n * @global\n * @see https://github.com/faisalman/ua-parser-js\n */\nAdaptivePlayer.browserType = (AdaptivePlayer.OS.name === 'iOS') ? 'Mobile Safari' : (new UAParser().getBrowser().name);\n\n/**\n * Event types\n * @global\n * @see EventManager.EventType\n */\nAdaptivePlayer.EventType = EventManager.EventType;\n\n/**\n * State of player\n * @global\n * @see StateManager.State\n */\nAdaptivePlayer.State = StateManager.State;\n\n/**\n * Events of AD\n * @readonly\n * @static\n * @enum {string}\n * @since v2.2.2\n */\nAdaptivePlayer.AD = {\n\tSTART_EVENT: 'ADSTART',\n\tEND_EVENT: 'ADEND',\n\tRANGE_EVENT: 'ADRANGES',\n\tDEFAULT_CLICK: 'defaultClick',\n\tTRACK_CLICK: 'trackClick'\n};\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/AdaptivePlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "AdaptivePlayer",
    "memberof": "src/AdaptivePlayer.js",
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/AdaptivePlayer.js",
    "importStyle": "{AdaptivePlayer}",
    "description": "Endeavor Streaming HTML5 Adaptive Player\n<br>Support DASH with Shaka player, support HLS with native player and hls.js\n<br>And HTTP video (mp4/ogg/webm) with native support",
    "examples": [
      "let player = new AdaptivePlayer(document.getElementById('video'));\n..."
    ],
    "lineNumber": 43,
    "version": "3.0.0",
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AdaptivePlayer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLVideoElement"
        ],
        "spread": false,
        "optional": false,
        "name": "video",
        "description": "video element to play with; return error when null"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opt",
        "description": "other informations, reserved"
      }
    ],
    "interface": false,
    "extends": [
      "src/Utils/FakeEventTarget.js~FakeEventTarget"
    ],
    "implements": [
      "*"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_video",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_video",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_player",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_player",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_config",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_config",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_url",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_url",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_loaded",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_loaded",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_autoPlayStatusEventSent",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_autoPlayStatusEventSent",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_logger",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_logger",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_statisticManager",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_statisticManager",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_videoautoplay",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_videoautoplay",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_stateManager",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_stateManager",
    "access": "private",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_cuepointManager",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_cuepointManager",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_clearID3AfterSeek",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_clearID3AfterSeek",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_multiViewsManager",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_multiViewsManager",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_debugPanel",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_debugPanel",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_emptyAdvertisementList",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_emptyAdvertisementList",
    "access": "private",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#destroy",
    "access": "public",
    "description": "Destroy instance, this instance can't be used anymore",
    "lineNumber": 111,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "nativeCanPlay",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#nativeCanPlay",
    "access": "public",
    "description": "Determine native support of stream protocol by browser",
    "examples": [
      "{ m3u8: false, mpd: false }"
    ],
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{json}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "json"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "support",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer.support",
    "access": "public",
    "description": "Return support information",
    "lineNumber": 210,
    "params": [
      {
        "nullable": null,
        "types": [
          "SupportCb"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "return 4 types of informations, including:\n<br>                                 1. supported drm systems\n<br>                                 2. supported media codecs\n<br>                                 3. supported manifest types\n<br>                                 4. support offline or not"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "configure",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#configure",
    "access": "public",
    "description": "Set configurations of player",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "player configurations"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "config.withCredentials",
        "description": "false by default"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "config.withCredentialsFragmentPattern",
        "description": "set to use withCredentials for segment url with defined values, by default ['/nlds/', '/nldsu/', '/nlds_vod/', '/nldsu_vod/']"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "config.useExternalM3U8Parser",
        "description": "Use external m3u8 parser for native player (DRM streams on Mac and play on iOS browsers) to get UTC time and AD-stitching related tags"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "config.appendXPLAYForStitching",
        "description": "Append playbackId for DASH stitching/failover (x-play=uuid) false by default"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.abr",
        "description": "adaptive playback or fixed bitrate"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "config.abr.enabled",
        "description": "true (adaptive playback) by default"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "config.abr.startBitrate",
        "description": "Start playback with defined bitrate; abr.enabled should set to false"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm",
        "description": "DRM related configurations"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.widevine",
        "description": "Widevine related configurations"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.widevine.server",
        "description": "License server url of Widevine"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.playready",
        "description": "playready related configurations"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.playready.server",
        "description": "License server url of playready"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.fairplay",
        "description": "fairplay related configurations"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.fairplay.server",
        "description": "License server url of fairplay"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.fairplay.serverCertificate",
        "description": "url to get server certificate of fairplay"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.params",
        "description": "parameters"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.drm.params.token",
        "description": "cro token for authentication of license server"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.preferredAudioLanguage",
        "description": "enable audio track of preferred audio language; Otherwise first audio track will be selected."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.preferredTextLanguage",
        "description": "enable text track of preferred text language; Otherwise first text track will be selected."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "config.closedCaption",
        "description": "CC configurations"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.closedCaption.label",
        "description": "display label of CC, 'English' by default"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.closedCaption.language",
        "description": "language of CC, 'en' by default"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "config.dashCC",
        "description": "enable to extract CC from DASH video segment, true by default"
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "load",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#load",
    "access": "public",
    "description": "Play video with url,\nReturn error when url is wrong, and current playback will not be stopped while playing",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "playback url"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "startTime",
        "description": "start playback from certain position in second;\n<br> if not set or set as -1, will start from 0 (VOD) or live edge (Live)\n<br> if set as 0, will start from 0 (VOD) or first segment in list (Live)\n<br> For HLS Live, time may be not accurate as player will seek to start time of TS chunk, i.e., pass 1501768500 will go to 1501768510"
      },
      {
        "nullable": null,
        "types": [
          "StreamType"
        ],
        "spread": false,
        "optional": true,
        "name": "streamType",
        "description": "to set streaming type in case of url doesn't end with explicit extension; auto set according to url if set as null"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_pauseAfterSeek",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_pauseAfterSeek",
    "access": "private",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_lastDuration",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_lastDuration",
    "access": "private",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_oneTimeSeek",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_oneTimeSeek",
    "access": "private",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "_oneTimeAutoPlay",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_oneTimeAutoPlay",
    "access": "private",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "_firstPlayAfterMetadataLoaded",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_firstPlayAfterMetadataLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_isInSeeking",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_isInSeeking",
    "access": "private",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_startLoadTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_startLoadTime",
    "access": "private",
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "deviceId",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#deviceId",
    "access": "public",
    "description": "Return unique ID of this machine for playback control",
    "lineNumber": 410,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "string in guid format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "string in guid format"
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#isLive",
    "access": "public",
    "description": "Determine stream is live or vod",
    "lineNumber": 420,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true when live, false when vod"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true when live, false when vod"
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "gotoLive",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#gotoLive",
    "access": "public",
    "description": "Go to live position of live stream",
    "lineNumber": 430,
    "params": [],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "play",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#play",
    "access": "public",
    "description": "Start to play, or resume",
    "lineNumber": 440,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "pause",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#pause",
    "access": "public",
    "description": "Pause playback",
    "lineNumber": 473,
    "params": [],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "stop",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#stop",
    "access": "public",
    "description": "Stop playback",
    "lineNumber": 489,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.triggerPlayEndEvent",
        "description": "whether or not send PlayEnd event when stop called, not send event when onError"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "setAdaption",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#setAdaption",
    "access": "public",
    "description": "Determine stream switch is adaptation or manual(deprecated)",
    "lineNumber": 536,
    "deprecated": "Renamed to setAdaptation",
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true is set adaptation, false is set to not."
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "setAdaptation",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#setAdaptation",
    "access": "public",
    "description": "Determine stream switch is adaptation or manual",
    "lineNumber": 546,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "true is set adaptation, false is set to not."
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#selectTrack",
    "access": "public",
    "description": "Select track",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "NLTrack"
        ],
        "spread": false,
        "optional": false,
        "name": "track",
        "description": "track object"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "optClearBuffer",
        "description": "true by default. \nSet true for clear buffer when switch, which cause to pause and resume for a while; otherwise set to false for smooth playback.\nFor HLS/DASH, not for Native (Safari)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "hideAllTextTracks",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#hideAllTextTracks",
    "access": "public",
    "description": "hide all text track",
    "lineNumber": 570,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "videoTracks",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#videoTracks",
    "access": "public",
    "description": "Return video tracks\nReturn [] on Safari with native video player",
    "lineNumber": 587,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NLTrack[]} Track info objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NLTrack[]"
      ],
      "spread": false,
      "description": "Track info objects"
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "audioTracks",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#audioTracks",
    "access": "public",
    "description": "Return audio tracks",
    "lineNumber": 598,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NLTrack[]} Track info objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NLTrack[]"
      ],
      "spread": false,
      "description": "Track info objects"
    },
    "params": []
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "textTracks",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#textTracks",
    "access": "public",
    "description": "Return text tracks",
    "lineNumber": 609,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NLTrack[]} Track info objects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NLTrack[]"
      ],
      "spread": false,
      "description": "Track info objects"
    },
    "params": []
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "ccTracks",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#ccTracks",
    "access": "public",
    "description": "Return text tracks for cc control (Deprecated)",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack"
    ],
    "lineNumber": 622,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{TextTrack[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TextTrack[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 116,
    "kind": "typedef",
    "name": "Cuepoint",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer.Cuepoint",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@global",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "time to trigger"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of cuepoint"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "self-defined object which will be passed when triggered"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Cuepoint"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "addCuepoints",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#addCuepoints",
    "access": "public",
    "description": "Add cuepoint(s)",
    "lineNumber": 641,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True when Success, Otherwise False"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Cuepoint>"
        ],
        "spread": false,
        "optional": false,
        "name": "cues",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True when Success, Otherwise False"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "removeCuepoint",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#removeCuepoint",
    "access": "public",
    "description": "Remove cuepoint with conditions",
    "lineNumber": 653,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True when Success, Otherwise False"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "time to trigger"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of cuepoint"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True when Success, Otherwise False"
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "getCuepoints",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getCuepoints",
    "access": "public",
    "description": "Return all cuepoints",
    "lineNumber": 664,
    "since": "v2.2.0",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Cuepoint[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Cuepoint[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "removeAllCuepoints",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#removeAllCuepoints",
    "access": "public",
    "description": "Remove all cuepoints",
    "lineNumber": 673,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "typedef",
    "name": "ThumbnailStream",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer.ThumbnailStream",
    "access": "public",
    "description": "",
    "since": "v2.0.0",
    "unknown": [
      {
        "tagName": "@global",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "baseTime",
        "description": "in seconds"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ThumbnailStream"
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "getThumbnailStreams",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getThumbnailStreams",
    "access": "public",
    "description": "Get thumbnail streams",
    "lineNumber": 693,
    "since": "v2.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Array.<ThumbnailStream>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 123,
    "kind": "typedef",
    "name": "ThumbnailImage",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer.ThumbnailImage",
    "access": "public",
    "description": "",
    "since": "v2.0.0",
    "unknown": [
      {
        "tagName": "@global",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "startTime",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "endTime",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "topX",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "topY",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "ThumbnailImage"
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getThumbnailStreamImages",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getThumbnailStreamImages",
    "access": "public",
    "description": "Get thumbnails.",
    "lineNumber": 745,
    "since": "v2.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "id get from function getThumbnailStreams"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": "absolute pts time"
      },
      {
        "nullable": null,
        "types": [
          "ThumbnailsCb"
        ],
        "spread": false,
        "optional": false,
        "name": "cb",
        "description": "call back function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setLogLevel",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#setLogLevel",
    "access": "public",
    "description": "Set log level",
    "examples": [
      "player.setLogLevel(AdaptivePlayer.LogLevel.DEBUG);"
    ],
    "lineNumber": 762,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{LogLevel} level"
      }
    ],
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "setSynchronizedViews",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#setSynchronizedViews",
    "access": "public",
    "description": "",
    "lineNumber": 772,
    "since": "v2.1.0",
    "unknown": [
      {
        "tagName": "@description",
        "tagValue": "set other AdaptivePlayers and make them synchronized with this AdaptivePlayer."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getState",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getState",
    "access": "public",
    "description": "Return state of player",
    "examples": [
      "[IDLE, LOADING, BUFFERING, PLAYING, PAUSED, SEEKING]"
    ],
    "lineNumber": 781,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{STATE}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "STATE"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getConfigure",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getConfigure",
    "access": "public",
    "description": "get current configuration",
    "lineNumber": 792,
    "deprecated": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getConfigurations",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getConfigurations",
    "access": "public",
    "description": "get current configuration",
    "lineNumber": 801,
    "deprecated": true,
    "since": "v3.0.0",
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "typedef",
    "name": "Statistics",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": true,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer.Statistics",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@global",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bandwidth",
        "description": "in Kbps"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bitrate",
        "description": "in Kbps"
      },
      {
        "nullable": null,
        "types": [
          "TimeRanges"
        ],
        "spread": false,
        "optional": false,
        "name": "buffered",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentTime",
        "description": "in second"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "droppedFrameCount",
        "description": "total frames dropped"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "totalVideoFrames",
        "description": "total frames decoded"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "Infinity"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": "in second"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isAutoSwitch",
        "description": "set to adaptive or not"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "bytesLoaded",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bytesLoaded.cdnName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bytesLoaded.bytes",
        "description": "in byte"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "muted",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "playbackRate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "readyState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "State"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "current state of player"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "switchHistory",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "switchHistory.from",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "switchHistory.to",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "switchHistory.fromAdaptation",
        "description": "true - auto, false - manual"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "switchHistory.timestamp",
        "description": "in second"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "switchInfo",
        "description": "i.e. 'Auto: [...] -> [800]'"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "videoHeight",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "videoWidth",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "volume",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number ",
          " NaN"
        ],
        "spread": false,
        "optional": false,
        "name": "livePointOffest",
        "description": "offset to live point from current position, NaN for VOD"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Statistics"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getStats",
    "access": "public",
    "description": "Return statistics of playback",
    "lineNumber": 839,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Statistics}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Statistics"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "sampleDuration",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#sampleDuration",
    "access": "public",
    "description": "Get/Set current sample duration of current bitrate",
    "lineNumber": 927,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "return 0 when something wrong"
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "name": "currentTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#currentTime",
    "access": "public",
    "description": "Get/Set current time of video element",
    "lineNumber": 938,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "set",
    "name": "currentTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 944,
    "undocument": true
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "normalizeCurrentTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#normalizeCurrentTime",
    "access": "public",
    "description": null,
    "lineNumber": 959,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "getNormalizeCurrentTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#getNormalizeCurrentTime",
    "access": "public",
    "description": null,
    "lineNumber": 967,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "get",
    "name": "duration",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#duration",
    "access": "public",
    "description": "Get duration of video element",
    "lineNumber": 983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} In seconds, or NaN when not open, or Infinity when live"
      },
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "In seconds, or NaN when not open, or Infinity when live"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "get",
    "name": "streamType",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#streamType",
    "access": "public",
    "description": "Get stream type",
    "lineNumber": 995,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AdaptivePlayer.StreamType}"
      },
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AdaptivePlayer.StreamType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "get",
    "name": "playerType",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#playerType",
    "access": "public",
    "description": "Get type of player",
    "lineNumber": 1007,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "AdaptivePlayer.PlayerType"
      },
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "AdaptivePlayer.PlayerType"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "get",
    "name": "buffered",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#buffered",
    "access": "public",
    "description": "Get buffered info of video element",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered"
    ],
    "lineNumber": 1019,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "name": "muted",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#muted",
    "access": "public",
    "description": "Get/Set mute of video element",
    "examples": [
      "player.muted = true;"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted"
    ],
    "lineNumber": 1029,
    "unknown": [
      {
        "tagName": "@params",
        "tagValue": "{boolean} value"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "set",
    "name": "muted",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#muted",
    "access": "public",
    "description": null,
    "lineNumber": 1032,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "volume",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#volume",
    "access": "public",
    "description": "Get/Set volume of video element",
    "examples": [
      "// 1.0 is highest volume (100%. This is default)\n// 0.5 is half volume (50%)\n// 0.0 is silent (same as mute)\nplayer.volume = 1.0;"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume"
    ],
    "lineNumber": 1046,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "set",
    "name": "volume",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#volume",
    "access": "public",
    "description": null,
    "lineNumber": 1049,
    "undocument": true
  },
  {
    "__docId__": 146,
    "kind": "get",
    "name": "src",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#src",
    "access": "public",
    "description": "Get/set source of video element",
    "examples": [
      "player.src = 'https://sample.com/test.m3u8'"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src"
    ],
    "lineNumber": 1061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "set",
    "name": "src",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#src",
    "access": "public",
    "description": null,
    "lineNumber": 1064,
    "undocument": true
  },
  {
    "__docId__": 148,
    "kind": "get",
    "name": "playbackRate",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#playbackRate",
    "access": "public",
    "description": "Get/Set playbackRate of video element",
    "examples": [
      "1.0 is normal speed\n0.5 is half speed (slower)\n2.0 is double speed (faster)"
    ],
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate"
    ],
    "lineNumber": 1078,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "set",
    "name": "playbackRate",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#playbackRate",
    "access": "public",
    "description": null,
    "lineNumber": 1081,
    "undocument": true
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "readyState",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#readyState",
    "access": "public",
    "description": "Indicates the readiness state of the media.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState"
    ],
    "lineNumber": 1092,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "clearWrongCues",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#clearWrongCues",
    "access": "public",
    "description": "Work-around to clear wrong cues of all text tracks during slate",
    "lineNumber": 1099,
    "params": [],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_createPlayer",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_createPlayer",
    "access": "private",
    "description": null,
    "lineNumber": 1131,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "_onTimeUpdate",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onTimeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 1148,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_onRateChange",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onRateChange",
    "access": "private",
    "description": null,
    "lineNumber": 1193,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "_onProgress",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onProgress",
    "access": "private",
    "description": null,
    "lineNumber": 1222,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_onResize",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onResize",
    "access": "private",
    "description": null,
    "lineNumber": 1233,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_onVolumeChange",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onVolumeChange",
    "access": "private",
    "description": null,
    "lineNumber": 1243,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "_onTextTracksChanged",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onTextTracksChanged",
    "access": "private",
    "description": null,
    "lineNumber": 1254,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "_onEnded",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onEnded",
    "access": "private",
    "description": null,
    "lineNumber": 1263,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_onVideoEvent",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onVideoEvent",
    "access": "private",
    "description": null,
    "lineNumber": 1268,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_endLoadTime",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_endLoadTime",
    "access": "private",
    "description": null,
    "lineNumber": 1290,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "_onVideoError",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onVideoError",
    "access": "private",
    "description": null,
    "lineNumber": 1374,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "_onAdvertisement",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onAdvertisement",
    "access": "private",
    "description": null,
    "lineNumber": 1455,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "_onEmptyAdvertisement",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onEmptyAdvertisement",
    "access": "private",
    "description": null,
    "lineNumber": 1482,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "_onAdRangesUpdate",
    "memberof": "src/AdaptivePlayer.js~AdaptivePlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/AdaptivePlayer.js~AdaptivePlayer#_onAdRangesUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 1500,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/config.js",
    "content": "import { LogUtil } from './Utils/Log';\n\nlet Settings = {\n  BASE_CONFIG: {\n    /**\n     * set withCredentials true even config.withCredentials set to false\n     */\n    withCredentialsFragmentPattern: [\n      '/nlds/', // neulion live\n      '/nldsu/',\n      '/nlds_vod/', // neulion vod\n      '/nldsu_vod/'\n    ],\n    /**\n     * streaming parameters for DASH\n     */\n    streaming: {\n      neulionGapDealing: true,\n      safeEdgeEndSize: 0.10,\n      safeEdgeBeginSize: 0.02,\n      ignoreTextStreamFailures: true,\n      jumpLargeGaps: true\n    },\n    /**\n     * Preferred audio lauguage, 2*3ALPHA, default not set\n     * @see https://tools.ietf.org/html/rfc5646\n     */\n    preferredAudioLanguage: '',\n    /**\n     * Preferred text lauguage, 2*3ALPHA, default not set\n     * @see https://tools.ietf.org/html/rfc5646\n     */\n    preferredTextLanguage: '', \n    /**\n     * Enable to use external m3u8 parse\n     */    \n    useExternalM3U8Parser: true,\n    /**\n     * Enable to append \"x-play=[UUID]\" for stitching\n     */     \n    appendXPLAYForStitching: false,\n    /**\n     * Enable lte mode\n     */     \n    enableLTEmode: false,\n    /**\n     * Enable to extract DASH CC from video segments, more CPU load involved\n     */  \n    dashCC: true,\n    /**\n     * Setttings of closed captions, including display name and language(2*3ALPHA)\n     */  \n    closedCaption: {\n      label: 'English(CC)',\n      language: 'en'\n    },\n    /**\n     * Gap tolerance of  DASH\n     */      \n    debugConfig: {\n      gapTolerance: {\n        firefox: 0.02,\n        ie: 0.02,\n        edge: 0.02,\n        chrome: 0.03,\n        safari: 0.1,\n        others: 0.02\n      }\n    }\n  },\n  /**\n   * Start offset to trigger playback\n   */     \n  SMALL_GAP_TO_START: 0.01,\n  DEFAULT_LOG_LEVEL: LogUtil.LogLevel.DEBUG,\n  /**\n   * Disable right click on video element by default\n   */\n  DISABLE_CONTEXT_MENU: true,\n  /**\n   * parameters of debug panel\n   */  \n  DEBUG_PANEL: {\n    REFRESH_INTERVAL: 1000, // every 1 seconds\n    ACTIVATE_AREA: 1 / 8, // left-up 1/5\n    DATA_BUFFER_SIZE: 300 * 1000, // 5 minutes\n    HOTKEYS: { ctrl: false, alt: true, shift: false } // alt + double click\n  },\n  /**\n   * parameters of webrtc player\n   */  \n  WEBRTCPLAYER: {\n    DEFAULT_ICE_SERVERS: [\n      {\n        urls: [\n          'stun:stun.l.google.com:19302',\n          'stun:stun1.l.google.com:19302'\n        ]\n      }\n    ],\n    WS_NORMAL_CLOSE: 3001\n  },\n  /**\n   * parameters of basic player\n   */ \n  BASICPLAYER: {\n    USE_EXTERNAL_M3U8_PARSER: true\n  },\n  /**\n   * parameters of DASH player\n   */ \n  DASHPLAYER: {\n    DEFAULT_SUBTITLE_TRACK_NAME: 'Shaka Player TextTrack',\n    SEGMENT_URI_ARRAY_LENGTH: 20\n  },\n  /**\n   * for debug purpose, enable log per components\n   * show all logs of component set true\n   */\n  LOG_HIGHLIGHTED: {\n    // managers\n    // 'MultiViewsManager': true,\n    // 'DebugPanel': false,\n    // 'StateManager': false,\n    // 'StatisticManager': false,\n    // 'CuepointManager': false,\n    // players\n    // 'DashPlayer': false,\n    // 'HlsPlayer': false,\n    // 'BasicPlayer': false,\n    // 'WebRTCPlayer': false\n  }\n}\n\nexport {\n  Settings\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "Settings",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~Settings",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/config.js",
    "importStyle": "{Settings}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"BASE_CONFIG\": *, \"SMALL_GAP_TO_START\": number, \"DEFAULT_LOG_LEVEL\": *, \"DISABLE_CONTEXT_MENU\": boolean, \"DEBUG_PANEL\": *, \"WEBRTCPLAYER\": *, \"BASICPLAYER\": *, \"DASHPLAYER\": *, \"LOG_HIGHLIGHTED\": *}"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/Manager/CuepointManager.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer';\nimport { ID3 } from '../Media/ID3'\nimport { FakeEvent } from '../Utils/FakeEvent'\nimport { Logger } from '../Utils/Logger';\n\nexport class CuepointManager extends Logger {\n  constructor(eventHandler) {\n    super(eventHandler._logger);\n\n    this._eventHandler = eventHandler;\n\n    this._cuepoints = [];\n    this._cuepoints_bak = []; // backup of cuepoints\n  }\n\n  dispatch(pts, cue) {\n    this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.ID3Event, { start: pts, end: pts, value: cue }));\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'CuePointManager', 'CuePoint Triggered: ' + pts);\n\n    if (cue && cue.dict && cue.dict.cueType && (cue.dict.cueType === 'start' || cue.dict.cueType === 'keep')) {\n      // clear wrong cues\n      this._eventHandler.clearWrongCues();\n    }\n  }\n\n  cleanup() {\n    this._cuepoints.splice(0, this._cuepoints.length);\n    this._cuepoints_bak.splice(0, this._cuepoints_bak.length);\n  }\n\n  clearID3() {\n    // restore cuepoints with backup after seek\n    this._cuepoints.splice(0, this._cuepoints.length);\n    this._cuepoints = this._cuepoints_bak.slice();\n  }\n\n  onTimeUpdate(event) {\n    // process cuepoints\n    this._cuepoints.sort(function (a, b) {\n      return a.pts - b.pts;\n    });\n    for (let index = 0; index < this._cuepoints.length; index++) {\n      let sample = this._cuepoints[index];\n      if (sample.pts <= event.currentTime && sample.pts >= event.currentTime - 1) {\n        let cue = {\n          key: sample.dict['key'],\n          dict: sample.dict\n        };\n\n        // remove it\n        this._cuepoints.splice(index, 1);\n        index--;\n\n        // should send event after remove\n        this.dispatch(sample.pts, cue);\n      } else if (sample.pts > event.currentTime) {\n        break;\n      }\n    }\n  }\n\n  onID3(sample) {\n    if (!sample || !(sample.data || sample.unit) || isNaN(sample.pts)) {\n      this.print(AdaptivePlayer.LogLevel.WARNING, 'CuePointManager', 'onID3: Wrong ID3 data');\n      return;\n    }\n\n    // remove item with same pts\n    if (this._cuepoints.some(function (item) {\n      return item.pts === sample.pts && item.type === CuepointManager.CUE_TYPE.ID3.value; \n    })) {\n      this.print(AdaptivePlayer.LogLevel.WARNING, 'CuePointManager', 'onID3: ID3 with sample pts already exists: ' + sample.pts);\n      return;\n    }\n\n    let data = sample.unit || sample.data;\n    let id3 = new ID3(data);\n\n    sample.dict = {};\n    let id3Dict = id3.dict();\n    for (let keyIndex in id3Dict) {\n      sample.dict[keyIndex] = id3Dict[keyIndex];\n    }\n\n    sample.type = CuepointManager.CUE_TYPE.ID3.value;\n    if (typeof sample.dict.type !== 'undefined') {\n      sample.dict['tag'] = sample.dict['type'];\n    }\n    sample.dict['type'] = CuepointManager.CUE_TYPE.ID3.name;\n    this._cuepoints.push(sample);\n    this._cuepoints_bak.push(sample);\n    // sort by time\n    this._cuepoints.sort(function (a, b) {\n      return a.pts - b.pts;\n    });\n    this._cuepoints_bak.sort(function (a, b) {\n      return a.pts - b.pts;\n    });\n  }\n\n  onNativeID3(cue) {\n    try {\n      let cueData = {\n        raw: cue.value || cue.data,\n        key: cue.value.key,\n        dict: cue.value['data']['ad-list'] ? cue.value['data']['ad-list'][0] : cue.value\n      };\n      cueData.dict['type'] = CuepointManager.CUE_TYPE.ID3.name;\n      if (cueData.dict.data) {\n        cueData.dict['value'] = cueData.dict.data;\n        if (!cueData.dict.info) {\n          cueData.dict.info = cueData.dict.data;\n        }\n      }\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'CuePointManager', 'Native ID3 got: ' + cue.startTime);\n      this.dispatch(cue.startTime, cueData);\n    } catch (e) {\n      this.print(AdaptivePlayer.LogLevel.WARNING, 'CuePointManager', 'Native ID3 got, but no adlist value');\n    }\n  }\n\n  addCuepoints(cues) {\n    cues.forEach(function (element) {\n      if (!element || !(element.dict) || !(element.time)) {\n        return;\n      }\n      element.pts = element.time;\n      element.data = {};\n      element.type = CuepointManager.CUE_TYPE.CUE_POINT.value;\n      element.dict['type'] = CuepointManager.CUE_TYPE.CUE_POINT.name;\n      this._cuepoints.push(element);\n      this._cuepoints_bak.push(element);\n    }, this);\n\n    // sort by time\n    this._cuepoints.sort(function (a, b) { return a.pts - b.pts; });\n    this._cuepoints_bak.sort(function (a, b) { return a.pts - b.pts; });\n\n    return true;\n  }\n\n  removeCuepoint(time, name) {\n    let ret = false;\n    if (!(time) || !(name)) {\n      return ret;\n    }\n    [this._cuepoints, this._cuepoints_bak].forEach(function (array) {\n      for (let i = 0; i < array.length; i++) {\n        let sample = array[i];\n        if (sample && sample.type === CuepointManager.CUE_TYPE.CUE_POINT.value && \n          (sample.pts && sample.pts === time) && \n          (sample.dict && sample.dict.name && sample.dict.name === name)) {\n          array.splice(i, 1);\n          i--;\n          ret = true;\n        }\n      }\n    });\n    return ret;\n  }\n\n  getCuepoints() {\n    let ret = [];\n    for (let i = 0; i < this._cuepoints_bak.length; i++) {\n      let sample = this._cuepoints_bak[i];\n      if (sample && sample.type === CuepointManager.CUE_TYPE.CUE_POINT.value) {\n        ret.push(sample);\n      }\n    }\n    return ret;\n  }\n\n  removeAllCuepoints() {\n    [this._cuepoints, this._cuepoints_bak].forEach(function (array) {\n      for (let i = 0; i < array.length; i++) {\n        let sample = array[i];\n        if (sample && sample.type === CuepointManager.CUE_TYPE.CUE_POINT.value) {\n          array.splice(i, 1);\n          i--;\n        }\n      }\n    });\n  }\n}\n\nCuepointManager.CUE_TYPE = {\n  ID3: { value: 1, name: 'id3' },\n  CUE_POINT: { value: 2, name: 'cuepoint' }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/CuepointManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "CuepointManager",
    "memberof": "src/Manager/CuepointManager.js",
    "static": true,
    "longname": "src/Manager/CuepointManager.js~CuepointManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/CuepointManager.js",
    "importStyle": "{CuepointManager}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "_eventHandler",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#_eventHandler",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "_cuepoints",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#_cuepoints",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "_cuepoints_bak",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#_cuepoints_bak",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "dispatch",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#dispatch",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "pts",
        "types": [
          "*"
        ]
      },
      {
        "name": "cue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "cleanup",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#cleanup",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "clearID3",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#clearID3",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "onTimeUpdate",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#onTimeUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "onID3",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#onID3",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "sample",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "onNativeID3",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#onNativeID3",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "cue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "addCuepoints",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#addCuepoints",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "cues",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "removeCuepoint",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#removeCuepoint",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "getCuepoints",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#getCuepoints",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "removeAllCuepoints",
    "memberof": "src/Manager/CuepointManager.js~CuepointManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/CuepointManager.js~CuepointManager#removeAllCuepoints",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/Manager/DebugPanel.js",
    "content": "import Clipboard from '../../externals/clipboard/clipboard.min'\nimport Dygraph from '../../externals/dygraphs/dygraph.min'\n\nimport * as StringUtil from '../Utils/String'\nimport { AdaptivePlayer } from '../AdaptivePlayer';\nimport { Settings } from '../config';\nimport { Logger } from '../Utils/Logger';\n\nlet DebugPanelInformCaptions = ['Version', 'Url', 'Control', 'State', 'HttpServer', 'Download',\n  'Switch', 'Buffer', 'Frames', 'VideoPlayer', 'Time', 'Event', 'Ad'];\nlet DebugPanelButtonCaptions = [{ S1: 'CpUrl', S2: 'CpUrl' },\n{ S1: 'Copy', S2: 'Copy' },\n{ S1: 'Chart', S2: 'Text' },\n{ S1: 'Close', S2: 'Close' }];\n\nfunction getPanelInformColumnId(type, name, row, hashId) {\n  return 'panel_inform_column_' + type + '_' + name + '_row_' + row + '_' + hashId;\n}\n\nfunction PanelInformColumn(name, row, node, hashId, style) {\n  node.innerHTML = (row === 'I') ? (name + ':    ') : '';\n  node.id = getPanelInformColumnId('caption', name, row, hashId);\n  node.style.cssText = style;\n}\n\nfunction PanelInformTable(tableNode, hashId, style, styleData) {\n  let trNode;\n  let tdNode;\n  tableNode.deleteTHead();\n  for (let i = 0; i < DebugPanelInformCaptions.length; i++) {\n    trNode = tableNode.insertRow();\n    tdNode = trNode.insertCell();\n    PanelInformColumn(DebugPanelInformCaptions[i], 'I', tdNode, hashId, style);\n    tdNode = trNode.insertCell();\n    PanelInformColumn(DebugPanelInformCaptions[i], 'II', tdNode, hashId, styleData);\n  }\n}\n\nfunction DebugPanelButtons(parentNode, dealing, hashId, style) {\n  for (let i = 0; i < DebugPanelButtonCaptions.length; i++) {\n    let button = document.createElement('BUTTON');\n    button.id = getPanelInformColumnId('button', DebugPanelButtonCaptions[i].S1, 'div_buttons', hashId);\n    button.class = 'debugcopybtns';\n    button.innerHTML = DebugPanelButtonCaptions[i].S1;\n    button.addEventListener('click', dealing, false);\n    button.style.cssText = style;\n    parentNode.appendChild(button);\n  }\n}\n\nexport class DebugPanel extends Logger {\n  constructor(player, refreshInterval) {\n    super(player._logger);\n\n    this._video = player._video;\n    this._player = player;\n\n    let browsername = AdaptivePlayer.browserType.toLowerCase();\n    this._isFirefox = (browsername.search('firefox') !== -1);\n    this._isMacOS = (AdaptivePlayer.OS.name === 'Mac OS');\n\n    this._clipboardCopy = null;\n    this._clipboardCpUrl = null;\n    this._clipboardText = null;\n    this._hashId = this._uniqueid();\n\n    if (!refreshInterval || refreshInterval <= 0) {\n      this._refreshInterval = Settings.DEBUG_PANEL.REFRESH_INTERVAL;\n    } else {\n      this._refreshInterval = refreshInterval;\n    }\n\n    this._panel = {\n      container: this._video.parentNode,\n      div_root: null,\n      div_informs: null,\n      table_informs: null,\n      canvas_chart: null,\n      canvas_chartCxt: null,\n      div_buttons: null,\n      div_buttons_button: null,\n      buttonsId: []\n    };\n    this._panelStyle = {\n      div_root_hidden: 'display:block; position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; visibility: hidden; overflow: hidden; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;',\n      div_root_show: 'z-index: 99;display: block;position: absolute;top: 0px;left: 0px;width: 100%;height: 220px;visibility: visible;overflow: hidden;box-sizing: border-box;background: black;opacity: 0.8;',\n      div_informs: 'display:block; position: absolute; left: 65px; width: 90%; overflow: hidden;',\n      table_informs: 'display:block; position: absolute; width: 100%; height: 100%; overflow: hidden;', // table-layout:auto;\n      table_informs_colomns: 'font: bold 12px arial,serif; vertical-align: text-top; overflow: hidden; white-space:nowrap; text-overflow:ellipsis; word-break:keep-all; color: #FFFFFF;', // color: #003E3E; background-color: #d3d3d3; opacity:0.8;\n      table_informs_colomns_data: 'font: bold 12px arial,serif; vertical-align: text-top; overflow: hidden; white-space:nowrap; text-overflow:ellipsis; word-break:keep-all; color: #FFFFFF; position: absolute;', // color: #003E3E; background-color: #d3d3d3; opacity:0.8;\n      canvas_chart: 'display:none; position: absolute; left: 55px; width: 90px; overflow: hidden;',\n      div_buttons: 'display:block; position: absolute; width: 60px;',\n      div_buttons_button: 'font: bold 12px arial,serif; width: 100%; color: #FFFFFF; background-color: #FF0000; padding: 0px; opacity:0.8;',\n      chartCSS: '.dygraph-axis-label {z-index: 10;line-height: normal;overflow: hidden;color: white;font: bold 12px arial,serif;} .dygraph-legend {position: absolute;font-size: 12px;line-height: normal;text-align: left;overflow: hidden;color: white;font: bold 12px arial,serif;}'\n    };\n\n    this._init = false;\n    this._showPanel = null;\n\n    this._downloadDataset = [];\n    this._bufferSize = Settings.DEBUG_PANEL.DATA_BUFFER_SIZE; // keep download info in 2 minutes\n    this.ACTIVATE_AREA = Settings.DEBUG_PANEL.ACTIVATE_AREA;\n    this._seekRange = { start: 0, end: 0 };\n\n    this._player.addEventListener(AdaptivePlayer.EventType.ID3Event, this._onID3.bind(this));\n    this._player.addEventListener(AdaptivePlayer.EventType.AdEvent, this._onAds.bind(this));\n    this._player.addEventListener(AdaptivePlayer.EventType.SeekRangeChange, this._onSeekRangeChanged.bind(this));\n    this._player.addEventListener(AdaptivePlayer.EventType.PlayStart, this._onPlayStart.bind(this));\n    this._player.addEventListener(AdaptivePlayer.EventType.PlayEnd, this.reset.bind(this));\n\n    this.init();\n  }\n\n  destroy() {\n    this.stopDebug();\n\n    this._video = null;\n    this._player = null;\n    this._panel && this._panel.container.removeChild(this._panel.div_root);\n    this._panel = null;\n    this._init = false;\n    this._browserType = null;\n    this._clipboardCopy = null;\n    this._clipboardCpUrl = null;\n    this._clipboardText = null;\n    this._hashId = null;\n  }\n\n  clipboaddCB() {\n    return this._clipboardText;\n  }\n\n  init() {\n    if (this._init === false) {\n      this.initHtmlElement_();\n\n      for (let i = 0; i < DebugPanelButtonCaptions.length; i++) {\n        let id = getPanelInformColumnId('button', DebugPanelButtonCaptions[i].S1, 'div_buttons', this._hashId);\n        this._panel.buttonsId.push(id);\n      }\n      let cpUrlElement = document.getElementById(this._panel.buttonsId[0]);\n      if (cpUrlElement) {\n        this._clipboardCpUrl = new Clipboard(cpUrlElement, {\n          text: this.clipboaddCB.bind(this)\n        });\n      }\n      let copyElement = document.getElementById(this._panel.buttonsId[1]);\n      if (copyElement) {\n        this._clipboardCopy = new Clipboard(copyElement, {\n          text: this.clipboaddCB.bind(this)\n        });\n      }\n      let chartElement = document.getElementById(this._panel.buttonsId[2]);\n      if (chartElement) {\n        // chartElement.setAttribute('style', 'display: none;');\n      }\n      this._init = true;\n    }\n  }\n\n  initHtmlElement_() {\n    // let videoParam = this._video.getBoundingClientRect();\n    this._panel.div_root = document.createElement('div');\n    this._panel.div_root.id = 'debug_panel_id_' + this._hashId;\n\n    this._panel.div_root.style.cssText = this._panelStyle.div_root_hidden;\n    this._panel.container.appendChild(this._panel.div_root);\n\n    this._panel.div_buttons = document.createElement('div');\n    this._panel.div_buttons.style.cssText = this._panelStyle.div_buttons;\n    this._panel.div_buttons_button = DebugPanelButtons(this._panel.div_buttons, this.buttonClick_.bind(this), this._hashId, this._panelStyle.div_buttons_button);\n    this._panel.div_root.appendChild(this._panel.div_buttons);\n\n    this._panel.div_informs = document.createElement('div');\n    this._panel.div_informs.style.cssText = this._panelStyle.div_informs;\n    this._panel.div_root.appendChild(this._panel.div_informs);\n\n    this._panel.table_informs = document.createElement('table');\n    this._panel.table_informs.id = getPanelInformColumnId('table', 'table_informs', 'I', this._hashId);\n    PanelInformTable(this._panel.table_informs, this._hashId, this._panelStyle.table_informs_colomns, this._panelStyle.table_informs_colomns_data);\n    this._panel.div_informs.appendChild(this._panel.table_informs);\n\n    this._panel.canvas_chart = document.createElement('div');\n    this._panel.canvas_chart.id = getPanelInformColumnId('canvas', 'chart', 'I', this._hashId);\n    this._panel.canvas_chart.style.cssText = this._panelStyle.canvas_chart;\n    this._panel.div_root.appendChild(this._panel.canvas_chart);\n\n    let sheet = document.createElement('style')\n    sheet.innerHTML = this._panelStyle.chartCSS;\n    document.body.appendChild(sheet);\n\n    this._video.addEventListener('dblclick', this.doubleClick_.bind(this), false);\n  }\n\n  startDebug() {\n    if (this._showPanel === null) {\n      this._panel.div_root.style.cssText = this._panelStyle.div_root_show;\n      // if (this._panelStyle.videoPosition) {\n      //   this._panel.div_root.style.cssText += this._panelStyle.videoPosition;\n      // }\n      this._refreshPanelInfo();\n      this._showPanel = setInterval(this._refreshPanelInfo.bind(this), this._refreshInterval);\n    }\n  }\n\n  reset() {\n    this._downloadDataset = [];\n    this._loadTime = 0;\n\n    this.updateInfo('Control', '');\n    this.updateInfo('Url', '');\n    this.updateInfo('State', '');\n    this.updateInfo('HttpServer', '');\n    this.updateInfo('Download', '');\n    this.updateInfo('Switch', '');\n    this.updateInfo('Buffer', '');\n    this.updateInfo('Frames', '');\n    this.updateInfo('VideoPlayer', '');\n    this.updateInfo('Time', '');\n    this.updateInfo('Event', '');\n    this.updateInfo('Ad', '');\n  }\n\n  _onPlayStart(event) {\n    this.reset();\n\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', '_onPlayStart');\n    if (event.loadTime) {\n      this._loadTime = event.loadTime;\n    }\n  }\n\n  stopDebug() {\n    this.reset();\n    clearTimeout(this._showPanel);\n    this._showPanel = null;\n  }\n\n  start() {\n    this.resizeUI_();\n    this.startDebug();\n  }\n\n  doubleClick_(e) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', 'dclick event');\n    if ((!Settings.DEBUG_PANEL.HOTKEYS.alt || (Settings.DEBUG_PANEL.HOTKEYS.alt && e.altKey)) && \n      (!Settings.DEBUG_PANEL.HOTKEYS.shift || (Settings.DEBUG_PANEL.HOTKEYS.shift && e.shiftKey)) && \n      (!Settings.DEBUG_PANEL.HOTKEYS.ctrl || ((e.ctrlKey && !this._isMacOS) || this._isMacOS))) {\n      let videoWidth = this._video.clientWidth;\n      let videoHeight = this._video.clientHeight;\n      if ((e.offsetX <= videoWidth * this.ACTIVATE_AREA) && (e.offsetY <= videoHeight * this.ACTIVATE_AREA)) {\n        // this.print(AdaptivePlayer.LogLevel.DEBUG, 'DebugPanel', 'effect dclick event');\n        this.start();\n      }\n    }\n  }\n\n  buttonClick_(e) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', 'click event');\n    let elem;\n    if (this._isFirefox) {\n      if (e.originalTarget && e.originalTarget.id) {\n        elem = document.getElementById(e.originalTarget.id);\n      }\n    } else {\n      if (e.srcElement && e.srcElement.id) {\n        elem = document.getElementById(e.srcElement.id);\n      }\n    }\n    if (elem) {\n      if (elem.innerHTML === 'CpUrl') {\n        let id = getPanelInformColumnId('caption', 'Url', 'II', this._hashId);\n        let valueElem = document.getElementById(id);\n        this._clipboardText = valueElem.innerHTML;\n      } else if (elem.innerHTML === 'Copy') {\n        this._clipboardText = this._panel.table_informs.innerText;\n      } else if (elem.innerHTML === 'Chart') {\n        this.drawText_();\n        elem.innerHTML = 'Text';\n      } else if (elem.innerHTML === 'Text') {\n        this.drawChart_();\n        elem.innerHTML = 'Chart'\n      } else if (elem.innerHTML === 'Close') {\n        this.close_();\n      }\n    }\n  }\n\n  updateInfo(name, value) {\n    let id = getPanelInformColumnId('caption', name, 'II', this._hashId);\n    let infoItem = document.getElementById(id);\n    if (infoItem) {\n      infoItem.innerHTML = value;\n    }\n  }\n\n  drawChart_() {\n    this._panel.canvas_chart.style.display = 'none';\n    this._panel.div_informs.style.display = 'block';\n    this._panel.div_informs.style.width = (this._video.clientWidth - 65) + 'px';\n  }\n\n  drawText_() {\n    this._panel.canvas_chart.style.display = 'block';\n    this._panel.canvas_chart.style.height = this._panel.div_informs.clientHeight + 'px';\n    this._panel.canvas_chart.style.width = (this._video.clientWidth - 65) + 'px';\n\n    this._panel.div_informs.style.display = 'none';\n  }\n\n  close_() {\n    this._panel.div_root.style.display = 'none';\n    this.stopDebug();\n  }\n\n  resizeUI_(fullScreen) {\n    if (this._init) {\n      // fixed\n      // if ((fullScreen === undefined && this._showPanel === null)\n      //     || (fullScreen !== undefined && this._showPanel)) {\n      //   let videoParam = this._video.getBoundingClientRect();\n      //   this._panelStyle.videoPosition = ';top:' + videoParam.top + 'px;left:' + videoParam.left +\n      //       'px;width:' + videoParam.width + 'px;height:' + videoParam.height + 'px;';\n\n      //   this._panel.div_root.style.cssText = this._panelStyle.div_root_show + this._panelStyle.videoPosition;\n      //   this._panel.div_root.style.cssText = this._panelStyle.div_root_show;\n      //   this._panel.div_buttons.style.cssText = this._panelStyle.div_buttons;\n      //   this._panel.div_informs.style.cssText = this._panelStyle.div_informs;\n      // }\n\n      // absolute\n      this._panel.div_root.style.cssText = this._panelStyle.div_root_show;\n      this._panel.div_buttons.style.cssText = this._panelStyle.div_buttons;\n      // this._panel.div_informs.style.cssText = this._panelStyle.div_informs;\n    }\n  }\n\n  isInit() {\n    return this._init;\n  }\n\n  _uniqueid() {\n    // always start with a letter (for DOM friendlyness)\n    let idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n    do {\n      // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n      let ascicode = Math.floor((Math.random() * 42) + 48);\n      if (ascicode < 58 || ascicode > 64) {\n        // exclude all chars between : (58) and @ (64)\n        idstr += String.fromCharCode(ascicode);\n      }\n    } while (idstr.length < 32);\n\n    return (idstr);\n  }\n\n  _refreshPanelInfo() {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', '_refreshPanelInfo');\n    let playerVersion = AdaptivePlayer.version + ' / ' + AdaptivePlayer.coreVersion;\n    this.updateInfo('Version', playerVersion);\n\n    let height = 0;\n    if (this._panel.div_informs.clientHeight > 0) {\n      this._panel.div_informs.style.width = (this._video.clientWidth - 65) + 'px';\n      height = this._panel.div_informs.clientHeight;\n    } else {\n      height = this._panel.canvas_chart.clientHeight;\n      this._panel.canvas_chart.style.width = (this._video.clientWidth - 65) + 'px';\n    }\n    this._panel.div_root.style.height = height + 'px';\n\n    let playerStats = this._player.getStats();\n    if (playerStats.url === '') {\n      return;\n    }\n\n    let url = this._player._url;\n    this.updateInfo('Url', url);\n\n    let control = JSON.stringify(this._player.getConfigure());\n    this.updateInfo('Control', control);\n\n    let state = (this._player.streamType + (this._player.isLive() ? ' Live' : ' VOD'));\n    state += '(' + this._player.playerType + '), ' + this._player.getState();\n    if (this._loadTime > 0) state += ', LoadTime=' + this._loadTime / 1000 + 's';\n    this.updateInfo('State', state);\n\n    let httpServer = '';\n    if (playerStats.bytesLoaded && playerStats.bytesLoaded.length > 0) {\n      for (let i = 0; i < playerStats.bytesLoaded.length; i++) {\n        let byteLoaded = playerStats.bytesLoaded[i];\n        httpServer += ('H' + i + ': ' + byteLoaded.cdnName +\n          ' B: ' + byteLoaded.bandwidthRate + ' P: ' + byteLoaded.priority +\n          ' S: ' + byteLoaded.onlineSpeed + 'Kbps ' + StringUtil.formatBytes(byteLoaded.bytes) + '; ');\n      }\n    }\n    this.updateInfo('HttpServer', httpServer);\n\n    let download = '';\n    if (!isNaN(playerStats.bitrate) && !isNaN(playerStats.bandwidth)) {\n      download = 'bitrate=' + playerStats.bitrate + ' bandwidth=' + playerStats.bandwidth;\n    }\n    this.updateInfo('Download', download);\n\n    this._downloadDataset.push([new Date(), playerStats.bandwidth, playerStats.bitrate]);\n    if (this._downloadDataset.length > (this._bufferSize / this._refreshInterval)) {\n      this._downloadDataset.splice(0, 1);\n    }\n\n    if (this._panel.canvas_chartCxt === null && this._panel.canvas_chart.clientHeight > 0) {\n      this._panel.canvas_chartCxt = new Dygraph(this._panel.canvas_chart, this._downloadDataset, {\n          drawPoints: false,\n          showRoller: false,\n          colors: ['rgb(0,255,255)', 'rgb(255,10,10)'],\n          axisLineColor: 'white',\n          gridLineColor: 'white',\n          legend: 'never',\n          labels: ['Time', 'bandwidth', 'bitrate']\n        });\n    }\n    if (this._panel.canvas_chartCxt !== null) {\n      this._panel.canvas_chartCxt.resize(this._panel.canvas_chart.clientWidth, this._panel.canvas_chart.clientHeight)\n      this._panel.canvas_chartCxt.updateOptions({ 'file': this._downloadDataset });\n    }\n\n    this.updateInfo('Switch', playerStats.switchInfo);\n\n    let buffer = '';\n    if (playerStats.buffered) {\n      for (let i = 0; i < playerStats.buffered.length; i++) {\n        buffer += ('[' + (playerStats.buffered.start(i)).toFixed(2) +\n          ', ' + (playerStats.buffered.end(i)).toFixed(2) + '];');\n      }\n    }\n    if (this._player.isLive() && playerStats.livePointOffest) {\n      buffer += ' liveDelay:' + (playerStats.livePointOffest).toFixed(2);\n    }\n    this.updateInfo('Buffer', buffer);\n\n    let frames = '';\n    frames = 'decoded: ' + playerStats.totalVideoFrames +\n      ' dropped:' + playerStats.droppedFrameCount +\n      ' ratio:' + (playerStats.droppedFrameCount / playerStats.totalVideoFrames).toFixed(2);\n\n    this.updateInfo('Frames', frames);\n\n    let videoPlayer = '';\n\n    videoPlayer += ('player=' + playerStats.videoWidth + 'x' + playerStats.videoHeight);\n    videoPlayer += (' screen=' + this._video.clientWidth + 'x' + this._video.clientHeight);\n    videoPlayer += (' mute: ' + this._video.muted);\n    videoPlayer += (' volume: ' + this._video.volume.toFixed(2));\n    videoPlayer += (' playbackRate: ' + this._video.playbackRate);\n\n    this.updateInfo('VideoPlayer', videoPlayer);\n\n    let time = 'P:';\n    if (this._player.isLive()) {\n      time += StringUtil.toDateString(playerStats.currentTime);\n      time += (' [' + StringUtil.toDateString(this._seekRange.start) + ', ' + StringUtil.toDateString(this._seekRange.end) + ']');\n    } else {\n      time += StringUtil.formatSeconds(playerStats.currentTime);\n      time += (' [0, ' + StringUtil.formatSeconds(playerStats.duration) + ']');\n    }\n    this.updateInfo('Time', time);\n  }\n\n  _onID3(event) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', '_debugPanelEvent');\n    if (event.start && event.value) {\n      let time = this._player.isLive() ? StringUtil.toDateString(event.start) : StringUtil.formatSeconds(event.start);\n      this.updateInfo('Event', (time + ': ' + JSON.stringify(event.value)));\n    }\n  }\n\n  _onAds(event) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', '_debugPanelEvent');\n    let time = this._player.isLive() ? StringUtil.toDateString(event.start) : StringUtil.formatSeconds(event.start);\n    let msg = time + ': ' + JSON.stringify(event.data);\n    this.updateInfo('Ad', msg);\n  }\n\n  _onSeekRangeChanged(event) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'DebugPanel', '_onSeekRangeChanged');\n    if (event.details) {\n      this._seekRange = event.details;\n    }\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/DebugPanel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "DebugPanelInformCaptions",
    "memberof": "src/Manager/DebugPanel.js",
    "static": true,
    "longname": "src/Manager/DebugPanel.js~DebugPanelInformCaptions",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "variable",
    "name": "DebugPanelButtonCaptions",
    "memberof": "src/Manager/DebugPanel.js",
    "static": true,
    "longname": "src/Manager/DebugPanel.js~DebugPanelButtonCaptions",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "getPanelInformColumnId",
    "memberof": "src/Manager/DebugPanel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Manager/DebugPanel.js~getPanelInformColumnId",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "row",
        "types": [
          "*"
        ]
      },
      {
        "name": "hashId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "PanelInformColumn",
    "memberof": "src/Manager/DebugPanel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Manager/DebugPanel.js~PanelInformColumn",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "row",
        "types": [
          "*"
        ]
      },
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "hashId",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "PanelInformTable",
    "memberof": "src/Manager/DebugPanel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Manager/DebugPanel.js~PanelInformTable",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "tableNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "hashId",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      },
      {
        "name": "styleData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "DebugPanelButtons",
    "memberof": "src/Manager/DebugPanel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Manager/DebugPanel.js~DebugPanelButtons",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "dealing",
        "types": [
          "*"
        ]
      },
      {
        "name": "hashId",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "DebugPanel",
    "memberof": "src/Manager/DebugPanel.js",
    "static": true,
    "longname": "src/Manager/DebugPanel.js~DebugPanel",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/DebugPanel.js",
    "importStyle": "{DebugPanel}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_video",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "_player",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_player",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_isFirefox",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_isFirefox",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "_isMacOS",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_isMacOS",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "_clipboardCopy",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_clipboardCopy",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_clipboardCpUrl",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_clipboardCpUrl",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "_clipboardText",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_clipboardText",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_hashId",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_hashId",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_refreshInterval",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_refreshInterval",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_panel",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_panel",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "{\"container\": *, \"div_root\": *, \"div_informs\": *, \"table_informs\": *, \"canvas_chart\": *, \"canvas_chartCxt\": *, \"div_buttons\": *, \"div_buttons_button\": *, \"buttonsId\": *}"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_panelStyle",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_panelStyle",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "{\"div_root_hidden\": string, \"div_root_show\": string, \"div_informs\": string, \"table_informs\": string, \"table_informs_colomns\": string, \"table_informs_colomns_data\": string, \"canvas_chart\": string, \"div_buttons\": string, \"div_buttons_button\": string, \"chartCSS\": string}"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_init",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_init",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "_showPanel",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_showPanel",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "_downloadDataset",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_downloadDataset",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "_bufferSize",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_bufferSize",
    "access": "private",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "ACTIVATE_AREA",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#ACTIVATE_AREA",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "_seekRange",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_seekRange",
    "access": "private",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "{\"start\": *, \"end\": *}"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_browserType",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_browserType",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "clipboaddCB",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#clipboaddCB",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "init",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#init",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "initHtmlElement_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#initHtmlElement_",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "startDebug",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#startDebug",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#reset",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_loadTime",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_loadTime",
    "access": "private",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_onPlayStart",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_onPlayStart",
    "access": "private",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "stopDebug",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#stopDebug",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "start",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#start",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "doubleClick_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#doubleClick_",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "buttonClick_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#buttonClick_",
    "access": "public",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "updateInfo",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#updateInfo",
    "access": "public",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "drawChart_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#drawChart_",
    "access": "public",
    "description": null,
    "lineNumber": 297,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "drawText_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#drawText_",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "close_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#close_",
    "access": "public",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "resizeUI_",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#resizeUI_",
    "access": "public",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [
      {
        "name": "fullScreen",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "isInit",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#isInit",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "_uniqueid",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_uniqueid",
    "access": "private",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_refreshPanelInfo",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_refreshPanelInfo",
    "access": "private",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "_onID3",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_onID3",
    "access": "private",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "_onAds",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_onAds",
    "access": "private",
    "description": null,
    "lineNumber": 476,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "_onSeekRangeChanged",
    "memberof": "src/Manager/DebugPanel.js~DebugPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/DebugPanel.js~DebugPanel#_onSeekRangeChanged",
    "access": "private",
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/Manager/EventManager.js",
    "content": "import { MultiMap } from '../Utils/MultiMap';\n\n/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * class EventManager\n */\nexport class EventManager {\n  constructor() {\n    /**\n     * Maps an event type to an array of event bindings.\n     * @private {shaka.util.MultiMap.<!shaka.util.EventManager.Binding_>}\n     */\n    this.bindingMap_ = new MultiMap();\n  }\n\n  /**\n   * Detaches all event listeners.\n   * @override\n   */\n  destroy() {\n    this.removeAll();\n    this.bindingMap_ = null;\n    return Promise.resolve();\n  }\n\n  /**\n   * Attaches an event listener to an event target.\n   * @param {EventTarget} target The event target.\n   * @param {string} type The event type.\n   * @param {shaka.util.EventManager.ListenerType} listener The event listener.\n   */\n  listen(target, type, listener) {\n    let binding = new Binding_(target, type, listener);\n    try {\n      this.bindingMap_.push(type, binding);\n    } catch (e) {\n      // console.info(e);//\n    }\n  }\n\n  /**\n   * Detaches an event listener from an event target.\n   * @param {EventTarget} target The event target.\n   * @param {string} type The event type.\n   */\n  unlisten(target, type) {\n    if (this.bindingMap_ === null || this.bindingMap_.length === 0) {\n      return;\n    }\n    let list = this.bindingMap_.get(type) || [];\n\n    for (let i = 0; i < list.length; ++i) {\n      let binding = list[i];\n\n      if (binding.target === target) {\n        binding.unlisten();\n        this.bindingMap_.remove(type, binding);\n      }\n    }\n  }\n\n  /**\n   * Detaches all event listeners from all targets.\n   */\n  removeAll() {\n    try {\n      let list = this.bindingMap_.getAll();\n\n      for (let i = 0; i < list.length; ++i) {\n        list[i].unlisten();\n      }\n\n      this.bindingMap_.clear();\n    } catch (error) {\n      // console.log('EventManager.prototype.removeAll: error detected')\n    }\n  }\n}\n\nclass Binding_ {\n  constructor(target, type, listener) {\n    /** @type {EventTarget} */\n    this.target = target;\n\n    /** @type {string} */\n    this.type = type;\n\n    /** @type {?shaka.util.EventManager.ListenerType} */\n    this.listener = listener;\n\n    try {\n      this.target.addEventListener(type, listener, false);\n    } catch (e) {\n      // console.info(e);//\n    }\n  }\n\n  /**\n   * Detaches the event listener from the event target. This does nothing if the\n   * event listener is already detached.\n   */\n  unlisten() {\n    if (!this.target) {\n      return;\n    }\n\n    this.target.removeEventListener(this.type, this.listener, false);\n\n    this.target = null;\n    this.listener = null;\n  }\n}\n\n/**\n * Event Type\n * @readonly\n * @enum {string}\n * @static\n * @type EventManager.EventType\n */\nEventManager.EventType = {\n  PlayStart: 'playStart',\n  /** From 3.0.0, triggered both when completed or aborted, need to check event.details.reason */\n  PlayEnd: 'playEnd',\n  Error: 'error',\n  StateChange: 'stateChange',\n  ProfileChange: 'profileChange',\n  VolumeChange: 'volumeChange',\n  TrackChange: 'trackChange',\n  TimeUpdate: 'timeUpdate',\n  Progress: 'progress',\n  RateChange: 'rateChange',\n  /** Trigger only once for CVOD, periodicly for live stream */\n  SeekRangeChange: 'seekRangeChange',\n  /** events from streaming core like Shaka and hls.js */\n  StreamingEvent: 'streaming',\n  /** callback with ID3Message  */\n  ID3Event: 'id3',\n  /** since v2.2.2 */\n  AdEvent: 'advertisement',\n  /** since v3.0.0 */\n  AutoPlayStatus: 'autoplaystatus'\n};\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/EventManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "EventManager",
    "memberof": "src/Manager/EventManager.js",
    "static": true,
    "longname": "src/Manager/EventManager.js~EventManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/EventManager.js",
    "importStyle": "{EventManager}",
    "description": "class EventManager",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 269,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "bindingMap_",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#bindingMap_",
    "access": "private",
    "description": "Maps an event type to an array of event bindings.",
    "lineNumber": 29,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#destroy",
    "access": "public",
    "description": "Detaches all event listeners.",
    "lineNumber": 36,
    "override": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "listen",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#listen",
    "access": "public",
    "description": "Attaches an event listener to an event target.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The event target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type."
      },
      {
        "nullable": null,
        "types": [
          "shaka.util.EventManager.ListenerType"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "The event listener."
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "unlisten",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#unlisten",
    "access": "public",
    "description": "Detaches an event listener from an event target.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The event target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "removeAll",
    "memberof": "src/Manager/EventManager.js~EventManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~EventManager#removeAll",
    "access": "public",
    "description": "Detaches all event listeners from all targets.",
    "lineNumber": 81,
    "params": [],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "class",
    "name": "Binding_",
    "memberof": "src/Manager/EventManager.js",
    "static": true,
    "longname": "src/Manager/EventManager.js~Binding_",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Manager/EventManager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/EventManager.js~Binding_",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~Binding_#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "target",
    "memberof": "src/Manager/EventManager.js~Binding_",
    "static": false,
    "longname": "src/Manager/EventManager.js~Binding_#target",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "EventTarget"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "type",
    "memberof": "src/Manager/EventManager.js~Binding_",
    "static": false,
    "longname": "src/Manager/EventManager.js~Binding_#type",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "listener",
    "memberof": "src/Manager/EventManager.js~Binding_",
    "static": false,
    "longname": "src/Manager/EventManager.js~Binding_#listener",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "type": {
      "nullable": true,
      "types": [
        "shaka.util.EventManager.ListenerType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "unlisten",
    "memberof": "src/Manager/EventManager.js~Binding_",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/EventManager.js~Binding_#unlisten",
    "access": "public",
    "description": "Detaches the event listener from the event target. This does nothing if the\nevent listener is already detached.",
    "lineNumber": 118,
    "params": [],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/Manager/MultiviewsManager.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer';\nimport { Logger } from '../Utils/Logger';\n\nexport class MultiviewsManager extends Logger {\n  constructor(player) {\n    /**\n     * player should have following interface:\n     * currentTime, play(), pause(), stop(), getState. event:StateChange,\n     */\n    super(player._logger);\n\n    this._player = player;\n    this._syncupPlayers = null;\n    this._syncTimer = null;\n    this._resumeTimer = null;\n    \n    this.MIN_TIME_OFFSET = 0.2; // in seconds\n    this.SEEK_RANGE = 3; // in seconds\n    this.SYNC_TIMER_INTERVAL = 200; // in milliseconds\n  }\n\n  _onStateChanged(evt) {\n    this._syncUp(evt.target);\n  }\n\n  _getTimeOffset() {\n    if (!this._syncupPlayers) {\n      return 0;\n    }\n    if (!this._player.src === '') {\n      return 0;\n    }\n\n    let minTime = this._player.currentTime;\n    let maxTime = minTime;\n\n    for (let i = 0; i < this._syncupPlayers.length; i++) {\n      let syncPlayer = this._syncupPlayers[i];\n      if (!syncPlayer.src || syncPlayer.readyState < 2) {\n        continue;\n      }\n      let time = syncPlayer.currentTime;\n      if (time < minTime) {\n        minTime = time;\n      }\n      if (time > maxTime) {\n        maxTime = time;\n      }\n    }\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'sync timeOffset: ' + Math.abs(maxTime - minTime));\n    return Math.abs(maxTime - minTime);\n  }\n\n  _onCheckTimer() {\n    if (!this._syncupPlayers && this._syncTimer) {\n      this._syncTimer = window.clearInterval(this._syncTimer);\n    }\n    this._syncUp(this._player);\n  }\n\n  setSyncViews(array) {\n    if (this._syncupPlayers) {\n      this._syncupPlayers.forEach(function (player) {\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'remove secondary player: ' + player.viewId);\n        player.removeEventListener(AdaptivePlayer.EventType.StateChange, this._onStateChanged.bind(this));\n      }.bind(this));\n      this._player.removeEventListener(AdaptivePlayer.EventType.StateChange, this._onStateChanged.bind(this));\n      clearInterval(this._syncTimer);\n    }\n\n    if (array.length > 0) {\n      this._syncupPlayers = [];\n      let viewId = 0;\n      array.forEach(function (player) {\n        if (player) {\n          player.viewId = 'player' + viewId++;\n          this._syncupPlayers.push(player);\n          // add event\n          player.addEventListener(AdaptivePlayer.EventType.StateChange, this._onStateChanged.bind(this));\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary player: ' + player.viewId + ' added!');\n        }\n      }.bind(this));\n      // reset event listener\n      this._player.addEventListener(AdaptivePlayer.EventType.StateChange, this._onStateChanged.bind(this));\n\n      this._syncTimer = window.setInterval(this._onCheckTimer.bind(this), 'MultiviewManager'.SYNC_TIMER_INTERVAL);\n    }\n  }\n\n  _syncUp() {\n    if (!this._syncupPlayers) {\n      return;\n    }\n    let syncPlayer = this._syncupPlayers.filter(function (item) {\n      return !!item.src && item.readyState > 2;\n    });\n    if (syncPlayer.length <= 0) {\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player not ready');\n      return;\n    }\n\n    // Check all the speed\n    let playbackRate = this._player.playbackRate;\n    this._syncupPlayers.forEach(function (syncPlayer) {\n      if (Math.abs(syncPlayer.playbackRate - playbackRate) > 0.1) {\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'sync secondary playbackRate: ' + syncPlayer.viewId + ' : ' + syncPlayer.playbackRate + '->' + playbackRate);\n        syncPlayer.playbackRate = playbackRate;\n      }\n    }.bind(this));\n\n    // Check and make sure all player are playing\n    let playerState = this._player.getState();\n    if (playerState === AdaptivePlayer.State.BUFFERING || playerState === AdaptivePlayer.State.PLAYING || playerState === AdaptivePlayer.State.PAUSED || playerState === AdaptivePlayer.State.SEEKING) {\n      this._syncupPlayers.forEach(function (syncPlayer) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.IDLE && syncPlayer.src) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'load secondary Player: ' + syncPlayer.viewId);\n          syncPlayer.load();\n        }\n      }.bind(this));\n\n      if (this._player._playerType === AdaptivePlayer.PlayerType.NATIVE) {\n        this._syncNativePlay();\n      } else {\n        this._syncPlay();\n      }\n    }\n\n    // Check and make sure the videoDisplay is stopped\n    if (this._player.getState() === AdaptivePlayer.State.IDLE) {\n      this._syncupPlayers.forEach(function (syncPlayer) {\n        if (syncPlayer.getState() !== AdaptivePlayer.State.IDLE) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'stop secondary Player: ' + syncPlayer.viewId);\n          syncPlayer.stop();\n        }\n      }.bind(this));\n    }\n  }\n\n  _innerSeek(player, targetTime, seekEnd) {\n    if (!player || !player.src) {\n      return;\n    }\n    let onSeeking = function () {\n      player.removeEventListener('seeking', onSeeking);\n      player.addEventListener('seeked', onSeeked);\n    };\n    let onSeeked = function () {\n      player.removeEventListener('seeked', onSeeked);\n      player.addEventListener('timeupdate', onTimeUpdate);\n      window.setTimeout(function () {\n        player.removeEventListener('timeupdate', onTimeUpdate);\n        seekEnd(player.currentTime);\n      }, 500);\n    };\n    let onTimeUpdate = function () {\n      player.removeEventListener('timeupdate', onTimeUpdate);\n      seekEnd(player.currentTime);\n    };\n\n    player.addEventListener('seeking', onSeeking);\n    player.currentTime = targetTime;\n  }\n\n  _syncPlay() {\n    let playheadTime = this._player.currentTime;\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player CurrentTime: ' + playheadTime);\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player State: ' + this._player.getState());\n\n    let syncPlayer = this._syncupPlayers.filter(function (item) {\n      return !!item.src && item.readyState > 2;\n    });\n    if (syncPlayer.length <= 0) {\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player not ready');\n      return;\n    }\n\n    if (this._player.getState() === AdaptivePlayer.State.PAUSED) {\n      this._syncupPlayers.forEach(function (syncPlayer) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.PLAYING || syncPlayer.getState() === AdaptivePlayer.State.BUFFERING) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player Paused : ' + syncPlayer.viewId);\n          syncPlayer.pause();\n        }\n      }.bind(this));\n\n      this._syncupPlayers.forEach(function (syncPlayer) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n          let deltaTime = playheadTime - syncPlayer.currentTime;\n          if (Math.abs(deltaTime) > this.MIN_TIME_OFFSET) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player seek to main Player playheadTime: ' + syncPlayer.viewId + ' : ' + syncPlayer.currentTime + '->' + playheadTime);\n            syncPlayer.currentTime = playheadTime;\n          }\n        }\n      }.bind(this));\n      return;\n    }\n\n    if (this._player.getState() === AdaptivePlayer.State.PLAYING) {\n      let halfOffset = this.MIN_TIME_OFFSET / 2.0;\n      let playbackRate = this._player.playbackRate;\n      if (playbackRate > 0) {\n        halfOffset *= playbackRate;\n      }\n      let timeLeftOfOffset = playheadTime - halfOffset;\n      let timeRightOfOffset = playheadTime + halfOffset;\n\n      let timeSeek = playheadTime + this.SEEK_RANGE; // 4s\n      this._syncupPlayers.forEach(function (syncPlayer) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.SEEKING || syncPlayer.getState() === AdaptivePlayer.State.IDLE) {\n          return;\n        }\n        let time0 = syncPlayer.currentTime;\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player CurrentTime: ' + syncPlayer.viewId + ' : ' + time0 + ',' + timeSeek + ', [' + timeLeftOfOffset + ', ' + timeRightOfOffset + ']');\n        if (time0 < timeLeftOfOffset || time0 > timeSeek) {\n          if (syncPlayer.getState() === AdaptivePlayer.State.PLAYING || syncPlayer.getState() === AdaptivePlayer.State.BUFFERING || syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player Paused ' + syncPlayer.viewId + ':');\n            syncPlayer.pause();\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player seek to main Player playheadTime: ' + syncPlayer.viewId + ' : ' + time0 + '->' + timeSeek);\n            syncPlayer.currentTime = timeSeek;\n          }\n        } else if (time0 > timeRightOfOffset) {\n          if (syncPlayer.getState() === AdaptivePlayer.State.PLAYING) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player Paused' + syncPlayer.viewId + ' :');\n            syncPlayer.pause();\n          }\n        } else if (time0 >= timeLeftOfOffset && time0 <= timeRightOfOffset) {\n          if (syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'made secondary Player Play' + syncPlayer.viewId + ' :');\n            syncPlayer.play();\n          }\n        }\n      }.bind(this));\n\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player State: ' + this._player.getState());\n      this._syncupPlayers.forEach(function (player) {\n        if (!player.src || player.readyState < 2) {\n          return;\n        }\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player State: ' + player.viewId + '/' + player.getState());\n      }.bind(this));\n    }\n  }\n\n  _syncNativePlay() {\n    let syncPlayer = this._syncupPlayers.filter(function (item) {\n      return !!item.src && item.readyState > 2;\n    })[0];\n    if (!syncPlayer) {\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player not ready');\n      return;\n    }\n\n    let playheadTime = this._player.currentTime;\n    let halfOffset = this.MIN_TIME_OFFSET / 2.0;\n    let playbackRate = this._player.playbackRate;\n    if (playbackRate > 0) {\n      halfOffset *= playbackRate;\n    }\n    let timeLeftOfOffset = playheadTime - halfOffset;\n    let timeRightOfOffset = playheadTime + halfOffset;\n    let timeSeek = playheadTime + this.SEEK_RANGE; // 4s\n    let syncPause = false;\n    let inSyncing = false;\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player CurrentTime: ' + playheadTime);\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player State: ' + this._player.getState());\n\n    if (this._player.getState() === AdaptivePlayer.State.PAUSED) {\n      if (syncPlayer.getState() === AdaptivePlayer.State.PLAYING || syncPlayer.getState() === AdaptivePlayer.State.BUFFERING || syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player CurrentTime: ' + syncPlayer.currentTime);\n        let deltaTime = playheadTime - syncPlayer.currentTime;\n        if (Math.abs(deltaTime) > this.MIN_TIME_OFFSET) {\n          if (inSyncing) {\n            return;\n          }\n          this._innerSeek(syncPlayer, timeSeek, function (timeSeekResult) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'inner seek: ' + 'currentTime: ' + syncPlayer.currentTime + ' to: ' + timeSeek + ' accurate: ' + timeSeekResult);\n            if (timeSeekResult >= timeLeftOfOffset) {\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set secondary Player inSyncing true, made secondary player pause');\n              syncPlayer.pause();\n            }\n          }.bind(this));\n          inSyncing = true;\n        } else if (syncPause) {\n          syncPlayer.play();\n          this._player.play();\n          inSyncing = false;\n          syncPause = false;\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set secondary Player inSyncing false, made MainPlayer & SecondarayPlayer play');\n        }\n      }\n      return;\n    }\n\n    if (this._player.getState() === AdaptivePlayer.State.PLAYING) {\n      if (syncPlayer.getState() === AdaptivePlayer.State.SEEKING || syncPlayer.getState() === AdaptivePlayer.State.IDLE) {\n        return;\n      }\n      let time0 = syncPlayer.currentTime;\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player CurrentTime: ' + syncPlayer.viewId + ' : ' + time0);\n      if (time0 < timeLeftOfOffset || time0 > timeSeek) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.PLAYING || syncPlayer.getState() === AdaptivePlayer.State.BUFFERING || syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player currentTime: ' + time0);\n          if (inSyncing) {\n            return;\n          }\n          this._innerSeek(syncPlayer, timeSeek, function (timeSeekResult) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'inner seek: ' + 'currentTime: ' + syncPlayer.currentTime + ' to: ' + timeSeek + ' accurate: ' + timeSeekResult);\n            if (timeSeekResult > timeRightOfOffset) {\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set secondary Player inSyncing true, made secondary player pause');\n              syncPlayer.pause();\n            } else if (timeSeekResult < timeLeftOfOffset) {\n              this._player.pause();\n              syncPause = true;\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set MainPlayer inSyncing true, made MainPlayer pause');\n            } else {\n              inSyncing = false;\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set MainPlayer inSyncing false, seek point is in sync range');\n            }\n          }.bind(this));\n          inSyncing = true;\n        }\n      } else if (time0 >= timeLeftOfOffset && time0 <= timeRightOfOffset) {\n        if (syncPlayer.getState() === AdaptivePlayer.State.PAUSED) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'set secondary Player inSyncing false, made secondary player play');\n          syncPlayer.play();\n        }\n        if (inSyncing) {\n          inSyncing = false;\n        }\n      }\n\n      return;\n    }\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'Main Player State: ' + this._player.getState());\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'MultiviewManager', 'secondary Player State: ' + syncPlayer.getState());\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/MultiviewsManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "MultiviewsManager",
    "memberof": "src/Manager/MultiviewsManager.js",
    "static": true,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/MultiviewsManager.js",
    "importStyle": "{MultiviewsManager}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "_player",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_player",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "_syncupPlayers",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_syncupPlayers",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "_syncTimer",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_syncTimer",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "_resumeTimer",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_resumeTimer",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "MIN_TIME_OFFSET",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#MIN_TIME_OFFSET",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "SEEK_RANGE",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#SEEK_RANGE",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "SYNC_TIMER_INTERVAL",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#SYNC_TIMER_INTERVAL",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "_onStateChanged",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_onStateChanged",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "_getTimeOffset",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_getTimeOffset",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "_onCheckTimer",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_onCheckTimer",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "setSyncViews",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#setSyncViews",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "_syncUp",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_syncUp",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "_innerSeek",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_innerSeek",
    "access": "private",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "seekEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "_syncPlay",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_syncPlay",
    "access": "private",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "_syncNativePlay",
    "memberof": "src/Manager/MultiviewsManager.js~MultiviewsManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/MultiviewsManager.js~MultiviewsManager#_syncNativePlay",
    "access": "private",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "src/Manager/StateManager.js",
    "content": "import { EventManager } from './EventManager';\nimport { Logger } from '../Utils/Logger'\nimport { AdaptivePlayer } from '../AdaptivePlayer';\n\n/**\n * class StateManager\n */\nexport class StateManager extends Logger {\n  constructor(parent, stateChangeCallback) {\n    super(parent._logger);\n\n    this._video = parent._video;\n    this._state = StateManager.State.IDLE;\n    this._playStarted = false;\n    this._inUserSeeking = false;\n    this._inSeeking = false;\n    this._bufferingTime = 0.0;\n    this._startBufferingTime = -1;\n    this._stateCallback = stateChangeCallback;\n\n    this._eventManager = new EventManager();\n  }\n\n  destroy() {\n    // this._clearTimer();\n    this._video = null;\n    this._player = null;\n    this._eventManager && this._eventManager.removeAll();\n  }\n\n  _onLoadStart(event) {\n    // skip MEDIA_ELEMENT_ERROR: Empty src attribute\n    if (this._video.error && this._video.error.code === 4) {\n      return; \n    }\n    this._setState(StateManager.State.BUFFERING, { 'from': 'loadstart' });\n  }\n\n  // TODO:: Need to suppress the update.\n  _onTimeUpdate(event) {\n    if (this._video.playbackRate === 0 || this._inSeeking) {\n      return;\n    }\n    if (this._video.paused) {\n      this._setState(StateManager.State.PAUSED, { 'from': 'timeupdate' });\n    } else {\n      this._setState(StateManager.State.PLAYING, { 'from': 'timeupdate' });\n    }\n  }\n\n  _onCanPlayThrough(event) {\n    if (this._video.paused) {\n      this._setState(StateManager.State.PAUSED, { 'from': 'canplaythrough' });\n    } else {\n      this._setState(StateManager.State.PLAYING, { 'from': 'canplaythrough' });\n    }\n  }\n  _onPlaying(event) {\n    // this._setState(StateManager.State.BUFFERING, {'from': 'playing'});\n  }\n  _onPlay(event) {\n    this._setState(StateManager.State.STARTPLAY, { 'from': 'play' });\n  }\n  _onPause(event) {\n    this._setState(StateManager.State.PAUSED, { 'from': 'paused' });\n  }\n  _onEnded(event) {\n    this.reset({ reason: StateManager.ActionReason.COMPLETE });\n  }\n  _onAbort(event) {\n    // this.reset({ reason: StateManager.ActionReason.ABORT });\n  }\n  _onError(event) {\n    this.reset({ reason: StateManager.ActionReason.ERROR });\n  }\n  _onWaiting(event) {\n    this._setState(StateManager.State.BUFFERING, { 'from': 'waiting' });\n  }\n  _onStalled(event) {\n    this._setState(StateManager.State.BUFFERING, { 'from': 'stalled' });\n  }\n  _onRateChange(event) {\n    if (this._video.playbackRate === 0 && this._playStarted) {\n      this._setState(StateManager.State.BUFFERING, { 'from': 'ratechange' });\n    }\n  }\n  _onSeeking(event) {\n    this._inSeeking = true;\n    this._setState(StateManager.State.SEEKING, { 'from': 'seeking' });\n  }\n  _onSeeked(event) {\n    this._inSeeking = false;\n    this._inUserSeeking = false;\n    this._setState(StateManager.State.BUFFERING, { 'from': 'seeked' });\n  }\n\n  // TODO:: Rename to reset\n  reset(details) {\n    this._setState(StateManager.State.IDLE, { from: details });\n\n    this._playStarted = false;\n    this._inUserSeeking = false;\n    this._startBufferingTime = -1;\n    this._bufferingTime = 0.0;\n\n    if (details.reason === StateManager.ActionReason.START) {\n      this._eventManager.listen(this._video, 'loadstart', this._onLoadStart.bind(this));\n      this._eventManager.listen(this._video, 'ended', this._onEnded.bind(this));\n      this._eventManager.listen(this._video, 'abort', this._onAbort.bind(this));\n      // this._eventManager.listen(this._video, 'error', this._onError.bind(this));\n\n      this._eventManager.listen(this._video, 'seeking', this._onSeeking.bind(this));\n      this._eventManager.listen(this._video, 'seeked', this._onSeeked.bind(this));\n\n      this._eventManager.listen(this._video, 'timeupdate', this._onTimeUpdate.bind(this));\n\n      this._eventManager.listen(this._video, 'waiting', this._onWaiting.bind(this));\n      // this._eventManager.listen(this._video, 'stalled', this._onStalled.bind(this));\n      this._eventManager.listen(this._video, 'ratechange', this._onRateChange.bind(this));\n\n      this._eventManager.listen(this._video, 'canplaythrough', this._onCanPlayThrough.bind(this));\n      // this._eventManager.listen(this._video, 'playing', this._onPlaying.bind(this));\n\n      this._eventManager.listen(this._video, 'play', this._onPlay.bind(this));\n      this._eventManager.listen(this._video, 'pause', this._onPause.bind(this));\n    } else if (details.reason === StateManager.ActionReason.ABORT || details.reason === StateManager.ActionReason.ERROR) {\n      this._eventManager.removeAll();\n    }\n  }\n\n  notifyUserSeek() {\n    this._inUserSeeking = true;\n  }\n\n  _setState(newState, details) {\n    if (newState === this._state) {\n      return;\n    }\n\n    let oldState = this._state;\n    // if (oldState == StateManager.State.SEEKING && newState == StateManager.State.BUFFERING){\n    //     return;\n    // }\n    this._state = newState;\n\n    if (newState === StateManager.State.PLAYING) {\n      this._playStarted = true;\n      details = details || {};\n      details.playStart = true;\n      if (this._startBufferingTime > 0) {\n        this._bufferingTime += Date.now() - this._startBufferingTime;\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'StateManager', 'End Trigger BufferTime: ' + this._bufferingTime + ' from: ' + details.from);\n        this._startBufferingTime = -1;\n      }\n    } else if (newState === StateManager.State.BUFFERING || newState === StateManager.State.SEEKING) {\n      if (this._startBufferingTime < 0) {\n        this._startBufferingTime = Date.now();\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'StateManager', 'Start Trigger BufferTime: ' + this._startBufferingTime + ' from: ' + details.from);\n      }\n    }\n    this._stateCallback(oldState, newState, details);\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'StateManager', 'Fired StateChange: ' + oldState + '->' + newState);\n  }\n\n  getState() {\n    return this._state;\n  }\n  getBufferingTime() {\n    return this._bufferingTime;\n  }\n}\n\n/**\n * State\n * @readonly\n * @enum {string}\n * @static\n * @type StateManager.State\n */\nStateManager.State = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  BUFFERING: 'buffering',\n  STARTPLAY: 'play',\n  PLAYING: 'playing',\n  PAUSED: 'paused',\n  SEEKING: 'seeking'\n};\n\n/**\n * Reason of playback end\n * @readonly\n * @enum {string}\n */\nStateManager.ActionReason = {\n  START: 'start',\n  ABORT: 'abort',\n  COMPLETE: 'complete',\n  ERROR: 'error'\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/StateManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "class",
    "name": "StateManager",
    "memberof": "src/Manager/StateManager.js",
    "static": true,
    "longname": "src/Manager/StateManager.js~StateManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/StateManager.js",
    "importStyle": "{StateManager}",
    "description": "class StateManager",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 307,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_video",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "_state",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_state",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "_playStarted",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_playStarted",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "_inUserSeeking",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_inUserSeeking",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "_inSeeking",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_inSeeking",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "_bufferingTime",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_bufferingTime",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "_startBufferingTime",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_startBufferingTime",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_stateCallback",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_stateCallback",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "_player",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_player",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "_onLoadStart",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onLoadStart",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_onTimeUpdate",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onTimeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "_onCanPlayThrough",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onCanPlayThrough",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "_onPlaying",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onPlaying",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "_onPlay",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onPlay",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "_onPause",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onPause",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "_onEnded",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onEnded",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "_onAbort",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onAbort",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "_onWaiting",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onWaiting",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "_onStalled",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onStalled",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "_onRateChange",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onRateChange",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "_onSeeking",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onSeeking",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "_onSeeked",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_onSeeked",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#reset",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "details",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "notifyUserSeek",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#notifyUserSeek",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "_setState",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#_setState",
    "access": "private",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "newState",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "getState",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#getState",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "getBufferingTime",
    "memberof": "src/Manager/StateManager.js~StateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StateManager.js~StateManager#getBufferingTime",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "src/Manager/StatisticManager.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer';\nimport { NLError } from '../Media/NLError'\nimport { FakeEvent } from '../Utils/FakeEvent';\nimport { Logger } from '../Utils/Logger'\n\nexport class StatisticManager extends Logger {\n  constructor(video, parent) {\n    super(parent._logger);\n\n    this._eventHandler = parent;\n    this._video = video;\n    this.startWatchDog = null;\n    this.seekWatchDog = null;\n\n    this._onError = null;\n    this._errConfig = {\n      url: '',\n      level: 0\n    };\n    this.errorCheckList = [];\n\n    StatisticManager.WATCHDOG_TIMEOUT = 10 * 1000;\n    StatisticManager.ERROR_CHECK_INTERVAL = 30 * 1000;\n  }\n\n  stop() {\n    this.stopLoadWatchDog();\n    this.stopSeekWatchDog();\n  }\n\n  setErrorCallback(onError, errorConfig) {\n    this._onError = onError;\n    this._errConfig = errorConfig;\n  }\n\n  getErrorConfig() {\n    return this._errConfig;\n  }\n\n  // error in [ 30s ] error don't add\n  _generateCheckFunction(olderErrorInfo) {\n    return function (olderErrorInfo, newerErrorInfo) {\n      return arguments[0].compare(arguments[1]);\n    }.bind(null, olderErrorInfo);\n  }\n\n  // return true when same mesage in 30s\n  _onCheckErrorInfo(addedErrorInfo) {\n    for (let i = 0; i < this.errorCheckList.length; i++) {\n      let errorItem = this.errorCheckList[i];\n      if (Date.now() - errorItem.time > StatisticManager.ERROR_CHECK_INTERVAL) {\n        this.errorCheckList.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (errorItem.checkFunc(addedErrorInfo)) {\n        return true;\n      }\n    }\n\n    this.errorCheckList.push({\n      checkFunc: this._generateCheckFunction(addedErrorInfo),\n      time: Date.now()\n    });\n    return false;\n  }\n\n  reset(url) {\n    if (this.startWatchDog) {\n      this.stopLoadWatchDog();\n      this.startWatchDog = null;\n    }\n    \n    if (this.seekWatchDog) {\n      this.stopSeekWatchDog();\n      this.seekWatchDog = null;\n    }\n    \n    this.errorCheckList = [];\n    this._errConfig.url = url;\n    this.startLoadWatchDog();\n  }\n\n  startLoadWatchDog() {\n    if (this.startWatchDog) {\n      this.stopLoadWatchDog();\n    }\n    this.startWatchDog = window.setTimeout(function () {\n      let message = 'Start playback timeout';\n      let code = NLError.Code.Start_Playback_Timeout;\n      let level = NLError.SeverityLevel.Warning;\n      let error = NLError.create(code, level, this._errConfig.url, message);\n      this.reportError(error);\n    }.bind(this), StatisticManager.WATCHDOG_TIMEOUT);\n  }\n\n  startSeekWatchDog() {\n    if (this.seekWatchDog) {\n      this.stopSeekWatchDog();\n    }\n    this.seekWatchDog = window.setTimeout(function () {\n      let message = 'Seek timeout';\n      let code = NLError.Code.Seek_Timeout;\n      let level = NLError.SeverityLevel.Warning;\n      let error = NLError.create(code, level, this._errConfig.url, message);\n      this.reportError(error);\n    }.bind(this), StatisticManager.WATCHDOG_TIMEOUT);\n  }\n\n  stopLoadWatchDog() {\n    if (this.startWatchDog) {\n      this.startWatchDog = window.clearTimeout(this.startWatchDog);\n    }\n  }\n\n  stopSeekWatchDog() {\n    if (this.seekWatchDog) {\n      this.seekWatchDog = window.clearTimeout(this.seekWatchDog);\n    }\n  }\n\n  reportUnsupportedSchema(url) {\n    let message = 'load with wrong url!';\n    let code = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Connect_Failed;\n    let level = NLError.SeverityLevel.Fatal;\n    this.reportError(NLError.create(code, level, url, message));\n  }\n\n  reportUnsupported() {\n    let message = 'Your Browser does not support MSE or WebRTC';\n    let code = NLError.Code.Platform_Not_Supported;\n    let level = NLError.SeverityLevel.Fatal;\n    let error = NLError.create(code, level, this._errConfig.url, message);\n    this.reportError(error);\n  }\n\n  reportNativeVideoError(msg, errorCode) {\n    let code = errorCode || NLError.Code.Playback_Generic_Error;\n    let level = NLError.SeverityLevel.Fatal;\n    let error = NLError.create(code, level, this._errConfig.url, msg);\n    this.reportError(error);\n  }\n\n  reportError(error) {\n    if (!error.isValid() ||\n      this._onCheckErrorInfo(error) ||\n      (this._errConfig && this._errConfig.level && this._errConfig.level < error.level)) {\n      return;\n    }\n\n    if (this._onError && error.level <= NLError.SeverityLevel.Error) {\n      this._onError(error.toJSON());\n    }\n\n    if (error.level > NLError.SeverityLevel.Error) {\n      error.code += 5000;\n    }\n    \n    this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.Error, { details: error.toJSON() }));\n    this.print(AdaptivePlayer.LogLevel.INFO, 'StatisticManager', 'Trigger Error event: ' + JSON.stringify(error.toJSON()));\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Manager/StatisticManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "StatisticManager",
    "memberof": "src/Manager/StatisticManager.js",
    "static": true,
    "longname": "src/Manager/StatisticManager.js~StatisticManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Manager/StatisticManager.js",
    "importStyle": "{StatisticManager}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "_eventHandler",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_eventHandler",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_video",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "startWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#startWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "seekWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#seekWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "_onError",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "_errConfig",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_errConfig",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"url\": *, \"level\": *}"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "errorCheckList",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#errorCheckList",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "stop",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#stop",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "setErrorCallback",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#setErrorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "onError",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "getErrorConfig",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#getErrorConfig",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "_generateCheckFunction",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_generateCheckFunction",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "olderErrorInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "_onCheckErrorInfo",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#_onCheckErrorInfo",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "addedErrorInfo",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#reset",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "startLoadWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#startLoadWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "startSeekWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#startSeekWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "stopLoadWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#stopLoadWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "stopSeekWatchDog",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#stopSeekWatchDog",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "reportUnsupportedSchema",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#reportUnsupportedSchema",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "reportUnsupported",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#reportUnsupported",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "reportNativeVideoError",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#reportNativeVideoError",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "errorCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "reportError",
    "memberof": "src/Manager/StatisticManager.js~StatisticManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Manager/StatisticManager.js~StatisticManager#reportError",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "src/Media/CCExtractor.js",
    "content": "import * as muxjs from '../../3rd/mux.js/dist/mux'\n\nexport class CCExtractor {\n  constructor(ccCallback) {\n    this._ccCallback = ccCallback;\n    this.init_ = null;\n    this.isLive_ = false;\n\n    /**\n     * Used for DASH CVOD case, only for LIVE\n     * cts of first sample in timescale 1000\n     */\n    this.presentationTimeOffset_ = 0;\n\n    this.closedCaptionParser_ = null;    \n  }\n\n  destroy() {\n\n  }\n\n  appendInit(data, isLive, timeOffsetforCVOD) {\n    this.init_ = data;\n    this.isLive_ = !!isLive;\n    this.presentationTimeOffset_ = (this.isLive_) ? 0 : timeOffsetforCVOD; // only for CVOD case, need to minus time offset\n\n    this.closedCaptionParser_ = new muxjs.mp4.CaptionParser();\n\n    let probe = muxjs.mp4.probe;\n    // Caption parser for Dash\n    let initBytes = new Uint8Array(data);\n    this.videoTrackIds_ = probe.videoTrackIds(initBytes);\n    this.timescales_ = probe.timescale(initBytes);\n    this.closedCaptionParser_.init();\n  }\n\n  resetData() {\n    if (this.closedCaptionParser_) {\n      this.closedCaptionParser_.reset();\n    }\n  }\n\n  resetInitSegment() {\n    this.init_ = null;\n  }\n\n  appendSegment(data) {\n    let segmentBytes = new Uint8Array(data);\n    let dashParsed = this.closedCaptionParser_.parse(\n      segmentBytes, this.videoTrackIds_, this.timescales_);\n    if (dashParsed && dashParsed.captions && dashParsed.captions.length > 0) {\n      let captions = [];\n      dashParsed.captions.forEach(function(caption) {\n        captions.push({ \n          start: caption.startTime - this.presentationTimeOffset_, \n          end: caption.endTime - this.presentationTimeOffset_, \n          detail: caption.screen \n        });\n      }.bind(this));\n      this._ccCallback(captions);\n    }\n    // ParsedCaptions is used by mux.js to store the captions parsed so far.\n    // It should be reset every time some data is parsed, so as to store new\n    // data.\n    this.closedCaptionParser_.clearParsedCaptions();\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/CCExtractor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "class",
    "name": "CCExtractor",
    "memberof": "src/Media/CCExtractor.js",
    "static": true,
    "longname": "src/Media/CCExtractor.js~CCExtractor",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/CCExtractor.js",
    "importStyle": "{CCExtractor}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 388,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "_ccCallback",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#_ccCallback",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "init_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#init_",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "isLive_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#isLive_",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "presentationTimeOffset_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#presentationTimeOffset_",
    "access": "public",
    "description": "Used for DASH CVOD case, only for LIVE\ncts of first sample in timescale 1000",
    "lineNumber": 13,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "closedCaptionParser_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#closedCaptionParser_",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "appendInit",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#appendInit",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "isLive",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeOffsetforCVOD",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "videoTrackIds_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#videoTrackIds_",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "timescales_",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#timescales_",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "resetData",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#resetData",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "resetInitSegment",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#resetInitSegment",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "appendSegment",
    "memberof": "src/Media/CCExtractor.js~CCExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/CCExtractor.js~CCExtractor#appendSegment",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "src/Media/Cues.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer'\n\nfunction fixLineBreaks(input) {\n  return input.replace(/<br(?: \\/)?>/gi, '\\n');\n}\n\nlet MakeCues = function (captions, track) {\n  let cues = [];\n  let row;\n  let cue;\n  let indenting;\n  let indent;\n  let text;\n  let VTTCue = window.VTTCue || window.TextTrackCue;\n\n  for (let i = 0; i < captions.length; i++) {\n    let caption = captions[i];\n    let startTime = caption.start;\n    let endTime = caption.end;\n    let captionScreen = caption.detail;\n\n    // remove cues in case of overlap\n    if (track.cues) {\n\t\t\tfor (let i = track.cues.length; i--;) {\n\t\t\t\tlet cue_ = track.cues[i];\n\t\t\t\t// if (cue_.endTime < cue.startTime) { break; }\n\t\t\t\tlet overlap = Math.min(cue_.endTime, endTime) - Math.max(cue_.startTime, startTime);\n\t\t\t\tif (overlap >= 0 && (overlap / (endTime - startTime)) > 0.5) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    for (let r = 0; r < captionScreen.length; r++) {\n      row = captionScreen[r];\n      indenting = true;\n      indent = 0;\n      text = '';\n      if (row !== '') {\n        for (let c = 0; c < row.length; c++) {\n          if (row[c].match(/\\s/) && indenting) {\n            indent++;\n          } else {\n            text += row[c];\n            indenting = false;\n          }\n        }\n        // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n        if (startTime === endTime) {\n          endTime += 0.0001;\n        }\n        cue = new VTTCue(startTime, endTime, fixLineBreaks(text.trim()));\n        if (indent >= 16) {\n          indent--;\n        } else {\n          indent++;\n        }\n        // VTTCue.line get's flakey when using controls, so let's now include line 13&14\n        // also, drop line 1 since it's to close to the top\n        // Bug #42343: [v3.0]The position of cc is incorrect when play HLS live stream in safari H5player.\n        if (navigator.userAgent.match(/Firefox\\//)) {\n          let isMacOS = (AdaptivePlayer.OS.name === 'Mac OS');\n          let OFFSET = [\n            [-1, 1], // windows and others\n            [2, 1] // offset on mac os\n          ];\n          cue.line = (r > 7 ? r + OFFSET[isMacOS & 1][0] : r + OFFSET[isMacOS & 1][1]);\n        } else {\n          cue.line = (r > 7 ? r - 3 : r + 1);\n        }\n        \n        cue.align = 'left';\n        // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break\n        cue.position = Math.max(0, Math.min(100, 100 * (indent / 32) + (navigator.userAgent.match(/Firefox\\//) ? 50 : 0)));\n        track.addCue(cue);\n      }\n    }\n  }\n\n  return cues;\n};\n\nexport {\n  MakeCues\n};\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/Cues.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "fixLineBreaks",
    "memberof": "src/Media/Cues.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/Cues.js~fixLineBreaks",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Media/Cues.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "function",
    "name": "MakeCues",
    "memberof": "src/Media/Cues.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/Cues.js~MakeCues",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/Cues.js",
    "importStyle": "{MakeCues}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "captions",
        "types": [
          "*"
        ]
      },
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "file",
    "name": "src/Media/FairPlay/FairPlayDRM.js",
    "content": "import { NLError } from '../NLError'\nimport { ServerCertificateManager } from './ServerCertificateManager'\nimport { KeySessionManager } from './KeySessionManager'\nimport { EventManager } from '../../Manager/EventManager'\n\nexport class FairPlayDRM {\n    constructor() {\n        this._clear();\n\n        this._certManager = new ServerCertificateManager();\n        this._eventManager = new EventManager();\n        this._sessionManager = new KeySessionManager();\n    }\n\n    configure(licenseUrl, certUrl, params) {\n        this._licenseUrl = licenseUrl;\n        this._certUrl = certUrl;\n        this._params = params;\n    }\n\n    init(video, onError) {\n        this._video = video;\n        this._onError = onError;\n\n        this._sessionManager.init(\n            this._licenseUrl,\n            this._params,\n            onError);\n\n        if (typeof this._video.onwebkitneedkey !== 'undefined') {\n            this._eventManager.listen(\n                this._video,\n                'webkitneedkey',\n                this._onNeedKey.bind(this));\n        } else {\n            this._onError({ error: NLError.Basic.DRM.NOT_SUPPORTED });\n        }\n    }\n\n    reset() {\n        this._clear();\n\n        // We don't want to reset CertManager because want to keep the cert in cache.\n        this._eventManager && this._eventManager.removeAll();\n        this._sessionManager && this._sessionManager.reset();\n    }\n\n    destroy() {\n        this._clear();\n\n        this._eventManager && this._eventManager.destroy();\n        this._certManager && this._certManager.destroy();\n        this._sessionManager && this._sessionManager.destroy();\n    }\n\n    _clear() {\n        this._video = null;\n        this._licenseUrl = '';\n        this._certUrl = '';\n        this._params = null;\n        this._onError = null;\n    }\n\n    _onNeedKey(event) {\n        if (!this._licenseUrl || !this._certUrl) {\n            this.reset();\n            this._onError({ error: NLError.Basic.DRM.INVALID_PARAMS });\n            return;\n        }\n\n        this._certManager.load(this._certUrl, this._params.token).then(function (certCb) {\n            this._sessionManager.createSession(this._video, event.initData, certCb);\n        }.bind(this), function (e) {\n            /* error :( */\n            this._onError({ error: NLError.Basic.DRM.CERTIFICATE_ERROR, code: e });\n        }.bind(this));\n    }\n\n    _onKeyError(event) {\n        this._onError({ error: NLError.Basic.DRM.KEY_ERROR });\n    }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/FairPlay/FairPlayDRM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 410,
    "kind": "class",
    "name": "FairPlayDRM",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js",
    "static": true,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/FairPlayDRM.js",
    "importStyle": "{FairPlayDRM}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 411,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "_certManager",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_certManager",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "_sessionManager",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_sessionManager",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#configure",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "licenseUrl",
        "types": [
          "*"
        ]
      },
      {
        "name": "certUrl",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "_licenseUrl",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_licenseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "_certUrl",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_certUrl",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "_params",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_params",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "init",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#init",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "video",
        "types": [
          "*"
        ]
      },
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_video",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "_onError",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#reset",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "_clear",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_clear",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "_onNeedKey",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_onNeedKey",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "_onKeyError",
    "memberof": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/FairPlayDRM.js~FairPlayDRM#_onKeyError",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 437,
    "kind": "file",
    "name": "src/Media/FairPlay/FairPlayDRMHelpers.js",
    "content": "import * as StringUtil from '../../Utils/String'\n\nlet extractContentId = function (initData) {\n    // TODO::\n    let contentId = StringUtil.arrayToString(initData);\n\n    if (contentId[0] !== 's') {\n        contentId = contentId.substr(1, contentId.length);\n    }\n\n    // contentId is passed up as a URI, from which the host must be extracted:\n    let link = document.createElement('a');\n    link.href = contentId;\n    return link.hostname;\n};\n\nlet concatInitDataIdAndCertificate = function (initData, id, cert) {\n    if (typeof id === 'string') {\n        id = StringUtil.stringToArray(id);\n    }\n\n    // layout is [initData][4 byte: idLength][idLength byte: id][4 byte:certLength][certLength byte: cert]\n    let offset = 0;\n    let buffer = new ArrayBuffer(initData.byteLength + 4 + id.byteLength + 4 + cert.byteLength);\n    let dataView = new DataView(buffer);\n\n    let initDataArray = new Uint8Array(buffer, offset, initData.byteLength);\n    initDataArray.set(initData);\n    offset += initData.byteLength;\n\n    dataView.setUint32(offset, id.byteLength, true);\n    offset += 4;\n\n    let idArray = new Uint16Array(buffer, offset, id.length);\n    idArray.set(id);\n    offset += idArray.byteLength;\n\n    dataView.setUint32(offset, cert.byteLength, true);\n    offset += 4;\n\n    let certArray = new Uint8Array(buffer, offset, cert.byteLength);\n    certArray.set(cert);\n\n    return new Uint8Array(buffer, 0, buffer.byteLength);\n};\n\nlet parseLicense = function (text) {\n    /* response can be of the form: \n        '{\n        \\'body\\': {\n            \\'duration\\': 864000, \n            \\'response\\': \\'AAAAAQAAAABBtx77eeKp43VF4UZRXwB8AAAFgGQzgCjbxHmdtgeps6jjKQhdurJobRNBbDKfbT76TxKnYkZwtsiLKdwcR7KJzIs3TDPWj1m2ylKB0TbTuYFq/+ua1UyQIV7cx7grsoZ0dD/cIJPCReORTh0o0Y0ZjbCbMAkY2DWB5v6bb6WLj0gmjXNWn2aWz89PhQRuQ38Z6zocAqaAZIg5iYAZYMCKsEJQ1bZqSuyHc/CJ2Fty6SIQqrM5d227Ha3hcbo9ZLOuXDVYRxRz7594vRdHH1FgtKVxN9SLRdVzOLnOf+XVljvRYJZYCtB+VhaYmJ7yirDgoH4f/tUzyQmphy/wTxur2ZfTrJak/Hwl7gnJ3NZBQVH3fntTX2uXmJuQcpfQhc56XisyhsTD3EemAPIkM/yWkQR9jtS4saD2hcbQmRLJc2vV/EUKMz5wMEV54IzAhkU8UO97oi9Glnp36nChCRvkzjWBe+pDUIs+9JrnmMtwjpZKvVBU1QpD11iRDovvcDpWJFe7K1K4aeebbkr92LGzCh1INYcH2woNnCVRTtsoytU51yRsyWlia9VG/HRPYdz/r+0G1yCL8bXlJtXYMS36vo8DILM0xVTVrkl+sHSVffdR7iiaLHxWW8zZO0tai0/gSsHYDEg6po0kabLViCqiJwQ1ZaDBmpvIpQY2nJ+HjvLKzpXRpu2Q5QMAcb0qiG4DfHdcw34UHNjJw4wrXYKs7DuPGDBjpClf9ZAAjpVJVkDhIQA8L3459cLyxzTjvMk8j+2L2I6XIwHTuu01+46B8IEGNbFqtNQEEXy+ZNF5P3jHaQ3crSmw5Xt6p9aaJcAZpHlfSIO54/BCmydT+m3nW9D2kLfyJoDV4A+N1xJ+X9pZ6UGeZPy8K7LTtxKEiOrqcglq2cqNFgHZb60UpzZfZc9lNJLErPfIr4WuQCI/FmfuEEMPk8fCz3ZAiVFTQLYkbRChNfjyHr4HmZjb2t/+36KwQUiFjqsnNyaAx7H6l9ACfj/pkY2QkU7C99siu2ERGKEYwcGkdvQ3m5TDUrp15ra1NRgk02Q9U2XRcgw6JOj4tgUdRgSMgJqk7pkOTTGwiTf+XB05SSefn1SstVBhWkVgx/vR881CMg1hSmJPwgLmLyJyMbcLCPIp/A4/At3LB7l5aJeXJUSs21998GRjlGe592YJpu8WvcvA2x4p0hkP8yjL6LXGXVExMT+9ISZPID+Q1ibFyBtS0d1hu6nifoPUOuwFnaBtTeJMKYRKWE4av52iq60/CcUrFJfT368g4AgOa2R58mIgVDSVggZGW+MnhlPxGvJxJG9SlhSD0/lVAJT4zUDaSVrIr3VS6HOuVg6rJmlZioLVzlRIFLhR5/jR/p6y54Av+rzC03uYu2UfOm2JpYhEFCnolgx9gb/dAJ7nY8uIN3JPGEsMpZUGATghlemKFNWuf7PovMFryVKG9SdJQmXXLFxLId5jRlIBT7HyYjBavVkp19IthnJxxfaaTHqJCdn1X7P3ZPYTt1GIh1bmoXianDG4McuUQvmgMyCgu0CN4d790aVFeL+XzSN/IzdZfzxxv+MM20VfPLIKmm9pHLYuTVyXeVImkaXTjVNEVKK6Y87zGQsM4JAZmL+SmKCDathbhDxRszjSTPLLGVdjXQDAJUTOaUrOuUt1GTxgQk6b+NhkLZunMRUNHtBusFZMU6b1xkQdRXl1BkXptJiIWQMKkAli3ANHlgnotJGZVlC6nYmMd3KMBUgl6a0ESJkm8fZqrotWoktJHFy11/urdnbbsiArTVcWRYSHp8ARLS/f6ev6ZUP1KiB/4hGtzF8JvHLPkjf95Eudv805LfKORQi46TFAcwtTx030l17ym//L8IT606uPCnCnfdTE3zj15KhCtzP5hkM2S3foIXk=\\'\n        }, \n        \\'status\\': {\n            \\'ok\\': true\n        }\n        }' \n    */\n    let response = JSON.parse(text);\n    if (!response) {\n        return { result: null, message: 'response parse failed!' };\n    }\n    if (!response.status.ok) {\n        return { result: null, message: response.status.user_msg };\n    }\n\n    return { result: StringUtil.base64DecodeUint8Array(response.body.response), message: 'ok' };\n};\n\nexport {\n    extractContentId,\n    concatInitDataIdAndCertificate,\n    parseLicense\n};\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/FairPlay/FairPlayDRMHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 438,
    "kind": "function",
    "name": "extractContentId",
    "memberof": "src/Media/FairPlay/FairPlayDRMHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/FairPlay/FairPlayDRMHelpers.js~extractContentId",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/FairPlayDRMHelpers.js",
    "importStyle": "{extractContentId}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "initData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "function",
    "name": "concatInitDataIdAndCertificate",
    "memberof": "src/Media/FairPlay/FairPlayDRMHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/FairPlay/FairPlayDRMHelpers.js~concatInitDataIdAndCertificate",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/FairPlayDRMHelpers.js",
    "importStyle": "{concatInitDataIdAndCertificate}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "initData",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "cert",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "parseLicense",
    "memberof": "src/Media/FairPlay/FairPlayDRMHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/FairPlay/FairPlayDRMHelpers.js~parseLicense",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/FairPlayDRMHelpers.js",
    "importStyle": "{parseLicense}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"result\": *, \"message\": string}"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "file",
    "name": "src/Media/FairPlay/KeySessionManager.js",
    "content": "import * as helpers from './FairPlayDRMHelpers'\nimport { EventManager } from '../../Manager/EventManager'\nimport * as ObjectUtil from '../../Utils/Object'\nimport * as StringUtil from '../../Utils/String'\nimport * as xhr from '../../Utils/Xhr'\nimport * as PlatformUtil from '../../Utils/Platform'\nimport { NLError } from '../NLError'\n\nexport class KeySessionManager {\n    constructor() {\n        this.KEY_SYSTEM_NAME = 'com.apple.fps.1_0';\n        this._licenseUrl = '';\n        this._onError = null;\n        this._params = null;\n\n        this._eventManager = new EventManager();\n        this._sessions = [];\n    }\n\n    init(licenseUrl, params, onError) {\n        this._licenseUrl = licenseUrl;\n        this._params = params;\n        this._onError = onError;\n\n        this._eventManager.removeAll();\n        this._clearSession();\n        this._sessions = [];\n    }\n\n    createSession(videoElement, rawInitData, certCb) {\n        if (!certCb) {\n            // cert load failed, just return\n            return;\n        }\n\n        let contentId = helpers.extractContentId(rawInitData);\n        let overrideInitData = helpers.concatInitDataIdAndCertificate(\n            rawInitData,\n            contentId,\n            new Uint8Array(certCb));\n\n        videoElement.webkitSetMediaKeys(new WebKitMediaKeys(this.KEY_SYSTEM_NAME));\n\n        let keySession = videoElement.webkitKeys.createSession('video/mp4', overrideInitData);\n        if (!keySession) {\n            this._onError({ error: NLError.Basic.DRM.KEY_SESSION_CREATE_ERROR });\n            return;\n        }\n        this._eventManager.listen(keySession, 'webkitkeymessage', this._onKeyMessage.bind(this));\n        this._eventManager.listen(keySession, 'webkitkeyerror', this._onKeyError.bind(this));\n\n        this._sessions.push({ keySession: keySession, contentId: contentId });\n    }\n\n    reset() {\n        this.init('', null, null);\n    }\n\n    destroy() {\n        this.reset();\n        this._eventManager.destroy();\n        this._video = null;\n    }\n\n    _onKeyMessage(event) {\n        let keySession = event.target;\n        let session = this._getSession(keySession);\n\n        let spcBase64 = StringUtil.base64EncodeUint8Array(event.message);\n        let licenseServer = this._licenseUrl;\n\n        let headers = {};\n        let params = '';\n\n        if (this._params) {\n            // saffron request\n            // {\n            //  'content_id': '53504841B2694F515BCDCCE20810656E',\n            //  'device_id':'8d025a8a-d0fa-47f4-8eaa-a4627d11e045',\n            //  'challenge':'AAAAAQAAAACNCi9C3uGspgtxwmW�',\n            //  'client':'Tribeca',\n            //  'cro':'bearer eyJhbGciOiJIUzI1NiIsInR5cC�' \n            // }\n            params = '{\"content_id\":\"' + session.contentId + \n                '\",\"device_id\":\"' + PlatformUtil.getDeviceId() + \n                '\",\"challenge\":\"' + spcBase64 + \n                '\",\"client\":\"' + (this._params.provider || 'NeuLion') + \n                '\",\"cro\":\"' + this._params.token + '\"}';\n\n            headers['Content-type'] = 'application/x-www-form-urlencoded';\n            headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            headers['Accept'] = 'application/json, text/plain, */*';\n        }\n\n        let async = xhr.createXHR({\n            url: licenseServer,\n            method: 'POST',\n            headers: headers,\n            params: params\n        });\n\n        async.then(function (responseText) {\n            let key = helpers.parseLicense(responseText);\n            if (!key.result) {\n                this._onError({\n                    error: {\n                        code: NLError.Basic.DRM.LICENSE_ERROR.code,\n                        message: NLError.Basic.DRM.LICENSE_ERROR.message + key.message\n                    }\n                });\n            } else {\n                delete session.async;\n                keySession.update(key.result);\n            }\n        }.bind(this)).catch(function (e) {\n            delete session.async;\n            this._onError({ error: NLError.Basic.DRM.LICENSE_ERROR, code: e });\n        }.bind(this));\n\n        session.async = async;\n    }\n\n    _onKeyError(event) {\n        this._onError({ error: NLError.Basic.DRM.KEY_ERROR });\n    }\n\n    _getSession(s) {\n        return ObjectUtil.find(this._sessions, 'keySession', s);\n    }\n\n    _clearSession() {\n        if (!this._sessions || this._sessions.length <= 0) {\n            return;\n        }\n\n        this._sessions.forEach(function (s) {\n            if (s.async) {\n                s.async.abort();\n            }\n            if (s.keySession) {\n                s.keySession.close();\n            }\n        });\n    }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/FairPlay/KeySessionManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 442,
    "kind": "class",
    "name": "KeySessionManager",
    "memberof": "src/Media/FairPlay/KeySessionManager.js",
    "static": true,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/KeySessionManager.js",
    "importStyle": "{KeySessionManager}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 443,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "KEY_SYSTEM_NAME",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#KEY_SYSTEM_NAME",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "_licenseUrl",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_licenseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "_onError",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "member",
    "name": "_params",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_params",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "_sessions",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_sessions",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "init",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#init",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "licenseUrl",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "onError",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "createSession",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#createSession",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "videoElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "rawInitData",
        "types": [
          "*"
        ]
      },
      {
        "name": "certCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "reset",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#reset",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_video",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "_onKeyMessage",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_onKeyMessage",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "_onKeyError",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_onKeyError",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "_getSession",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_getSession",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "_clearSession",
    "memberof": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/KeySessionManager.js~KeySessionManager#_clearSession",
    "access": "private",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 463,
    "kind": "file",
    "name": "src/Media/FairPlay/ServerCertificateManager.js",
    "content": "\nimport * as xhr from '../../Utils/Xhr'\nimport * as StringUtil from '../../Utils/String'\nimport * as ObjectUtil from '../../Utils/Object'\nimport { NLError } from '../NLError'\n\nexport class ServerCertificateManager {\n    constructor() {\n        this.MAX_COUNT = 2;\n        // {key, value, async}\n        //      |key|   is the cert url.\n        //      |value| is ArrayBuffer.\n        //      |async| is the Promise.\n        this._cache = [];\n    }\n\n    load(url, token) {\n        // Make sure 'session.async' count less than MAX_COUNT.\n        if (this._pendingCount() >= this.MAX_COUNT) {\n            return Promise.reject(NLError.Basic.CERTIFICATE_OVERFLOW_ERROR);\n        }\n\n        let certSession = this._hasCert(url);\n        if (certSession) {\n            return certSession.value ? Promise.resolve(certSession.value) : certSession.async;\n        }\n\n        let headers = {};\n        headers['CustomData'] = token;\n        headers['Authorization'] = token;\n\n        let async = xhr.createXHR({\n            url: url,\n            headers: headers\n        }).then(function (ab) {\n            certSession.value = StringUtil.base64DecodeUint8Array(ab.replace(/(\\r\\n|\\n|\\r)/gm, ''));\n            delete certSession.async;\n            return certSession.value;\n        }).catch(function (e) {\n            this._removeSession(certSession);\n            return Promise.reject(e);\n        }.bind(this));\n\n        certSession = { key: url, async: async };\n\n        this._pushSession(certSession);\n        return async;\n    }\n\n    destroy() {\n        this._cache.forEach(function (item) {\n            let async = item.async;\n            async && async.abort && async.abort();\n        });\n    }\n\n    _hasCert(url) {\n        return ObjectUtil.find(this._cache, 'key', url);\n    }\n\n    _pendingCount() {\n        let n = this._cache.length;\n        let count = 0;\n        for (let i = 0; i < n; i++) {\n            if (this._cache[i].async) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    _pushSession(session) {\n        if (this._cache.length >= this.MAX_COUNT) {\n            this._cache.shift();\n        }\n        this._cache.push(session);\n    }\n\n    _removeSession(session) {\n        let idx = this._cache.indexOf(session);\n        if (idx >= 0) {\n            this._cache.splice(idx, 1);\n        }\n    }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/FairPlay/ServerCertificateManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 464,
    "kind": "class",
    "name": "ServerCertificateManager",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js",
    "static": true,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/FairPlay/ServerCertificateManager.js",
    "importStyle": "{ServerCertificateManager}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 465,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "MAX_COUNT",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#MAX_COUNT",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "member",
    "name": "_cache",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#_cache",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "load",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "_hasCert",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#_hasCert",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "_pendingCount",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#_pendingCount",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "_pushSession",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#_pushSession",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "session",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "_removeSession",
    "memberof": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/FairPlay/ServerCertificateManager.js~ServerCertificateManager#_removeSession",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "session",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 474,
    "kind": "file",
    "name": "src/Media/HlsPlaylistParser.js",
    "content": "import * as UrlUtil from '../Utils/Url'\nimport * as XHRUtil from '../Utils/Xhr'\nimport { Parser } from '../../3rd/m3u8-parser/dist/m3u8-parser.min'\nimport { NLError } from './NLError'\nimport { WebVTTParser } from '../../externals/webvtt/parser'\n\nexport default class HlsPlaylistParser {\n  constructor() {\n    this._playHeadTimeCb = null;\n    this._errorCb = null;\n    this._thumbnailCb = null;\n    this._thumbnailImageCb = null;\n    this._adCb = null;\n    this._masterUrl = null;\n    this._baseUrl = null;\n    this._levelUrl = null;\n    this._levelRedundantUrls = [];\n    this._levelIndex = -1;\n    this._ccInfos = null;\n  }\n\n  destroy() {\n    this._playHeadTimeCb = null;\n    this._errorCb = null;\n    this._thumbnailCb = null;\n    this._thumbnailImageCb = null;\n    this._adCb = null;\n    this._masterUrl = null;\n    this._baseUrl = null;\n    this._levelUrl = null;\n    this._levelRedundantUrls = [];\n    this._levelIndex = -1;\n    this._ccInfos = null;\n  }\n\n  loadPlaylist(url, userdata) {\n    if (this._masterUrl == null) {\n      this._masterUrl = url;\n      this._baseUrl = UrlUtil.getPath(url);\n    }\n    let async = XHRUtil.createXHREx({\n      url: url\n    }, userdata).then(function (ab) {\n      let parser = new Parser();\n      parser.push(ab.response);\n      parser.end();\n\n      if (ab.userdata && ab.userdata.type === 'master' && parser.isMasterPlaylist()) {\n        try {\n          this._parseMasterPlaylist(parser);\n        } catch (e) {\n          this._onError(NLError.Basic.M3U8.MANIFEST_PARSING_ERROR, e);\n        }\n      }\n\n      if (ab.userdata && (ab.userdata.type === 'level' || ab.userdata.type === 'master') && parser.isLevelPlaylist()) {\n        if (ab.userdata.type === 'master') {\n          this._levelUrl = this._masterUrl;\n        }\n        try {\n          this._parseLevelPlaylist(parser, ab.userdata.index);\n        } catch (e) {\n          if (ab.userdata.type === 'level' && this._levelIndex >= 0 && this._levelIndex < this._levelRedundantUrls.length) {\n            this._levelIndex += 1;\n            this._levelUrl = this._levelRedundantUrls[this._levelIndex];\n          } else {\n            this._onError(NLError.Basic.M3U8.GET_PLAYHEADTIME_FAILED, e);\n          }\n        }\n      }\n\n      if (ab.userdata && ab.userdata.type === 'thumbnail' && parser.isLevelPlaylist()) {\n        try {\n          this._parseThumbnailPlaylist(parser, ab.userdata);\n        } catch (e) {\n          this._onError(NLError.Basic.M3U8.GET_THUMBNAIL_FAILED, e);\n        }\n      }\n    }.bind(this)).catch(function (e) {\n      this._onError(NLError.Basic.M3U8.MANIFEST_LOAD_ERROR, e.response);\n    }.bind(this));\n\n    return async;\n  }\n\n  loadVtts(url, userdata) {\n    let async = XHRUtil.createXHREx({\n      url: url\n    }, userdata).then(function (ab) {\n      // parse vtts\n      if (userdata && ab.userdata && ab.userdata.type === 'vtts') {\n        let parser = new WebVTTParser();\n        let result = parser.parse(ab.response, 'metadata');\n        try {\n          this._parseVttPlaylist(result, ab.userdata);\n        } catch (e) {\n          this._onError(NLError.Basic.M3U8.PARSE_VTT_FAILED, e);\n        }\n      }\n    }.bind(this)).catch(function (e) {\n      this._onError(NLError.Basic.M3U8.GET_VTT_FAILED, e.response);\n    }.bind(this));\n\n    return async;\n  }\n\n  setPlayHeadCB(playHeadTimeCb) {\n    this._playHeadTimeCb = playHeadTimeCb;\n  }\n\n  setErrorCb(errorCb) {\n    this._errorCb = errorCb;\n  }\n\n  setThumbnailCb(thumbnailCb) {\n    this._thumbnailCb = thumbnailCb;\n  }\n\n  setThumbnailImageCb(thumbnailImageCb) {\n    this._thumbnailImageCb = thumbnailImageCb;\n  }\n\n  setAdStitchCb(adCb) {\n    this._adCb = adCb;\n  }\n\n  getAbsUrl(url) {\n    let absUrl = url;\n    if (!UrlUtil.isAbsoluteUrl(url) && this._baseUrl) {\n      absUrl = this._baseUrl + url;\n    }\n    return absUrl;\n  }\n\n  getLevelUrl() {\n    return this._levelUrl;\n  }\n\n  getHlsCC() {\n    return this._ccInfos;\n  }\n\n  _onError(descript, error) {\n    if (this._errorCb) {\n      this._errorCb({ error: descript, code: error });\n    }\n  }\n\n  _parseMasterPlaylist(parser) {\n    if (parser.manifest && parser.manifest.mediaGroups && parser.manifest.mediaGroups['CLOSED-CAPTIONS'] && \n        parser.manifest.mediaGroups['CLOSED-CAPTIONS'].ccs) {\n      let ccs = parser.manifest.mediaGroups['CLOSED-CAPTIONS'].ccs;\n      let index = 1;\n      if (ccs && Object.keys(ccs).length > 0) {\n        this._ccInfos = {};\n        for (let i in ccs) {\n          this._ccInfos['cc' + index.toString()] = {\n            name: i,\n            lang: ccs[i].language\n          };\n        }\n      }\n    }\n    for (let i = 0; i < parser.manifest.playlists.length; i++) {\n      let sbrUrl = parser.manifest.playlists[i].uri;\n      if (!UrlUtil.isAbsoluteUrl(sbrUrl)) {\n        sbrUrl = this._baseUrl + sbrUrl;\n      }\n      if (this._levelUrl == null) {\n        this._levelUrl = sbrUrl;\n        this._levelIndex = i;\n      }\n      this._levelRedundantUrls.push(sbrUrl);\n    }\n    this.loadPlaylist(this._levelUrl, { type: 'level', index: 0 });\n\n    let thumbnails = parser.getThumbnailsStreams();\n    if (thumbnails.length > 0 && this._thumbnailCb) {\n      let upStreams = [];\n      for (let i = 0; i < thumbnails.length; i++) {\n        let thumbnailUri = thumbnails[0].uri;\n        if (!UrlUtil.isAbsoluteUrl(thumbnailUri)) {\n          thumbnailUri = this._baseUrl + thumbnailUri;\n        }\n        // this.loadPlaylist(thumbnailUri, {type: 'thumbnail', index: i});\n        let upStream = {\n          id: i,\n          width: thumbnails[0].width,\n          height: thumbnails[0].height,\n          uri: thumbnailUri\n        };\n        upStreams.push(upStream);\n      }\n      this._thumbnailCb(upStreams);\n    }\n  }\n\n  _parseLevelPlaylist(parser, index) {\n    if (this._playHeadTimeCb) {\n      this._playHeadTimeCb(parser.manifest, index);\n    }\n    if (this._adCb) {\n      this._adCb(parser.adsInfos);\n    }\n  }\n\n  _parseThumbnailPlaylist(parser, userdata) {\n    if (this._thumbnailCb) {\n      this._thumbnailCb([], parser, userdata);\n    }\n  }\n\n  _parseVttPlaylist(result, userdata) {\n    let index = userdata.index;\n    let time = userdata.time;\n    let baseTime = userdata.baseTime;\n    let requestTime = userdata.requestTime;\n\n    let thumbnails = {\n      'images': [],\n      'baseTime': baseTime,\n      'requestTime': time,\n      'streamId': index\n    };\n    if (this._thumbnailImageCb) {\n      if (result.cues && result.cues.length > 0) {\n        for (let i = 0; i < result.cues.length; i++) {\n          let parts = result.cues[i].text.split('#xywh=');\n          if (parts != null && parts.length === 2) {\n            let positions = parts[1].split(',');\n            if (positions == null || positions.length !== 4) {\n              continue;\n            }\n            let image = {\n              'url': this.getAbsUrl(parts[0]),\n              'startTime': baseTime + result.cues[i].startTime,\n              'endTime': baseTime + result.cues[i].endTime,\n              'topX': positions[0],\n              'topY': positions[1],\n              'width': positions[2],\n              'height': positions[3]\n            };\n            thumbnails.images.push(image);\n          }\n        }\n        this._thumbnailImageCb(thumbnails, requestTime);\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/HlsPlaylistParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 475,
    "kind": "class",
    "name": "HlsPlaylistParser",
    "memberof": "src/Media/HlsPlaylistParser.js",
    "static": true,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/HlsPlaylistParser.js",
    "importStyle": "HlsPlaylistParser",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 476,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 477,
    "kind": "member",
    "name": "_playHeadTimeCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_playHeadTimeCb",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "_errorCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_errorCb",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "_thumbnailCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_thumbnailCb",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "_thumbnailImageCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_thumbnailImageCb",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "_adCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_adCb",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "_masterUrl",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_masterUrl",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "_baseUrl",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_baseUrl",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "_levelUrl",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_levelUrl",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "_levelRedundantUrls",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_levelRedundantUrls",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "_levelIndex",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_levelIndex",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "_ccInfos",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_ccInfos",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "loadPlaylist",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#loadPlaylist",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "loadVtts",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#loadVtts",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "setPlayHeadCB",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#setPlayHeadCB",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "playHeadTimeCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 509,
    "kind": "method",
    "name": "setErrorCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#setErrorCb",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "errorCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "setThumbnailCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#setThumbnailCb",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "thumbnailCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "setThumbnailImageCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#setThumbnailImageCb",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "thumbnailImageCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "setAdStitchCb",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#setAdStitchCb",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "adCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "getAbsUrl",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#getAbsUrl",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "getLevelUrl",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#getLevelUrl",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "getHlsCC",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#getHlsCC",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "descript",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "_parseMasterPlaylist",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_parseMasterPlaylist",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "parser",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "_parseLevelPlaylist",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_parseLevelPlaylist",
    "access": "private",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "params": [
      {
        "name": "parser",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "_parseThumbnailPlaylist",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_parseThumbnailPlaylist",
    "access": "private",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "params": [
      {
        "name": "parser",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "_parseVttPlaylist",
    "memberof": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/HlsPlaylistParser.js~HlsPlaylistParser#_parseVttPlaylist",
    "access": "private",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "src/Media/ID3.js",
    "content": "\nimport * as StringUtil from '../Utils/String'\n\nexport class ID3 {\n    constructor(data) {\n        this._dict = {};\n        this._hasTimeStamp = false;\n        let offset = 0;\n        let byte1;\n        let byte2;\n        let byte3;\n        let byte4;\n        let tagSize;\n        let endPos;\n        let header;\n        let len;\n        do {\n            header = this._readUTF(data, offset, 3);\n            offset += 3;\n            // first check for ID3 header\n            if (header === 'ID3') {\n                // skip 24 bits\n                offset += 3;\n                // retrieve tag(s) length\n                byte1 = data[offset++] & 0x7f;\n                byte2 = data[offset++] & 0x7f;\n                byte3 = data[offset++] & 0x7f;\n                byte4 = data[offset++] & 0x7f;\n                tagSize = (byte1 << 21) + (byte2 << 14) + (byte3 << 7) + byte4;\n                endPos = offset + tagSize;\n\n                // read ID3 tags\n                this._parseID3Frames(data, offset, endPos);\n                offset = endPos;\n            } else if (header === '3DI') {\n                // http://id3.org/id3v2.4.0-structure chapter 3.4.   ID3v2 footer\n                offset += 7;\n                offset = endPos;\n            } else {\n                offset -= 3;\n                len = offset;\n                if (len) {\n                    if (!this._hasTimeStamp) {\n                        // ID3 tag found, but no timestamp\n                    }\n                    this._length = len;\n                    this._payload = data.subarray(0, len);\n                }\n                return;\n            }\n        } while (offset < endPos);\n    }\n\n    _readUTF(data, start, len) {\n        let result = '';\n        let offset = start;\n        let end = start + len;\n        do {\n            result += String.fromCharCode(data[offset++]);\n        } while (offset < end);\n        return result;\n    }\n\n    _getFrameSize(data, offset) {\n        let size = 0;\n        size = ((data[offset] & 0x7f) << 21);\n        size |= ((data[offset + 1] & 0x7f) << 14);\n        size |= ((data[offset + 2] & 0x7f) << 7);\n        size |= (data[offset + 3] & 0x7f);\n        return size;\n    }\n\n    _decodeTextFrame(frame, offset, type, size) {\n        if (size < 2) {\n            return null;\n        }\n\n        if (type === 'TXXX') {\n            /*\n            Format:\n            [0]   = {Text Encoding}\n            [1-?] = {Description}\\0{Value}\n            */\n            let index = 1;\n            let description = StringUtil.utf8ArrayToStr(frame.subarray(offset + index));\n\n            index += description.length + 1;\n            let value = StringUtil.utf8ArrayToStr(frame.subarray(offset + index));\n\n            return { info: description, data: value };\n        } else {\n            /*\n            Format:\n            [0]   = {Text Encoding}\n            [1-?] = {Value}\n            */\n            let text = StringUtil.utf8ArrayToStr(frame.subarray(offset + 1));\n            return { info: '', data: text };\n        }\n    }\n\n    _decodeURLFrame(frame, offset, type, size) {\n        if (type === 'WXXX') {\n            /*\n            Format:\n            [0]   = {Text Encoding}\n            [1-?] = {Description}\\0{URL}\n            */\n            if (size < 2) {\n                return null;\n            }\n\n            let index = 1;\n            let description = StringUtil.utf8ArrayToStr(frame.subarray(offset + index));\n\n            index += description.length + 1;\n            let value = StringUtil.utf8ArrayToStr(frame.subarray(offset + index));\n\n            return { info: description, data: value };\n        } else {\n            /*\n            Format:\n            [0-?] = {URL}\n            */\n            let url = StringUtil.utf8ArrayToStr(frame.data);\n            return { info: '', data: url };\n        }\n    }\n\n    _parseID3Frames(data, offset, endPos) {\n        let tagId;\n        // let tagStart;\n        // let tagLen;\n        // let tagFlags;\n        let timestamp;\n        if (offset + 8 <= endPos) {\n            tagId = this._readUTF(data, offset, 4);\n            offset += 4;\n            this._dict['key'] = tagId;\n            switch (tagId) {\n                case 'GEOB':\n                    // skip tag flags and len;\n                    offset += 7;\n                    if (this._readUTF(data, offset, 15) === 'application/xml') {\n                        offset += 15;\n\n                        offset += 1;\n                        if (this._readUTF(data, offset, 18) === 'substitution.plist') {\n                            offset += 18;\n\n                            offset += 2;\n\n                            let xmlStr = this._readUTF(data, offset, endPos - offset);\n                            offset += endPos - offset;\n                            let parser = new DOMParser();\n                            let xmlDoc = parser.parseFromString(xmlStr, 'application/xml');\n                            if (xmlDoc.getElementsByTagName('dict').length > 1) {\n                                // assert(xmlDoc.getElementsByTagName('dict')[0].childNodes[0].nodeValue === 'ad-list');\n                                let nodes = xmlDoc.getElementsByTagName('dict')[1].childNodes;\n                                let nodeValues = [];\n                                for (let i = 0; i < nodes.length; i++) {\n                                    if (nodes[i].nodeType === 1 && nodes[i].nodeName) { // element type and had the node name\n                                        nodeValues.push({ node: nodes[i].nodeName, value: nodes[i].textContent.trim() });\n                                    }\n                                }\n                                // assert(nodeValues.length % 2 === 0);\n                                for (let j = 0; j < nodeValues.length; j++) {\n                                    let keyIndex = j++;\n                                    // assert(nodeValues[keyIndex].node === 'keyIndex');\n                                    this._dict[nodeValues[keyIndex].value] = nodeValues[j].value;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'PRIV':\n                    // tagLen = data[offset++] << 24 +\n                    //     data[offset++] << 16 +\n                    //     data[offset++] << 8 +\n                    //     data[offset++];\n\n                    // tagFlags = data[offset++] << 8 +\n                    //     data[offset++];\n\n                    // tagStart = offset;\n\n                    // owner should be 'com.apple.streaming.transportStreamTimestamp'\n                    if (this._readUTF(data, offset, 44) === 'com.apple.streaming.transportStreamTimestamp') {\n                        offset += 44;\n                        // smelling even better ! we found the right descriptor\n                        // skip null character (string end) + 3 first bytes\n                        offset += 4;\n\n                        // timestamp is 33 bit expressed as a big-endian eight-octet number, with the upper 31 bits set to zero.\n                        let pts33Bit = data[offset++] & 0x1;\n                        this._hasTimeStamp = true;\n\n                        timestamp = ((data[offset++] << 23) +\n                            (data[offset++] << 15) +\n                            (data[offset++] << 7) +\n                            data[offset++]) / 45;\n\n                        if (pts33Bit) {\n                            timestamp += 0x100000000;\n                        }\n                        timestamp = Math.round(timestamp);\n                        this._dict['info'] = timestamp;\n                        this._dict['type'] = 'transportStreamTimestamp';\n                    } else {\n                        this._dict['info'] = this._readUTF(data, offset, endPos - offset - 2);\n                        this._dict['type'] = 'data';\n                    }\n                    break;\n                default:\n                    {\n                        let size = this._getFrameSize(data, offset);\n                        let result = null;\n                        if (tagId[0] === 'T' && endPos > 20) {\n                            result = this._decodeTextFrame(data, 20, tagId, size);\n                        } else if (tagId[0] === 'W' && endPos > 20) {\n                            result = this._decodeURLFrame(data, 20, tagId, size);\n                        } else {\n                            this._dict['info'] = 'Unknown';\n                        }\n                        if (result !== null && this._freeWheelIAB(tagId, result) === false) {\n                            this._dict['info'] = result.info;\n                            this._dict['data'] = result.data;\n                        }\n                    }\n                    break;\n            }\n        }\n    }\n\n    _freeWheelIAB(tagId, tit) {\n        let freeWheelAd = false;\n        if (tagId === 'TIT2' || tagId === 'TIT3') {\n            let freeWheelReg = new RegExp('.*(fw_(.*)_(firstQuartile|midPoint|thirdQuartile|complete|defaultImpression|default))');\n            let result = freeWheelReg.exec(tit.data);\n            if (result) {\n                this._dict['id'] = result[2];\n                this._dict['adType'] = result[3];\n                this._dict['value'] = result[0]; // keep same with ios, for example, keep the '_' in _fw_9529098_318_defaultImpression.\n                freeWheelAd = true;\n            }\n        }\n        return freeWheelAd;\n    }\n\n    dict() {\n        return this._dict;\n    }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/ID3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "class",
    "name": "ID3",
    "memberof": "src/Media/ID3.js",
    "static": true,
    "longname": "src/Media/ID3.js~ID3",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/ID3.js",
    "importStyle": "{ID3}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 530,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "_dict",
    "memberof": "src/Media/ID3.js~ID3",
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_dict",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "_hasTimeStamp",
    "memberof": "src/Media/ID3.js~ID3",
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_hasTimeStamp",
    "access": "private",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "_length",
    "memberof": "src/Media/ID3.js~ID3",
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_length",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "_payload",
    "memberof": "src/Media/ID3.js~ID3",
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_payload",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "_readUTF",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_readUTF",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "_getFrameSize",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_getFrameSize",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "_decodeTextFrame",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_decodeTextFrame",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"info\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "_decodeURLFrame",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_decodeURLFrame",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"info\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "_parseID3Frames",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_parseID3Frames",
    "access": "private",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      },
      {
        "name": "endPos",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 541,
    "kind": "method",
    "name": "_freeWheelIAB",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#_freeWheelIAB",
    "access": "private",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [
      {
        "name": "tagId",
        "types": [
          "*"
        ]
      },
      {
        "name": "tit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "method",
    "name": "dict",
    "memberof": "src/Media/ID3.js~ID3",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/ID3.js~ID3#dict",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "file",
    "name": "src/Media/NLError.js",
    "content": "/** \n * @class NLError\n */\nexport class NLError {\n  constructor() {\n    this.code = 0;\n    this.level = NLError.SeverityLevel.All;\n    this.message = '';\n    this.nativeMessage = '';\n    this.url = '';\n    this.httpCode = 0;\n    this.nativeCode = 0;\n  }\n\n  static create(code, level, url, message, nativeCode) {\n    let error = new NLError();\n    error.code = code;\n    error.level = level;\n    error.url = url;\n    error.nativeMessage = message;\n    error.nativeCode = nativeCode;\n    if (typeof (code) === 'number') {\n      let tempStatus = code % 1000;\n      if (tempStatus >= 400 && tempStatus < 600) {\n        error.httpCode = tempStatus;\n      }\n    }\n    let ProbeErrorItem = NLError.ErrorCodeString().filter(function (item) {\n      if (code >= item.value && code < item.value + 1000) {\n        return true;\n      }\n    }).pop();\n    if (ProbeErrorItem && ProbeErrorItem.name) {\n      error.message = ProbeErrorItem.name.replace(/_/g, ' ');\n    }\n    return error;\n  }\n\n  isValid() {\n    return this.code >= NLError.Code.Device_Related_Error;\n  }\n\n  clone(code, level, url, message) {\n    this.code = code;\n    this.level = level;\n    this.url = url;\n    this.nativeMessage = message;\n    if (typeof (code) === 'number') {\n      let tempStatus = code % 1000;\n      if (tempStatus >= 400 && tempStatus < 600) {\n        this.httpCode = tempStatus;\n      }\n    }\n    let ProbeErrorItem = NLError.ErrorCodeString().filter(function (item) {\n      if (code >= item.value && code < item.value + 1000) {\n        return true;\n      }\n    }).pop();\n    if (ProbeErrorItem && ProbeErrorItem.name) {\n      this.message = ProbeErrorItem.name.replace(/_/g, ' ');\n    }\n  }\n\n  toJSON() {\n    return {\n      'errorCode': this.code,\n      'errorLevel': this.level,\n      'errorUrl': this.url,\n      'errorNativeMessage': this.nativeMessage,\n      'errorMsg': this.message,\n      'errorHttpCode': this.httpCode,\n      'errorNativeCode': this.nativeCode\n    }\n  }\n\n  compare(other) {\n    return (this.errorLevel === other.errorLevel) && (this.code === other.code) && (this.url === other.url) && (this.nativeMessage === other.nativeMessage);\n  }\n}\n\n/**\n * Severity level of Error\n * @readonly\n * @enum {number}\n * @static\n * @type NLError.SeverityLevel\n */\nNLError.SeverityLevel = {\n  None: 0,\n  Fatal: 1,\n  Error: 2,\n  Warning: 3,\n  Info: 4,\n  All: 15\n}\n\n/**\n * Error codes\n * @readonly\n * @enum {number}\n * @static\n * @type NLError.Code\n */\nNLError.Code = {\n  Device_Related_Error: 10000,\n  Incompatible_Codecs_Error: 10005,\n  DRM_Not_Supported: 10031,\n  DRM_Init_Failed: 10032,\n  // Playready_Not_Supported: 10031,\n  // Widewine_Not_Supported: 10032,\n  // FairPlay_Not_Supported: 10033,\n  Platform_Not_Supported: 10040,\n  // MediaSource_Error: 10050,\n  // MediaElement_Error: 10060,\n\n  Manifest_Related_Error: 20000,\n  Manifest_Not_For_LTE: 20001,\n  Get_Primary_Manifest_Failed: 21000,\n  Get_Single_Bitrate_Manifest_Failed: 22000,\n\n  KeyOrLicense_Related_Error: 30000,\n  Get_Key_License_Failed: 31000,\n  DRM_Module_Error: 32000,\n  DRM_Module_Error_License_Expired: 32001,\n\n  Chunk_Related_Error: 40000,\n  Get_Chunk_Failed: 41000,\n\n  Generic_Error: 50000,\n  Start_Playback_Timeout: 51000,\n  Seek_Timeout: 52000,\n  Playback_Generic_Error: 53000\n}\n\nNLError.ErrorCodeString = function () {\n  let ret = [];\n  for (let name in NLError.Code) {\n    if (!NLError.Code.hasOwnProperty(name)) {\n      continue;\n    } else {\n      ret.push({ 'name': name, 'value': NLError.Code[name] });\n    }\n  }\n  return ret;\n}\n\n/**\n* Detailed network erro code\n* @readonly\n* @enum {number}\n* @static\n* @type NLError.NetworkDetailCode\n*/\nNLError.NetworkDetailCode = {\n  Connect_Failed: 1,\n  Timeout: 2,\n  Security_Error: 51,\n  Cookie_Reject_Error: 403,\n  Http_Error: 404,\n  Manifest_Not_Changed: 600,\n  Content_Error: 800\n}\n\nNLError.Basic = {\n  M3U8: {\n    MANIFEST_LOAD_ERROR: {\n      code: 6010, message: 'Failed to load manifest.'\n    },\n    MANIFEST_PARSING_ERROR: {\n      code: 6020, message: 'Failed to parse manifest.'\n    },\n    GET_PLAYHEADTIME_FAILED: {\n      code: 6030, message: 'Failed to get HLS play head time. (Maybe VOD?)'\n    },\n    GET_THUMBNAIL_FAILED: {\n        code: 6040, message: 'Failed to parse thumbnail manifest.'\n    },\n    GET_VTT_FAILED: {\n        code: 6050, message: 'Failed to get image list.'\n    },\n    PARSE_VTT_FAILED: {\n        code: 6060, message: 'Failed to parse image list.'\n    }\n  },\n  DRM: {\n    // DRM init error\n    NOT_SUPPORTED: {\n      code: 5000, message: 'DRM not supported'\n    },\n    INVALID_PARAMS: {\n      code: 5010, message: 'Invalid or missing parameters.'\n    },\n    KEY_SESSION_CREATE_ERROR: {\n      code: 5020, message: 'MediaKey session cannot be created.'\n    },\n    KEY_ERROR: {\n      code: 5021, message: 'MediaKey session error.'\n    },\n    CERTIFICATE_ERROR: {\n      code: 5030, message: 'Certificate error.'\n    },\n    CERTIFICATE_OVERFLOW_ERROR: {\n      code: 5031, message: 'Certificate overflow.'\n    },\n    // get license error\n    LICENSE_ERROR: {\n      code: 5040, message: 'License error.'\n    }\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/NLError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 544,
    "kind": "class",
    "name": "NLError",
    "memberof": "src/Media/NLError.js",
    "static": true,
    "longname": "src/Media/NLError.js~NLError",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Media/NLError.js",
    "importStyle": "{NLError}",
    "description": "",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NLError"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 545,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/NLError.js~NLError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "code",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#code",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "member",
    "name": "level",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#level",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "message",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#message",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "nativeMessage",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#nativeMessage",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "url",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#url",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "httpCode",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#httpCode",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "nativeCode",
    "memberof": "src/Media/NLError.js~NLError",
    "static": false,
    "longname": "src/Media/NLError.js~NLError#nativeCode",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "create",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/NLError.js~NLError.create",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "nativeCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "isValid",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/NLError.js~NLError#isValid",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "clone",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/NLError.js~NLError#clone",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      },
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/NLError.js~NLError#toJSON",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"errorCode\": *, \"errorLevel\": *, \"errorUrl\": *, \"errorNativeMessage\": *, \"errorMsg\": *, \"errorHttpCode\": *, \"errorNativeCode\": *}"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "compare",
    "memberof": "src/Media/NLError.js~NLError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Media/NLError.js~NLError#compare",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "function",
    "name": "ErrorCodeString",
    "memberof": "src/Media/NLError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Media/NLError.js~ErrorCodeString",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Media/NLError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 565,
    "kind": "file",
    "name": "src/Media/NLTrack.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer';\nimport * as ObjectUtil from '../Utils/Object';\nimport ISO6391 from '../../externals/iso639/iso639-1';\n\n/**\n * @typedef {object} NLTrack\n * @property {boolean} active\n * @property {number} bandwidth\n * @property {number} width\n * @property {number} height\n * @property {number} id\n * @property {string} kind 'VIDEO', 'AUDIO' or 'TEXT'\n * @property {string} language\n * @property {string} name\n * @global\n * @example \n * {\n        active: false,\n        bandwidth: 136,\n        id: 4,\n        kind: 'TEXT',\n        language: 'de',\n        name: 'Home English' <- this is displayname in case of DASH\n    }\n */\nexport class NLTrack {\n  constructor(kind, base, type, data) {\n    this._base = base;\n    this._player = data.player;\n    this._type = type;\n\n    this.kind = kind;\n    this.active = false;\n\n    if (type === AdaptivePlayer.PlayerType.SHAKA) {\n      if (kind === 'VIDEO' ||\n        kind === 'AUDIO' ||\n        (kind === 'TEXT' && data.flag)) {\n        this.active = base.active;\n      }\n      this.language = ISO6391.toISO6392(base.language) || 'Unknown';\n      this.id = base.id || '';\n      this.name = base.displayName || ISO6391.getName(base.language);\n      this.bandwidth = base.videoBandwidth || base.bandwidth || 0;\n\n      // video\n      if (kind === AdaptivePlayer.Kind.VIDEO) {\n        this.width = base.width;\n        this.height = base.height;\n      }\n    } else if (type === AdaptivePlayer.PlayerType.HLSJS) {\n      this.language = base.lang || base.language || 'Unknown';\n      this.name = base.name || base.label || base.language || 'Unknown';\n      this.id = data.id;\n      this.bandwidth = base.bitrate || '';\n\n      // video\n      if ((kind === AdaptivePlayer.Kind.VIDEO && (data.currentLevel === data.id || data.levels.length === 1)) || \n        (kind === AdaptivePlayer.Kind.AUDIO && data.audioTrack === data.id) || \n        (kind === AdaptivePlayer.Kind.TEXT && data.subtitleTrack === data.id)) {\n        this.active = true;\n      }\n      if (kind === AdaptivePlayer.Kind.VIDEO && base.height != null && base.width != null) {\n        this.width = base.width;\n        this.height = base.height;\n      }\n    } else if (type === AdaptivePlayer.PlayerType.NATIVE) {\n      this.language = base.language;\n      this.name = base.label || base.language || 'Unknown';\n      this.id = (this.name === 'CC1') ? 'cc1' : data.id; // cc from dashplayer\n      if (kind === AdaptivePlayer.Kind.VIDEO || kind === AdaptivePlayer.Kind.AUDIO) {\n        if (base.enabled) {\n          this.active = true;\n        }\n      } else {\n        if (!ObjectUtil.isEmpty(data.ccInfos)) {\n          // support only one CC currently\n          for (let prop in data.ccInfos) {\n            this.language = data.ccInfos[prop].lang;\n            this.name = data.ccInfos[prop].name;\n            break;\n          } \n        }\n        if (base.mode === 'showing') {\n          this.active = true;\n        }\n      }\n    } else if (type === AdaptivePlayer.PlayerType.WEBRTC) {\n      this.bandwidth = base || 0;\n      if (data.id === 0) {\n        this.active = true;\n      }\n    } else {\n      // report error\n    }\n  }\n\n  get base() {\n    return this._base;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  select(optClearBuffer) {\n    this._player.selectTrack(this, !!optClearBuffer);\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Media/NLTrack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 566,
    "kind": "typedef",
    "name": "NLTrack",
    "memberof": "src/Media/NLTrack.js",
    "static": true,
    "longname": "src/Media/NLTrack.js~NLTrack",
    "access": "public",
    "description": "",
    "examples": [
      "{\nactive: false,\nbandwidth: 136,\nid: 4,\nkind: 'TEXT',\nlanguage: 'de',\nname: 'Home English' <- this is displayname in case of DASH\n}"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@global",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bandwidth",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "kind",
        "description": "'VIDEO', 'AUDIO' or 'TEXT'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "language",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "NLTrack"
    }
  },
  {
    "__docId__": 567,
    "kind": "file",
    "name": "src/Player/BasicPlayer.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer'\nimport { PlayerBase } from './PlayerBase'\nimport * as UrlUtil from '../Utils/Url'\nimport { ID3 } from '../Media/ID3'\nimport { FakeEvent } from '../Utils/FakeEvent';\nimport { Settings } from '../config';\nimport { NLError } from '../Media/NLError';\nimport HlsPlaylistParser from '../Media/HlsPlaylistParser';\nimport { NLTrack } from '../Media/NLTrack';\nimport { FairPlayDRM } from '../Media/FairPlay/FairPlayDRM'\nimport { EventManager } from '../Manager/EventManager'\nimport * as TimeRangeUtil from '../Utils/TimeRange';\n\nexport default class BasicPlayer extends PlayerBase {\n  constructor(video, parent) {\n    super(video, parent);\n\n    this._url = '';\n\n    this._drmConfig = null;\n    this._ccConfig = { label: 'English', language: 'en' };\n    this._drmManager = null; // For HLS FairPlay\n    this._startTime = null;\n    this._seekToStartTime = false;\n\n    this.type = AdaptivePlayer.PlayerType.NATIVE;\n    this.streamType = AdaptivePlayer.StreamType.HTTP_VIDEO;\n\n    this._useExternalM3U8Parser = Settings.BASICPLAYER.USE_EXTERNAL_M3U8_PARSER;\n    this._hlsPlaylistParser = null;\n\n    this._gapToLiveEdge = 0; // in seconds\n    this._gapToDVREnd = 0; // in seconds\n    this._dvrDuration = null;\n\n    this._thumbnailsStreams = [];\n    this._thumbnailImagesCb = null;\n\n    this._advertisements = [];\n    this._emptyAdvertisements = [];\n    this._adBeginTime = null;\n    this._playlistUpdateTimer = null;\n    this._timeToleranceMs = 200;\n    this._adStatistics = {};\n    this._lastAdvertise = null;\n\n    this._timeline = {\n        init: false,\n        targetDuration: 0,\n        absStart: 0,\n        curAbsStart: 0,\n        curAbsEnd: 0,\n        timeRanges: []\n    };\n\n    this._levelResquestIndex = 0;\n    this._levelResponseIndex = 0;\n    this._lastUpdateTime = 0;\n\n    this._seekEnded = true;\n    this._state = 'stop';\n    this.vodType = 'vod';\n\n    this._thumbnailTimeScale = 1000;\n\n    this.print(AdaptivePlayer.LogLevel.INFO, 'BasicPlayer', 'Instance created!');\n  }\n\n  destroy() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'destroy called!');\n\n    this.unload();\n\n    // destroy FairPlay handler\n    if (this._drmManager) {\n      this._drmManager.destroy();\n    }\n\n    return Promise.resolve();\n  }\n\n  configure(config) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'configure called!');\n\n    this._config = config;\n    if (config) {\n      if (config.useExternalM3U8Parser) {\n        this._useExternalM3U8Parser = config.useExternalM3U8Parser;\n      }\n      if (config.drm) {\n        this._drmConfig = config.drm;\n      }\n\n      if (config.preferredAudioLanguage) {\n        this._config.preferredAudioLanguage = config.preferredAudioLanguage.toLowerCase();\n      }\n      if (config.preferredTextLanguage) {\n        this._config.preferredTextLanguage = config.preferredTextLanguage.toLowerCase();\n      }\n\n      if (this._config.closedCaption) {\n        if (this._config.closedCaption.label) {\n          this._ccConfig.label = config.closedCaption.label;\n        }\n        if (this._config.closedCaption.language) {\n          this._ccConfig.language = config.closedCaption.language;\n        }\n      }\n    }\n  }\n\n  load(url, startTime) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'load called!');\n\n    this._url = url;\n    if (UrlUtil.getExtension(url) === 'm3u8' || UrlUtil.getExtension(url) === 'm3u') {\n      this.streamType = AdaptivePlayer.StreamType.HLS;\n    } else {\n      this.streamType = AdaptivePlayer.StreamType.HTTP_VIDEO;\n    }\n\n    if (this.streamType === AdaptivePlayer.StreamType.HLS) {\n      // get #EXT-X-PROGRAM-DATE-TIME\n      // Need to check it anyway, can't tell live or vod at this momont\n      // in case of vod, will return (0, 0)\n      // One-time token not supported\n      if (this._useExternalM3U8Parser) {\n        this._hlsPlaylistParser = new HlsPlaylistParser();\n        this._hlsPlaylistParser.setErrorCb(this._onError.bind(this));\n        this._hlsPlaylistParser.setPlayHeadCB(this._onPlayHeadTimeCallback.bind(this));\n        this._hlsPlaylistParser.setThumbnailCb(this._onThumbnailCallback.bind(this));\n        this._hlsPlaylistParser.setThumbnailImageCb(this._onThumbnailImageCallback.bind(this));\n        this._hlsPlaylistParser.setAdStitchCb(this._onAdsInfosCallback.bind(this));\n        this._hlsPlaylistParser.loadPlaylist(url, { type: 'master' });\n      }\n\n      // drm manager\n      if (this._drmConfig &&\n        this._drmConfig.fairplay &&\n        this._drmConfig.fairplay.server &&\n        this._drmConfig.fairplay.serverCertificate) {\n        if (!this._drmManager) {\n          this._drmManager = new FairPlayDRM();\n        }\n        if (this._drmManager) {\n          this._drmManager.configure(\n            this._drmConfig.fairplay.server,\n            this._drmConfig.fairplay.serverCertificate,\n            this._drmConfig.params);\n          this._drmManager.init(this._video, this._onError.bind(this));\n        }\n      }\n    }\n\n    this._eventManager = new EventManager();\n\n    // for ID3 extraction\n    if (this._video.textTracks) { // IE9 don't have textTracks\n      if (this._video.textTracks.addEventListener) {\n        this._eventManager.listen(this._video.textTracks, 'addtrack', this._onTextTrackAdded.bind(this));\n      } else {\n        // the safari native way\n        this._video.textTracks.onaddtrack = this._onTextTrackAdded.bind(this);\n      }\n    }\n\n    // For basic player ProfileChange triggered by loadedmetadata on IE11 (without video.onresize)\n    if (AdaptivePlayer.browserType.match(/IE/i) !== null) {\n      this._eventManager.listen(this._video, 'loadedmetadata', function (evt) {\n        this.notifyProfileChanged({\n          id: 0,\n          videoHeight: evt.target.videoHeight,\n          videoWidth: evt.target.videoWidth\n        })\n      }.bind(this));\n    }\n\n    // https://jira.neulion.com/browse/NFL-854\n    let playbackUrl = url;\n    if (!startTime || startTime < 0) {\n      startTime = 0;\n    }\n\n    if (startTime > 0) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'load called set startTime=' + startTime);\n      if (AdaptivePlayer.browserType.match(/.*Safari.*/i) === null) {\n        playbackUrl = url + '#t=' + startTime;\n        this._startTime = startTime;\n        this._eventManager.listen(this._video, 'loadedmetadata', function () {\n          this._seekToStartTime = true;\n          this.currentTime = this._startTime;\n          // best practices of https://developers.google.com/web/updates/2017/09/autoplay-policy-changes\n          let promise = this._video.play();\n          if (promise != null) {\n            promise.then(function () {\n              // Autoplay started!\n              this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'auto play started!');\n              this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AutoPlayStatus, { details: { autoplay: true } }));\n            }.bind(this)).catch(function () {\n              // Autoplay was prevented.\n              // Show a \"Play\" button so that user can start playback.\n              this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'auto play prevented!');\n              this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.AutoPlayStatus, { details: { autoplay: false } }));\n            }.bind(this));\n          }\n        }.bind(this));\n      } else {\n        this._startTime = startTime;\n        this._eventManager.listen(this._video, 'loadedmetadata', function () {\n          this._video.currentTime = startTime;\n        }.bind(this));\n      }\n      this._video.pause();\n    }\n    this._video.src = playbackUrl;\n    // For autoplay on mobile safari\n    // if (this._video.autoplay)\n    //  (this._video.play() || nopromise).catch(function () { });\n\n    return Promise.resolve();\n  }\n\n  isLive() {\n    return (this._video.duration === Infinity);\n  }\n\n  gotoLive() {\n    if (this.isLive()) {\n      let relEndLimit = this._getRelEndLimit();\n      let endLimit = TimeRangeUtil.relTimeToAbsTime(relEndLimit, this._timeline.timeRanges, this._timeline.absStart);\n      if (endLimit > this.currentTime) {\n        this.currentTime = endLimit;\n      }\n    }\n  }\n\n  unload() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'unload called!');\n\n    this._useExternalM3U8Parser = Settings.BASICPLAYER.USE_EXTERNAL_M3U8_PARSER;\n    this._hlsPlaylistParser = null;\n    this._gapToLiveEdge = 0;\n    this._gapToDVREnd = 0;\n    this._startTime = null;\n    this._seekToStartTime = false;\n    this._thumbnailsStreams = [];\n    this._thumbnailImagesCb = null;\n\n    if (this._playlistUpdateTimer) {\n      clearTimeout(this._playlistUpdateTimer);\n      this._playlistUpdateTimer = null;\n    }\n    this._timeToleranceMs = 200;\n    this._advertisements = [];\n    this._emptyAdvertisements = [];\n    this._adBeginTime = null;\n    this._adStatistics = {};\n    this._lastAdvertise = null;\n    this._adTimer = null;\n    this.vodType = 'vod';\n\n    this._timeline = {\n        init: false,\n        targetDuration: 0,\n        absStart: 0,\n        curAbsStart: 0,\n        curAbsEnd: 0,\n        timeRanges: []\n    };\n\n    this._state = 'stop';\n\n    this._levelResquestIndex = 0;\n    this._levelResponseIndex = 0;\n    this._lastUpdateTime = 0;\n    this._thumbnailTimeScale = 1000;\n\n    if (this._eventManager) {\n      this._eventManager.destroy();\n    }\n\n    if (this._drmManager) {\n      this._drmManager.reset();\n    }\n\n    if (!this._video.textTracks) { // For IE9\n      return;\n    }\n\n    // stop video playback\n    if (this._video.textTracks.removeEventListener) {\n      this._video.textTracks.removeEventListener('addtrack', this._onTextTrackAdded.bind(this));\n    } else {\n      this._video.textTracks.onaddtrack = null;\n    }\n\n    for (let i = 0; i < this._video.textTracks.length; i++) {\n      let track = this._video.textTracks[i];\n      if (track.kind === 'metadata') {\n        // the safari native way\n        track.oncuechange = null;\n      }\n    }\n\n    if (this._video && this._video.src !== '' && this._video.readyState >= 2) {\n      this._video.currentTime = 0;\n      this._video.src = '';\n    }\n\n    return Promise.resolve();\n  }\n\n  audioTracks() {\n    let tracks = [];\n    if (this._video.audioTracks) {\n      for (let i = 0; i < this._video.audioTracks.length; i++) {\n        let base = this._video.audioTracks[i];\n        if (base.label !== '' || base.language !== '') {\n          tracks.push(new NLTrack(AdaptivePlayer.Kind.AUDIO, base, AdaptivePlayer.PlayerType.NATIVE, {\n            id: i,\n            player: this._video\n          }));\n        }\n      }\n    }\n    return tracks;\n  }\n\n  ccTracks() {\n    let ccTracks = [];\n    for (let i = 0; i < this._video.textTracks.length; i++) {\n      let base = this._video.textTracks[i];\n      if (/* base.mode !== 'disabled' && */ (base.kind === 'captions' || base.kind === 'subtitles') &&\n        base.label !== Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME) {\n        ccTracks.push(base);\n      }\n    }\n    return ccTracks;\n  }\n\n  textTracks() {\n    let tracks = [];\n    for (let i = 0; i < this._video.textTracks.length; i++) {\n      let base = this._video.textTracks[i];\n      if ((base.kind === 'captions' || base.kind === 'subtitles') &&\n          /* base.mode !== 'disabled' && */\n          base.label !== Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME && \n          base.hashId == null /* not tracks created by hls.js */) {\n        tracks.push(new NLTrack(AdaptivePlayer.Kind.TEXT, base, AdaptivePlayer.PlayerType.NATIVE, {\n          id: i,\n          player: this,\n          ccInfos: (this._hlsPlaylistParser ? this._hlsPlaylistParser.getHlsCC() : null)\n        }));\n      }\n    }\n    return tracks;\n  }\n\n  selectTrack(track) {\n    if (track) {\n      track.active = true;\n      if (track.kind === 'TEXT') {\n        let tracks = this._video.textTracks;\n        for (let i = 0; i < tracks.length; i++) {\n          if (tracks[i].mode !== 'disabled') {\n            tracks[i].mode = 'hidden';\n          }\n        }\n        track.base.mode = 'showing';\n      } else if (track.kind === 'AUDIO') {\n        let tracks = this._video.audioTracks;\n        for (let i = 0; i < tracks.length; i++) {\n          tracks[i].enabled = false;\n        }\n        track.base.enabled = true;\n      }\n    }\n  }\n\n  getThumbnailStreams() {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'getThumbnailStreams!');\n    let thumbnails = [];\n    if (this._hlsPlaylistParser) {\n      for (let i = 0; i < this._thumbnailsStreams.length; i++) {\n        let thumbnail = {\n          id: this._thumbnailsStreams[i].id,\n          width: this._thumbnailsStreams[i].width,\n          height: this._thumbnailsStreams[i].height\n        }\n        thumbnails.push(thumbnail);\n      }\n    }\n    return thumbnails;\n  }\n\n  getThumbnailStreamImages(streamid, time, thumbnailsCb) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'getThumbnailStreamImages!');\n    if (this._hlsPlaylistParser) {\n      if (this._thumbnailImagesCb == null) {\n        this._thumbnailImagesCb = thumbnailsCb;\n      }\n\n      let stream = this._thumbnailsStreams[streamid];\n      if (stream) {\n        let absStart = 0;\n        if (this.isCVodStream()) {\n          time += this._timeline.absStart;\n          absStart = this._timeline.absStart;\n        }\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'getThumbnailStreamImages: time=' + time + ' absStart=' + absStart);\n        if (this.isLive()) {\n          this._hlsPlaylistParser.loadPlaylist(stream.uri, { \n            type: 'thumbnail', \n            index: streamid, \n            time: time, \n            baseTime: 0, \n            requestTime: new Date().getTime()\n          });\n        } else if (this.isCVodStream()) {\n          if (stream.vttCueSegments == null) {\n            this._hlsPlaylistParser.loadPlaylist(stream.uri, {\n              type: 'thumbnail', \n              index: streamid, \n              time: time, \n              baseTime: absStart, \n              requestTime: new Date().getTime()\n            });\n          } else {\n            this._loadVtt(Number(streamid), time);\n          }\n        } else {\n          // is vod\n          if (stream.vttCueSegments == null) {\n            this._hlsPlaylistParser.loadPlaylist(stream.uri, {\n              type: 'thumbnail', \n              index: streamid, \n              time: time, \n              baseTime: 0, \n              requestTime: new Date().getTime()\n            });\n          } else {\n            this._loadVtt(Number(streamid), time);\n          }\n        } \n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'time=' + time + ' absStart=' + absStart);\n      }\n    }\n  }\n\n  notifyPlayStarted() {\n    this._state = 'canplay';\n\n    if (this._timeline && this._timeline.timeRanges.length > 0 && this._timeline.absStart > 0) {\n      let range = {\n        start: this._timeline.absStart,\n        end: this._timeline.timeRanges[this._timeline.timeRanges.length - 1].end,\n        ranges: this._timeline.timeRanges\n      };\n      this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n        details: range,\n        data: range\n      }));\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'Fired SeekRangeChange for CVOD: ' + '[' + JSON.stringify(range) + ']');\n    }\n\n    // select preferred language\n    if (this._config.preferredAudioLanguage) {\n      let foundPreferredAudio = this.audioTracks().filter(function(track) {\n        return track.language === this._config.preferredAudioLanguage;\n      }.bind(this));\n      if (foundPreferredAudio && foundPreferredAudio.length > 0 && !foundPreferredAudio[0].active) {\n        this.selectTrack(foundPreferredAudio[0]);\n      }\n    }\n    if (this._config.preferredTextLanguage) {\n      let foundPreferredText = this.textTracks().filter(function (track) {\n        return track.language === this._config.preferredTextLanguage;\n      }.bind(this));\n      if (foundPreferredText && foundPreferredText.length > 0 && !foundPreferredText[0].active) {\n        this.selectTrack(foundPreferredText[0]);\n      }\n    }\n  }\n\n  get currentTime() {\n    let relCurrentTime = this._video.currentTime;\n    let absTime = TimeRangeUtil.relTimeToAbsTime(relCurrentTime, this._timeline.timeRanges, this._timeline.absStart);\n    if (this.isLive()) {\n      if (this._timeline && this._timeline.curAbsStart && this._timeline.curAbsEnd) {\n        if (relCurrentTime === absTime) {\n          let relEndLimit = TimeRangeUtil.absTimeToRelTime(this._timeline.curAbsEnd, this._timeline.timeRanges, this._timeline.absStart);\n          if (relCurrentTime > relEndLimit) {\n            absTime = this._timeline.curAbsEnd;\n          }\n        }\n      }\n    } else {\n      if (this.vodType === 'cvod') {\n        absTime = this._video.currentTime;\n      }\n    }\n    return absTime;\n  }\n\n  set currentTime(value) {\n    // this._printTimeline();\n    let relTime = TimeRangeUtil.absTimeToRelTime(value, this._timeline.timeRanges, this._timeline.absStart);\n    if (relTime === -1 || this.vodType === 'cvod') {\n      relTime = value;\n    }\n    this._video.currentTime = relTime;\n\n    let tries = 0;\n    let recheck = function() {\n      this._seekEnded = false;\n      if (!this._video) {\n        this._seekEnded = true;\n        return;\n      }\n      if (tries++ >= 1 /* 10 */) {\n        this._seekEnded = true;\n        return;\n      }\n      if (Math.abs(this._video.currentTime - relTime) > 2.0) {\n        this._video.currentTime = relTime;\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'retry times=' + tries + ' currentTime=' + this._video.currentTime + ' relTime=' + relTime);\n        setTimeout(recheck, 100);\n      } else {\n        this._seekEnded = true;\n      }\n    }.bind(this);\n    this._seekEnded = false;\n    setTimeout(recheck, 100);\n    if (this._video) {\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'get time in set=' + this._video.currentTime);\n    }\n  }\n\n  setThumbnailTimeScale(timeScale) {\n    this._thumbnailTimeScale = timeScale;\n  }\n  \n  isCVodStream() {\n    let cvod = false;\n    if (!this.isLive() && this._timeline.absStart !== 0) {\n      cvod = true;\n    }\n    return cvod;\n  }\n\n  _onError(e) {\n    // Error.DRM is error, while Error.M3U8 is warning\n    let mediaError = e.error;\n    let level = mediaError.code >= 6000 ? NLError.SeverityLevel.Warning : NLError.SeverityLevel.Fatal;\n    let errorCode = 0;\n    let url = this._url;\n    switch (mediaError.code) {\n      case NLError.Basic.M3U8.MANIFEST_LOAD_ERROR.code:\n      case NLError.Basic.M3U8.MANIFEST_PARSING_ERROR.code:\n      case NLError.Basic.M3U8.GET_PLAYHEADTIME_FAILED.code:\n        errorCode = NLError.Code.Get_Primary_Manifest_Failed + (e.code ? e.code : NLError.NetworkDetailCode.Content_Error);\n        if (e.code) {\n          if (e.code === 404) { // not found\n            level = NLError.SeverityLevel.Fatal;\n            errorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Http_Error;\n            mediaError.message = '404 from external parser';\n          } else if (e.code === 0) { // browser reject\n            level = NLError.SeverityLevel.Fatal;\n            errorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Connect_Failed;\n            mediaError.message = 'connection error from external parser';\n          } else if (e.code === 403) { // 3rd party cookie block\n            level = NLError.SeverityLevel.Warning;\n            errorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Connect_Failed;\n            mediaError.message = 'connection error from external parser';\n            this._basic_externalParser_403_found = true;\n          }\n        }\n        break;\n\n      case NLError.Basic.M3U8.GET_THUMBNAIL_FAILED.code:\n      case NLError.Basic.M3U8.GET_VTT_FAILED.code:\n      case NLError.Basic.M3U8.PARSE_VTT_FAILED.code:\n        errorCode = NLError.Code.Get_Single_Bitrate_Manifest_Failed;\n        if (e.code) {\n          if (e.code === 404) { // not found\n            level = NLError.SeverityLevel.Warning;\n            errorCode += NLError.NetworkDetailCode.Http_Error;\n            mediaError.message = '404 from external parser';\n          } else if (e.code === 0) { // browser reject\n            level = NLError.SeverityLevel.Warning;\n            errorCode += NLError.NetworkDetailCode.Connect_Failed;\n            mediaError.message = 'connection error from external parser';\n          } else if (e.code === 403) { // 3rd party cookie block\n            level = NLError.SeverityLevel.Warning;\n            errorCode += NLError.NetworkDetailCode.Connect_Failed;\n            mediaError.message = 'connection error from external parser';\n            this._basic_externalParser_403_found = true;\n          } else {\n            errorCode += e.code;\n          }\n        } else {\n          errorCode += NLError.NetworkDetailCode.Content_Error;\n        }\n        break;\n\n      case NLError.Basic.DRM.NOT_SUPPORTED.code:\n        errorCode = NLError.Code.DRM_Not_Supported;\n        break;\n\n      case NLError.Basic.DRM.INVALID_PARAMS.code:\n      case NLError.Basic.DRM.KEY_SESSION_CREATE_ERROR.code:\n      case NLError.Basic.DRM.CERTIFICATE_ERROR.code:\n      case NLError.Basic.DRM.CERTIFICATE_OVERFLOW_ERROR.code:\n        errorCode = NLError.Code.DRM_Init_Failed;\n        break;\n\n      case NLError.Basic.DRM.LICENSE_ERROR.code:\n      case NLError.Basic.DRM.KEY_ERROR.code:\n        errorCode = NLError.Code.Get_Key_License_Failed + (e.code ? e.code : NLError.NetworkDetailCode.Content_Error);\n        break;\n\n      default:\n        break;\n    }\n\n    let errorInfo = NLError.create(errorCode, level, url, mediaError.message);\n    this._statisticManager.reportError(errorInfo);\n    level = mediaError.code >= 6000 ? AdaptivePlayer.LogLevel.WARNING : AdaptivePlayer.LogLevel.ERROR;\n    this.print(level, 'BasicPlayer', 'Fired streaming error: ' + mediaError.message);\n  }\n\n  _onTimeUpdate(event) {\n    // seek range changed event for live stream\n    if (this.isLive()) {\n      if (Date.now() - this._lastUpdateTime > 250) {\n        let range = {\n          start: this._timeline.curAbsStart,\n          end: this._timeline.curAbsEnd,\n          ranges: this._timeline.curTimeRanges\n        };\n        this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n          data: range,\n          details: range\n        }));\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'Fired SeekRangeChange: ' + '[' + JSON.stringify(range) + ']');\n        this._lastUpdateTime = Date.now();\n      }\n    }\n    if (AdaptivePlayer.browserType.match(/.*Safari.*/i) !== null && !this._seekToStartTime &&\n      this._startTime && this._startTime > 0) {\n      if (!this.isLive() || (this.isLive() && this._timeline.init && this._state === 'canplay')) {\n        this._seekToStartTime = true;\n        this.currentTime = this._startTime;\n        // this._video.play();\n      }\n    }\n    return Promise.resolve();\n  }\n\n  _onTextTrackAdded(addTrackEvent) {\n    // textTracks function is smart enough to return the shim'd or native implementation\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'addtrack triggered!');\n    // a textTrack typically of kind 'metadata' or 'captions'\n    if (addTrackEvent.track.kind === 'metadata') {\n      let track = addTrackEvent.track;\n      track.mode = 'hidden';\n\n      if (track.addEventListener) {\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'register cuechange event!');\n        // the shim'd (doc'd standard) way\n        track.addEventListener('cuechange', this._cuechange.bind(this));\n      } else {\n        // the safari native way\n        track.oncuechange = this._cuechange.bind(this);\n      }\n    }\n  }\n\n  _onplaylistUpdateTimer() {\n    if (this._hlsPlaylistParser) {\n      let url = this._hlsPlaylistParser.getLevelUrl();\n      if (url) {\n        this._levelResquestIndex += 1;\n        this._hlsPlaylistParser.loadPlaylist(url, {\n          type: 'level', \n          index: this._levelResquestIndex\n        });\n      }\n    }\n  }\n\n  _onPlayHeadTimeCallback(manifest, index) {\n    if (manifest && manifest.endList) {\n      if (manifest.dateTimeStrings.length === 0) {\n        // just return in case of VOD and there are no programe date time\n        this.vodType = 'vod';\n        return;\n      } else {\n        // NeuLion CVOD case\n        // need to get program time to mapping local time to absolute time for thumbnail\n        if (this.vodType === 'cvod') {\n          // already got enough information, just ignore\n          return;\n        }\n        this.vodType = 'cvod';\n      }\n    }\n    if (index !== null && index < this._levelResponseIndex) {\n      return;\n    }\n    this._levelResponseIndex = index;\n\n    this._mergeProgrameTime(manifest);\n\n    if (this.vodType === 'cvod') {\n      // For CVOD case, just need to update once\n      this._onplaylistUpdateTimer();\n    } else {\n      if (this._playlistUpdateTimer == null) {\n        // refresh playlist every targetDuration/2, or 1 seconds in case of not defined\n        let intervalDuration = 1000;\n        if (manifest && manifest.targetDuration && (manifest.targetDuration > 2)) {\n          intervalDuration = manifest.targetDuration * 1000 / 2;\n        }\n        this._playlistUpdateTimer = setInterval(this._onplaylistUpdateTimer.bind(this), intervalDuration);\n      }\n    }\n  }\n\n  _mergeProgrameTime(manifest) {\n    let dateRanges = manifest.dateRanges;\n    let timeline = this._timeline;\n    let targetDurationInM3u = (manifest && manifest.targetDuration) ? manifest.targetDuration : 0;\n    let playlistDurationInM3u = (manifest.dateTimeObjects.length > 0) ? manifest.playlistDuration : 0;\n\n    TimeRangeUtil.mergeProgrameTime(timeline, dateRanges, targetDurationInM3u, playlistDurationInM3u);\n\n    // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'Print dateRange in playlist');\n    // for (let i = 0; i < dateRanges.length; i++) {\n    //   this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'begin=' + dateRanges[i].begin + ' end=' + dateRanges[i].end);\n    // }\n    // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'Print timeline');\n    // for (let i = 0; i < timeRanges.length; i++) {\n    //   this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'begin=' + timeRanges[i].begin + ' end=' + timeRanges[i].end);\n    // }\n  }\n\n  _getRelStartLimit() {\n    return TimeRangeUtil.absTimeToRelTime(this._timeline.curAbsStart, this._timeline.timeRanges, this._timeline.absStart);\n  }\n\n  _getRelEndLimit() {\n    let playlistEnd = TimeRangeUtil.absTimeToRelTime(this._timeline.curAbsEnd, this._timeline.timeRanges, this._timeline.absStart) - 2 * this._timeline.targetDuration;\n    let end = playlistEnd;\n    if (this._video.currentTime > end) {\n      // let bufferedEnd = this._getBufferedEndLimit();\n      end = this._video.currentTime;\n      // if (bufferedEnd > end) {\n      //   end = bufferedEnd;\n      // }\n    }\n    return end;\n  }\n\n  _getBufferedEndLimit() {\n    let max = -1;\n    for (let i = this._video.buffered.length - 1; i >= 0; i--) {\n      if (this._video.buffered.end(i) > max) {\n        max = this._video.buffered.end(i);\n      }\n    }\n    return max;\n  }\n\n  _printTimeline() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'Print timeline:');\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', '\\tabsStart=' + this._timeline.absStart + ' curAbsStart=' + this._timeline.curAbsStart + ' curAbsEnd=' + this._timeline.curAbsEnd);\n    for (let i = this._timeline.timeRanges.length - 1; i >= 0; i--) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', '\\t\\t begin=' + this._timeline.timeRanges[i].begin + ' end=' + this._timeline.timeRanges[i].end);\n    }\n  }\n\n  _onThumbnailCallback(thumbnails, parser, userdata) {\n    if (thumbnails.length > 0 && this._thumbnailsStreams.length <= 0) {\n      // This is MBR parser.\n      this._thumbnailsStreams = thumbnails;\n    } else {\n      // Parse thumbnail playlist\n      if (parser != null && parser.manifest != null && userdata != null) {\n        let index = userdata.index;\n        if (this._thumbnailsStreams.length > 0 && index != null) {\n          let stream = this._thumbnailsStreams[index];\n          if (stream) {\n            if (this.isLive() || stream.vttCueSegments == null) {\n              if (this.isLive() && stream.vttCueSegments) {\n                stream.vttCueSegments = null;\n              }\n              if (parser.manifest && parser.manifest.segments) {\n                stream.vttCueSegments = parser.manifest.segments;\n                // ------------------------------------------------\n                // live/dvr/cvod:\n                //    startTime: abs time from epoch\n                //    endTime: abs time from epoch\n                // vod:\n                //    startTime: time from 0\n                //    endTime: time from 0\n              }\n            }\n            if (userdata.time) {\n              this._loadVtt(index, userdata.time);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _loadVtt(streamid, time) {\n    let cueVtt = this._findVtt(Number(streamid), time);\n    if (cueVtt) {\n      let url = this._hlsPlaylistParser.getAbsUrl(cueVtt.uri);\n      let regex = new RegExp('.*Time=(\\\\d*)\\\\.vtt');\n      let match = regex.exec(url);\n      let baseTime = 0;\n      if (match != null) {\n        baseTime = Number(match[1]) / this._thumbnailTimeScale;\n      }\n      this._hlsPlaylistParser.loadVtts(url, {\n        type: 'vtts', \n        index: Number(streamid), \n        time: time, \n        baseTime: baseTime, \n        requestTime: new Date().getTime() \n      });\n        // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', '_loadVtt: url=' + url + ' time=' + time);\n    }\n  }\n\n  _findVtt(index, time) {\n    let cueVtt = null;\n    let square = Infinity;\n    if (index >= 0 && this._thumbnailsStreams.length > 0 && index < this._thumbnailsStreams.length) {\n      let stream = this._thumbnailsStreams[index];\n      let find = false;\n      if (stream && stream.vttCueSegments) {\n        stream.vttCueSegments.forEach(function(element) {\n          if ((element.beginTime <= time) && (element.endTime >= time)) {\n            cueVtt = element;\n            find = true;\n            return cueVtt;\n          }\n        });\n        if (find === false) {\n          stream.vttCueSegments.forEach(function(squeElem) {\n              let minSquare = Math.pow(squeElem.beginTime - time, 2);\n              let maxSquare = Math.pow(squeElem.endTime - time, 2);\n              let difference = Math.sqrt(minSquare + maxSquare);\n              if (square > difference) {\n                square = difference;\n                cueVtt = squeElem;\n              }\n          });\n        }\n      }\n    }\n    return cueVtt;\n  }\n\n  _onThumbnailImageCallback(thumbnails, requestTime) {\n    if (this._thumbnailImagesCb && thumbnails && thumbnails.images.length > 0) {\n      if (this.isCVodStream()) {\n        let cvodThumbnails = {\n          'images': [],\n          'baseTime': thumbnails.baseTime,\n          'requestTime': thumbnails.requestTime - this._timeline.absStart,\n          'streamId': thumbnails.streamId\n        };\n        for (let i = 0; i < thumbnails.images.length; i++) {\n          if ((thumbnails.images[i].endTime - this._timeline.absStart) >= 0) {\n            if ((thumbnails.images[i].startTime - this._timeline.absStart) >= 0) {\n              thumbnails.images[i].startTime -= this._timeline.absStart;\n              thumbnails.images[i].endTime -= this._timeline.absStart;\n            } else {\n              thumbnails.images[i].startTime = 0;\n              thumbnails.images[i].endTime -= this._timeline.absStart;\n            }\n            cvodThumbnails.images.push(thumbnails.images[i]);\n          }\n        }\n\n        this._thumbnailImagesCb(cvodThumbnails);\n      } else {\n        this._thumbnailImagesCb(thumbnails);\n      }\n    }\n  }\n\n  _onAdsInfosCallback(adsInfos) {\n      this._mergeAdlist(adsInfos);\n  }\n\n  _mergeAdlist(adsInfos) {\n    let beginTime = adsInfos.firstTsBeginTime;\n    let adlist = adsInfos.adTracks;\n    let adEmptyList = adsInfos.adEmptyTracks;\n    let isolateSlotEnd = adsInfos.isolateSlotEnd;\n    let isolateStitchEnd = adsInfos.isolateStitchEnd;\n\n    this._setAdSegmentPremier(beginTime);\n    this._expireAdlist(beginTime);\n\n    do {\n      if (isolateStitchEnd.isolate && this._advertisements.length > 0) {\n        if (this._advertisements[this._advertisements.length - 1].timeline.timeStitchEnd === null) {\n          this._advertisements[this._advertisements.length - 1].timeline.timeStitchEnd = isolateStitchEnd.timeStitchEnd;\n          this._advertisements[this._advertisements.length - 1].lastInStitch = true;\n        }\n      }\n      if (adlist.length === 0 || adlist[0].id === null || adlist[0].getTrackBeginTime() === null) {\n        break;\n      }\n\n      if (this._advertisements.length === 0) {\n        this._advertisements = this._advertisements.concat(adlist);\n        break;\n      }\n\n      let firstSegWithNew = adlist[0];\n      /**\n       * Can not use binary search.\n       *  1. ad id will repeat\n       *  2. range of first ad will change in adstitch m3u8 with time expire.\n       */\n      // let targetSeg = this._binarySearchBegin(firstSegWithNew);\n      let searchInfo = this._searchAdBegin(firstSegWithNew);\n\n      // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'mergeAdlist(Before merge): new adlist length=' + adlist.length);\n      // this._printAdlist('_mergeAdlist: before merge. New Ad list', adlist, false);\n\n      // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'mergeAdlist(Before merge): length=' + this._advertisements.length);\n      // this._printAdlist('_mergeAdlist: before merge. Local Ad list', this._advertisements, false);\n\n      if (searchInfo.find === false) {\n        this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', 'mergeAdlist(Search): not find');\n        if (firstSegWithNew.getTrackBeginTime() <= this._advertisements[0].getTrackBeginTime()) {\n          if (firstSegWithNew.getTrackBeginTime() < this._advertisements[0].getTrackBeginTime()) {\n            this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'mergeAdlist: merge error. m3u8 loop');\n          }\n          this._expireAdlist(-1);\n        } else {\n          if (this._advertisements.length > 0) {\n            let lastSeg = this._advertisements[this._advertisements.length - 1];\n            if (lastSeg.getTrackEndTime()) {\n              if (lastSeg.getTrackEndTime() < firstSegWithNew.getTrackBeginTime()) {\n                this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', 'mergeAdlist: large gap when m3u8 update');\n              } else {\n                this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', 'mergeAdlist: assert(code error in no find branch)');\n                this._expireAdlist(-1);\n              }\n            } else {\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'mergeAdlist: meet a long time advertisement, time than dvrduration');\n              if (isolateSlotEnd.isolate) {\n                lastSeg.setTrackEndTime(isolateSlotEnd.timeSlotEnd);\n              } else {\n                lastSeg.setTrackEndTime(firstSegWithNew.getTrackBeginTime());\n              }\n            }\n          }\n        }\n\n        this._advertisements = this._advertisements.concat(adlist);\n      } else {\n        let targetSeg = searchInfo.targetSeg;\n        let dateBegin = null;\n        let dateEnd = null;\n        if (targetSeg.getTrackBeginTime()) {\n          dateBegin = new Date();\n          dateBegin.setTime(targetSeg.getTrackBeginTime() * 1000);\n        }\n        if (targetSeg.getTrackEndTime()) {\n          dateEnd = new Date();\n          dateEnd.setTime(targetSeg.getTrackEndTime() * 1000);\n        }\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'mergeAdlist(Search): i=' + searchInfo.index + ', id=' + targetSeg.id +\n          ', timeBegin=' + targetSeg.getTrackBeginTime() + '(' + (dateBegin ? dateBegin.toString() : dateBegin) +\n          '), endTime=' + targetSeg.getTrackEndTime() + '(' + (dateEnd ? dateEnd.toString() : dateEnd) + ')');\n\n        let mergeHead = false;\n        for (let i = searchInfo.index; i < this._advertisements.length; i++) {\n          if (adlist.length > 0) {\n            if (adlist[0].id !== this._advertisements[i].id) {\n              this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', 'mergeAdlist: assert(id must same)');\n              break;\n            }\n            if (mergeHead === false) {\n              if (adlist[0].getTrackBeginTime() > this._advertisements[i].getTrackBeginTime()) {\n                adlist[0].setTrackBeginTime(this._advertisements[i].getTrackBeginTime());\n              }\n              mergeHead = true;\n            }\n            if (adlist[0].getTrackBeginTime() === this._advertisements[i].getTrackBeginTime()) {\n              this._advertisements[i].merge(adlist[0]);\n              adlist.shift();\n            } else {\n              this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', 'mergeAdlist: assert(code error in find branch)');\n              break;\n            }\n          }\n        }\n        if (adlist.length > 0) {\n          this._advertisements = this._advertisements.concat(adlist);\n        }\n      }\n\n      this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', '---- mergeAdlist(After merge): length=' + this._advertisements.length + '----------');\n      this._printAdlist('_mergeAdlist: After merge. local Ad list=', this._advertisements, false);\n\n      break;\n    } while (0);\n\n    this._updateAdRanges();\n\n    this._emptyAdvertisements = [];\n    this._emptyAdvertisements = this._emptyAdvertisements.concat(adEmptyList);\n    this._noticeEmptySlice();\n\n    adlist = [];\n  }\n\n  _noticeEmptySlice() {\n    if (this._emptyAdvertisements.length > 0) {\n      let emtypAdvertisements = [];\n      this._emptyAdvertisements.forEach(function(item) {\n        let urls = [];\n        if (item.noticeSlices.slotImpression.length > 0) {\n          urls = urls.concat(item.noticeSlices.slotImpression);\n        }\n        if (item.noticeSlices.slotEnd.length > 0) {\n          urls = urls.concat(item.noticeSlices.slotEnd);\n        }\n        emtypAdvertisements.push({\n          type: 'hls',\n          time: item.timeline.timeEnd, // seconds\n          urls: urls\n        });\n      });\n      this._eventHandler.dispatchEvent(new FakeEvent('emptyAdPost', emtypAdvertisements));\n    }\n  }\n\n  _updateAdRanges() {\n    if (this._advertisements.length > 0) {\n      let adRanges = [];\n      this._advertisements.forEach(function(item) {\n        if (item.id) {\n          adRanges.push({\n            id: item.id,\n            start: item.timeline.timeBegin,\n            end: item.timeline.timeEnd });\n        }\n      });\n\n      this._eventHandler._onAdRangesUpdate(adRanges);\n    }\n  }\n\n  _setAdSegmentPremier(beginTime) {\n    this._adBeginTime = beginTime;\n  }\n\n  _expireAdlist(beginTime) {\n    if (beginTime !== -1) {\n      let index = 0;\n      for (let i = this._advertisements.length - 1; i >= 0; i--) {\n        if (this._advertisements[i].getTrackEndTime() && this._advertisements[i].getTrackEndTime() < this._adBeginTime) {\n          index = i;\n          break;\n        }\n      }\n      // keep a track because we cannot know the stitch end time.\n      index = index - 3;\n      if (index >= 0) {\n        this._advertisements.splice(0, index);\n      }\n    } else {\n      this._advertisements = [];\n    }\n  }\n\n  _searchAdBegin(firstSegWithNew) {\n    let result = { find: false, targetSeg: null, index: -1 };\n    let diff = Number.MAX_VALUE;\n    for (let i = this._advertisements.length - 1; i >= 0; i--) {\n      let seg = this._advertisements[i];\n      if (firstSegWithNew.id === seg.id && firstSegWithNew.getTrackBeginTime() >= seg.getTrackBeginTime()) {\n        if ((seg.getTrackEndTime() === null) || (seg.getTrackEndTime() && firstSegWithNew.getTrackEndTime())) {\n          if ((firstSegWithNew.getTrackBeginTime() - seg.getTrackBeginTime()) < diff) {\n            diff = firstSegWithNew.getTrackBeginTime() - seg.getTrackBeginTime();\n            result.find = true;\n            result.targetSeg = this._advertisements[i];\n            result.index = i;\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  _printAdlist(prefix, advertisements, skip) {\n    if (skip && advertisements.length <= 0) {\n      return;\n    }\n\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', prefix);\n    for (let i = 0; i < advertisements.length; i++) {\n      let dateBegin = null;\n      let dateEnd = null;\n      if (advertisements[i].getTrackBeginTime()) {\n        dateBegin = new Date();\n        dateBegin.setTime(advertisements[i].getTrackBeginTime() * 1000);\n      }\n      if (advertisements[i].getTrackEndTime()) {\n        dateEnd = new Date();\n        dateEnd.setTime(advertisements[i].getTrackEndTime() * 1000);\n      }\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', prefix + '\\tadId=' + advertisements[i].id +\n        ', timeBegin=' + advertisements[i].getTrackBeginTime() + '(' + (dateBegin ? dateBegin.toString() : dateBegin) +\n        '), endTime=' + advertisements[i].getTrackEndTime() + '(' + (dateEnd ? dateEnd.toString() : dateEnd) + ')');\n    }\n  }\n\n  _findAdvertisement(geob, cueStartTime) {\n    let advertise = null;\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n      'trace ad.' + '_findAdvertisement: adId=' + geob.id + ', adType=' + geob.cueType + ', adTime=' + cueStartTime);\n    this._printAdlist('_findAdvertisement', this._advertisements, true);\n    let tolerance = (this._timeToleranceMs / 1000).toFixed(2);\n    for (let i = this._advertisements.length - 1; i >= 0; i--) {\n      let advertisement = this._advertisements[i];\n      if (geob.cueType === 'PreStart') {\n        // do nothing\n      } else if (geob.cueType === 'PostStop' || geob.cueType === 'stop') {\n        if (advertisement.getTrackEndTime() == null) {\n          continue;\n        }\n        let minPostStopBeginTime = advertisement.getTrackEndTime() - tolerance;\n        if (minPostStopBeginTime <= cueStartTime && advertisement.hasHitStarted() && (!advertisement.hasHitCompleted())) {\n          advertise = advertisement;\n          if (geob.id == null) {\n            this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer',\n             'trace ad.' + '_findAdvertisement: stream stop miss. fake stop message');\n          } else {\n            this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n             'trace ad.' + '_findAdvertisement: Receive stream stop.');\n          }\n          break;\n        }\n      } else {\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n          '_findAdvertisement:' + ', playerCurrentTime=' + this.currentTime +\n          ', videoCurrentTime=' + this._video.currentTime);\n        if (advertisement.hitAdTrack(geob.id, cueStartTime, tolerance)) {\n          advertise = advertisement;\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'BasicPlayer', '_findAdvertisement: tarckId=' + geob.id);\n          this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n            '_findAdvertisement: min=' + advertisement.getTrackBeginTime() +\n            ' , max=' + ((advertisement.getTrackEndTime() === null) ? null : (advertisement.getTrackEndTime() + tolerance)) +\n            ', cueStartTime=' + cueStartTime + ', trackId=' + advertisement.id + ', cueId=' + geob.id +\n            ', beginOffset=' + (advertisement.getTrackBeginTime() - cueStartTime) +\n            ', endOffset=' + ((advertisement.getTrackEndTime() === null) ? null : (advertisement.getTrackEndTime() - cueStartTime)) +\n            ', playerCurrentTime=' + this.currentTime + ', cueType=' + geob.cueType);\n          break;\n        }\n      }\n    }\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n      'trace ad.' + '_findAdvertisement: leave _findAdvertisement. tarckId=' + (advertise ? advertise.id : null));\n    return advertise;\n  }\n\n  _cuechange(cueChangeEvent) {\n    let gotCues = cueChangeEvent.currentTarget;\n\n    // fires as we progress through cues; nb the flash player shim double-fires this a frame apart\n    let _theCue = null;\n    // safari is helpful and populates 'activeCues'\n    if (gotCues.activeCues.length) {\n      _theCue = gotCues.activeCues[0];\n    } else {\n      // otherwise, we try detect the active cue, working backwards because in the LIVE scenario cues are being appended\n      // disabled, because we just use basicplayer on safari only, or may trigger twice for a cue\n      /*\n      for(let i=gotCues.cues.length; i--; i>0) {\n          if(gotCues.cues[i].startTime<=this._video.currentTime){\n              _theCue = gotCues.cues[i];\n              break;\n          }\n      }\n      */\n    }\n\n    if (_theCue != null) {\n      // this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'Got ID3: ' + '[' + JSON.stringify(_theCue) + ']');\n      let id3 = null;\n      let validAd = false;\n      let geob = null;\n      if (AdaptivePlayer.browserType === 'Edge') {\n        // edge\n        let bufferArray = new Uint8Array(_theCue.data);\n        id3 = new ID3(bufferArray);\n        if (id3._dict && id3._dict['key'] && id3._dict['key'] === 'GEOB' && this._isValidAdMetadata(id3._dict)) {\n          this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'currentTime=' + this._video.currentTime +\n            'startTime=' + _theCue.startTime + ' endTime=' + _theCue.endTime +\n            'cueType=' + id3._dict.cueType + ' id=' + id3._dict.id);\n          validAd = true;\n          geob = id3._dict;\n        }\n      } else {\n        // safari\n        id3 = _theCue.value['data']['ad-list'] ? _theCue.value['data']['ad-list'][0] : _theCue.value;\n        if (this._isValidAdMetadata(id3)) {\n          validAd = true;\n          geob = id3;\n        }\n      }\n      let cueStartTime = TimeRangeUtil.relTimeToAbsTime(_theCue.startTime ? _theCue.startTime : 0, this._timeline.timeRanges, this._timeline.absStart);\n      if (cueStartTime) {\n        _theCue.startTime = cueStartTime;\n        _theCue.endTime = cueStartTime;\n        _theCue.startTime = _theCue.endTime = cueStartTime;\n        this._cuepointManager.onNativeID3(_theCue);\n\n        // If has multi-programdata, is still right?\n        if (validAd && geob) {\n          this._addAdvertiseCues(cueStartTime, geob);\n        }\n      }\n    }\n  }\n\n  /**\n   * geob: {\n   *     cueType: string,\n   *     duration: number,\n   *     id: string,\n   *     timeLeft: number\n   *   }\n   */\n  _addAdvertiseCues(cueStartTime, geob) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'trace ad.' + '_addAdvertiseCues: geobId=' + geob.id +\n      ', cueType=' + geob.cueType + ', duration=' + geob.duration + ', timeLeft=' + geob.timeLeft +\n      ', cueStartTime=' + cueStartTime);\n\n    let track = this._findAdvertisement(geob, cueStartTime);\n    this.forceEndLastAd(geob, cueStartTime, track);\n    if (track) {\n      let adEvents = this._addCueForTrigger(track, cueStartTime, geob);\n      this._printAdEvent(adEvents);\n      do {\n        if (adEvents.end !== 'multitude') {\n          break;\n        }\n        adEvents = this._addCueForTrigger(track, cueStartTime, geob);\n        this._printAdEvent(adEvents);\n      } while (true);\n      this._lastAdvertise = track;\n      if (geob.cueType === 'keep') {\n        this._createAdTimer();\n      }\n    }\n  }\n\n  forceEndLastAd(geob, cueStartTime, track) {\n    if (this._lastAdvertise) {\n      if ((track == null) || (track && this._lastAdvertise.id !== track.id) || (geob.cueType === 'stop' && geob.id == null)) {\n        let adEvents = this._lastAdvertise.forceEndAdvertisement(cueStartTime);\n        if (adEvents.stage === 1) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'trace ad.' + 'BasicPlayer',\n            'forceEndLastAd: fake stop msg. id=' + this._lastAdvertise.id);\n          this._uploadAdStop(this._lastAdvertise.id);\n          if (adEvents.eventAd.length > 0) {\n            this._postAdvertisement(geob, adEvents);\n          }\n          this._addAdStatistics(this._lastAdvertise.id, adEvents);\n          this._lastAdvertise = null;\n        }\n      }\n    }\n  }\n\n  _printAdEvent(adEvent) {\n    if (adEvent) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n                  'clearAd=' + adEvent.clearAd +\n                  ' stage=' + adEvent.stage +\n                  ' end=' + adEvent.end +\n                  ' defaultClickAd.length=' + adEvent.defaultClickAd.length +\n                  ' trackClickAd.length=' + adEvent.trackClickAd.length +\n                  ' clickAd.length=' + adEvent.clickAd.length +\n                  ' eventAd.length=' + adEvent.eventAd.length);\n      for (let i = adEvent.eventAd.length - 1; i >= 0; i--) {\n         this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'type=' + adEvent.eventAd[i].type +\n            ' urls.length' + adEvent.eventAd[i].urls.length);\n      }\n    }\n  }\n\n  /* adList\n   *    {\n   *       clearAd: false,             // clear click ad\n   *       eventAd: [{type: string,\n   *                  urls: []}],      // start/keep/stop\n   *       defaultClickAd: [],         // ad send when clicked\n   *       trackClickAd: [],           // ad pop when clicked\n   *       clickAd: [],\n   *       stage:   number,\n   *       end: string                 // 'multitude'/'single'/'unknown'\n   *    }\n   */\n  _addCueForTrigger(track, cueStartTime, geob) {\n    let adList = track.getNotices(track.id, cueStartTime, geob, (this._timeToleranceMs / 1000).toFixed(2));\n    if (adList.stage !== -1) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n          'trace ad.' + '_cuechange: stage=' + adList.stage +\n          ', notice length=' + adList.eventAd.length);\n\n      if (adList.stage === 0) {\n        this._uploadAdStart(track.id, adList);\n      }\n      if (adList.stage === 1) {\n        this._uploadAdStop(track.id);\n      }\n\n      if (adList.eventAd.length > 0) {\n        this._postAdvertisement(geob, adList);\n      }\n      this._addAdStatistics(track.id, adList);\n    }\n\n    return adList;\n  }\n\n  _addAdStatistics(id, adList) {\n    if (adList.stage !== -1 && id) {\n      if (this._adStatistics[id] == null) {\n        this._adStatistics[id] = {\n          id: id,\n          startPostNum: 0,\n          firstQuartiledPostNum: 0,\n          midPostNum: 0,\n          thirdQuartiledPostNum: 0,\n          endPostNum: 0,\n          postedEndPostNum: 0,\n\n          startTriggerNum: 0,\n          firstQuartiledTriggerNum: 0,\n          midTriggerNum: 0,\n          thirdQuartiledTriggerNum: 0,\n          endTriggerNum: 0,\n          postedEndTriggerNum: 0\n        };\n      }\n      Object.keys(adList.eventAd).forEach(function(key) {\n        this._addNumber(this._adStatistics[id], adList.stage, adList.eventAd[key].urls.length);\n      }.bind(this));\n    }\n  }\n\n  _printAdStatistics() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n      '_printAdStatistics: adLength=' + Object.keys(this._adStatistics).length);\n    Object.keys(this._adStatistics).forEach(function (key) {\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n        'adId=', this._adStatistics[key].id);\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n        'Post startPostNum=' + this._adStatistics[key].startPostNum +\n        ' firstQuartiled=' + this._adStatistics[key].firstQuartiledPostNum +\n        ' midPostNum=' + this._adStatistics[key].midPostNum +\n        ' thirdQuartiledPostNum=' + this._adStatistics[key].thirdQuartiledPostNum +\n        ' endPostNum=' + this._adStatistics[key].endPostNum +\n        ' postedEndPostNum=' + this._adStatistics[key].postedEndPostNum);\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer',\n        'Trigger startPostNum=' + this._adStatistics[key].startTriggerNum +\n        ' firstQuartiled=' + this._adStatistics[key].firstQuartiledTriggerNum +\n        ' midTriggerNum=' + this._adStatistics[key].midTriggerNum +\n        ' thirdQuartiledTriggerNum=' + this._adStatistics[key].thirdQuartiledTriggerNum +\n        ' endTriggerNum=' + this._adStatistics[key].endTriggerNum +\n        ' postedEndTriggerNum=' + this._adStatistics[key].postedEndTriggerNum);\n    }.bind(this));\n  }\n\n  _addNumber(adStatistic, stage, number) {\n    if (stage === 0) {\n      adStatistic.startPostNum += number;\n      adStatistic.startTriggerNum += 1;\n    }\n    if (stage === 0.25) {\n      adStatistic.firstQuartiledPostNum += number;\n      adStatistic.firstQuartiledTriggerNum += 1;\n    }\n    if (stage === 0.5) {\n      adStatistic.midPostNum += number;\n      adStatistic.midTriggerNum += 1;\n    }\n    if (stage === 0.75) {\n      adStatistic.thirdQuartiledPostNum += number;\n      adStatistic.thirdQuartiledTriggerNum += 1;\n    }\n    if (stage === 1) {\n      adStatistic.endPostNum += number;\n      adStatistic.endTriggerNum += 1;\n    }\n  }\n\n  _uploadAdStart(id, adList) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'trace ad.' + '_uploadAdStart: adId=' + id);\n    let ads = {\n      adid: id,\n      urls: []\n    };\n\n    adList.defaultClickAd.forEach(function (item) {\n      ads.urls.push({ type: 'defaultClick', url: item });\n    });\n\n    adList.trackClickAd.forEach(function (item) {\n      ads.urls.push({ type: 'trackClick', url: item });\n    });\n\n    adList.clickAd.forEach(function (item) {\n      ads.urls.push({ type: 'click', url: item });\n    });\n\n    let adStartEvent = {\n      type: 'ADSTART',\n      data: ads\n    };\n    this._eventHandler._onAdvertisement(adStartEvent);\n  }\n\n  _uploadAdStop(id) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'BasicPlayer', 'trace ad.' + '_uploadAdStop: adId=' + id);\n    let adStopEvent = {\n      type: 'ADEND',\n      data: { adid: id }\n    };\n    this._eventHandler._onAdvertisement(adStopEvent);\n    this._clearAdTimer();\n  }\n\n  _createAdTimer() {\n    this._clearAdTimer();\n    this._adTimer = window.setTimeout(this._uploadAdStopCb.bind(this), 1500);\n  }\n\n  _uploadAdStopCb() {\n    if (this._lastAdvertise) {\n      this.print(AdaptivePlayer.LogLevel.WARNING, 'BasicPlayer', 'trace ad.' + 'ad timeout fake stop: adId=' + this._lastAdvertise.id);\n      this._uploadAdStop(this._lastAdvertise.id);\n    }\n  }\n\n  _clearAdTimer() {\n    if (this._adTimer) {\n      window.clearTimeout(this._adTimer);\n      this._adTimer = null;\n    }\n  }\n\n  _postAdvertisement(geob, adList) {\n    let adPostEvent = {\n      type: 'ADPOST',\n      data: { adid: geob.id, urls: [] }\n    };\n    for (let j = 0; j < adList.eventAd.length; j++) {\n      adList.eventAd[j].urls.forEach(function (item) {\n        adPostEvent.data.urls.push({\n          type: adList.eventAd[j].type,\n          url: item\n        });\n      });\n      this._eventHandler._onAdvertisement(adPostEvent);\n    }\n  }\n\n  _isValidAdMetadata(info) {\n    let isAd = false;\n    if (info['cueType']) {\n      if (info['id']) {\n        // id only in vod file, and add by converter.\n        if ((info['cueType'] === 'start' || info['cueType'] === 'stop' || info['cueType'] === 'keep')) {\n          if (typeof (info['duration']) !== 'undefined' && typeof (info['timeLeft']) !== 'undefined') {\n            isAd = true;\n          }\n        }        \n      }\n      if (info['cueType'] === 'PreStart' || info['cueType'] === 'PostStop' || info['cueType'] === 'stop') {\n        // After as4.3, no longer have 'poststop' .\n        // And with as3, don't check id because no id.\n        isAd = true;\n      }\n    }\n    return isAd;\n  }\n}\n\nBasicPlayer.version = 'v2.0.0';\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Player/BasicPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 568,
    "kind": "class",
    "name": "BasicPlayer",
    "memberof": "src/Player/BasicPlayer.js",
    "static": true,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Player/BasicPlayer.js",
    "importStyle": "BasicPlayer",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Player/PlayerBase.js~PlayerBase"
    ]
  },
  {
    "__docId__": 569,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "_url",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_url",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "_drmConfig",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_drmConfig",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "_ccConfig",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_ccConfig",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"label\": string, \"language\": string}"
      ]
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "_drmManager",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_drmManager",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "_startTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_startTime",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "_seekToStartTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_seekToStartTime",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "type",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#type",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "member",
    "name": "streamType",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#streamType",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "_useExternalM3U8Parser",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_useExternalM3U8Parser",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "member",
    "name": "_hlsPlaylistParser",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_hlsPlaylistParser",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 580,
    "kind": "member",
    "name": "_gapToLiveEdge",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_gapToLiveEdge",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "_gapToDVREnd",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_gapToDVREnd",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "_dvrDuration",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_dvrDuration",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "member",
    "name": "_thumbnailsStreams",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_thumbnailsStreams",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "member",
    "name": "_thumbnailImagesCb",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_thumbnailImagesCb",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 585,
    "kind": "member",
    "name": "_advertisements",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_advertisements",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "member",
    "name": "_emptyAdvertisements",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_emptyAdvertisements",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "member",
    "name": "_adBeginTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_adBeginTime",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 588,
    "kind": "member",
    "name": "_playlistUpdateTimer",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_playlistUpdateTimer",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "member",
    "name": "_timeToleranceMs",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_timeToleranceMs",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "member",
    "name": "_adStatistics",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_adStatistics",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "member",
    "name": "_lastAdvertise",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_lastAdvertise",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "member",
    "name": "_timeline",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_timeline",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{\"init\": *, \"targetDuration\": *, \"absStart\": *, \"curAbsStart\": *, \"curAbsEnd\": *, \"timeRanges\": *}"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "_levelResquestIndex",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_levelResquestIndex",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "member",
    "name": "_levelResponseIndex",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_levelResponseIndex",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "member",
    "name": "_lastUpdateTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_lastUpdateTime",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "_seekEnded",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_seekEnded",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "_state",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_state",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "vodType",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#vodType",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "member",
    "name": "_thumbnailTimeScale",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_thumbnailTimeScale",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#configure",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "_config",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_config",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "load",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#load",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "startTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "gotoLive",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#gotoLive",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "unload",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#unload",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "member",
    "name": "_adTimer",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_adTimer",
    "access": "private",
    "description": null,
    "lineNumber": 259,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "audioTracks",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#audioTracks",
    "access": "public",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "ccTracks",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#ccTracks",
    "access": "public",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "textTracks",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#textTracks",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#selectTrack",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "getThumbnailStreams",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#getThumbnailStreams",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "getThumbnailStreamImages",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#getThumbnailStreamImages",
    "access": "public",
    "description": null,
    "lineNumber": 396,
    "undocument": true,
    "params": [
      {
        "name": "streamid",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "thumbnailsCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "notifyPlayStarted",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#notifyPlayStarted",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "get",
    "name": "currentTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 485,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "set",
    "name": "currentTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 505,
    "undocument": true
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "setThumbnailTimeScale",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#setThumbnailTimeScale",
    "access": "public",
    "description": null,
    "lineNumber": 539,
    "undocument": true,
    "params": [
      {
        "name": "timeScale",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "method",
    "name": "isCVodStream",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#isCVodStream",
    "access": "public",
    "description": null,
    "lineNumber": 543,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "_basic_externalParser_403_found",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_basic_externalParser_403_found",
    "access": "private",
    "description": null,
    "lineNumber": 575,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "_onTimeUpdate",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onTimeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 632,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "_onTextTrackAdded",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onTextTrackAdded",
    "access": "private",
    "description": null,
    "lineNumber": 660,
    "undocument": true,
    "params": [
      {
        "name": "addTrackEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "_onplaylistUpdateTimer",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onplaylistUpdateTimer",
    "access": "private",
    "description": null,
    "lineNumber": 679,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "_onPlayHeadTimeCallback",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onPlayHeadTimeCallback",
    "access": "private",
    "description": null,
    "lineNumber": 692,
    "undocument": true,
    "params": [
      {
        "name": "manifest",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "_mergeProgrameTime",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_mergeProgrameTime",
    "access": "private",
    "description": null,
    "lineNumber": 730,
    "undocument": true,
    "params": [
      {
        "name": "manifest",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "_getRelStartLimit",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_getRelStartLimit",
    "access": "private",
    "description": null,
    "lineNumber": 748,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "_getRelEndLimit",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_getRelEndLimit",
    "access": "private",
    "description": null,
    "lineNumber": 752,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "_getBufferedEndLimit",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_getBufferedEndLimit",
    "access": "private",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "_printTimeline",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_printTimeline",
    "access": "private",
    "description": null,
    "lineNumber": 775,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "_onThumbnailCallback",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onThumbnailCallback",
    "access": "private",
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "params": [
      {
        "name": "thumbnails",
        "types": [
          "*"
        ]
      },
      {
        "name": "parser",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "_loadVtt",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_loadVtt",
    "access": "private",
    "description": null,
    "lineNumber": 818,
    "undocument": true,
    "params": [
      {
        "name": "streamid",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "_findVtt",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_findVtt",
    "access": "private",
    "description": null,
    "lineNumber": 839,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "_onThumbnailImageCallback",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onThumbnailImageCallback",
    "access": "private",
    "description": null,
    "lineNumber": 869,
    "undocument": true,
    "params": [
      {
        "name": "thumbnails",
        "types": [
          "*"
        ]
      },
      {
        "name": "requestTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "_onAdsInfosCallback",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_onAdsInfosCallback",
    "access": "private",
    "description": null,
    "lineNumber": 898,
    "undocument": true,
    "params": [
      {
        "name": "adsInfos",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "_mergeAdlist",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_mergeAdlist",
    "access": "private",
    "description": null,
    "lineNumber": 902,
    "undocument": true,
    "params": [
      {
        "name": "adsInfos",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "_noticeEmptySlice",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_noticeEmptySlice",
    "access": "private",
    "description": null,
    "lineNumber": 1030,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "_updateAdRanges",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_updateAdRanges",
    "access": "private",
    "description": null,
    "lineNumber": 1051,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "_setAdSegmentPremier",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_setAdSegmentPremier",
    "access": "private",
    "description": null,
    "lineNumber": 1067,
    "undocument": true,
    "params": [
      {
        "name": "beginTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "_expireAdlist",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_expireAdlist",
    "access": "private",
    "description": null,
    "lineNumber": 1071,
    "undocument": true,
    "params": [
      {
        "name": "beginTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "_searchAdBegin",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_searchAdBegin",
    "access": "private",
    "description": null,
    "lineNumber": 1090,
    "undocument": true,
    "params": [
      {
        "name": "firstSegWithNew",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "_printAdlist",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_printAdlist",
    "access": "private",
    "description": null,
    "lineNumber": 1110,
    "undocument": true,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "advertisements",
        "types": [
          "*"
        ]
      },
      {
        "name": "skip",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "_findAdvertisement",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_findAdvertisement",
    "access": "private",
    "description": null,
    "lineNumber": 1133,
    "undocument": true,
    "params": [
      {
        "name": "geob",
        "types": [
          "*"
        ]
      },
      {
        "name": "cueStartTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "_cuechange",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_cuechange",
    "access": "private",
    "description": null,
    "lineNumber": 1182,
    "undocument": true,
    "params": [
      {
        "name": "cueChangeEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "_addAdvertiseCues",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_addAdvertiseCues",
    "access": "private",
    "description": "geob: {\n    cueType: string,\n    duration: number,\n    id: string,\n    timeLeft: number\n  }",
    "lineNumber": 1250,
    "params": [
      {
        "name": "cueStartTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "geob",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "forceEndLastAd",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#forceEndLastAd",
    "access": "public",
    "description": null,
    "lineNumber": 1274,
    "undocument": true,
    "params": [
      {
        "name": "geob",
        "types": [
          "*"
        ]
      },
      {
        "name": "cueStartTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "_printAdEvent",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_printAdEvent",
    "access": "private",
    "description": null,
    "lineNumber": 1292,
    "undocument": true,
    "params": [
      {
        "name": "adEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "_addCueForTrigger",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_addCueForTrigger",
    "access": "private",
    "description": null,
    "lineNumber": 1321,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      },
      {
        "name": "cueStartTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "geob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "_addAdStatistics",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_addAdStatistics",
    "access": "private",
    "description": null,
    "lineNumber": 1344,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "adList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "_printAdStatistics",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_printAdStatistics",
    "access": "private",
    "description": null,
    "lineNumber": 1370,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "_addNumber",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_addNumber",
    "access": "private",
    "description": null,
    "lineNumber": 1393,
    "undocument": true,
    "params": [
      {
        "name": "adStatistic",
        "types": [
          "*"
        ]
      },
      {
        "name": "stage",
        "types": [
          "*"
        ]
      },
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "_uploadAdStart",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_uploadAdStart",
    "access": "private",
    "description": null,
    "lineNumber": 1416,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "adList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "_uploadAdStop",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_uploadAdStop",
    "access": "private",
    "description": null,
    "lineNumber": 1442,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "_createAdTimer",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_createAdTimer",
    "access": "private",
    "description": null,
    "lineNumber": 1452,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "_uploadAdStopCb",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_uploadAdStopCb",
    "access": "private",
    "description": null,
    "lineNumber": 1457,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "_clearAdTimer",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_clearAdTimer",
    "access": "private",
    "description": null,
    "lineNumber": 1464,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "_postAdvertisement",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_postAdvertisement",
    "access": "private",
    "description": null,
    "lineNumber": 1471,
    "undocument": true,
    "params": [
      {
        "name": "geob",
        "types": [
          "*"
        ]
      },
      {
        "name": "adList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "_isValidAdMetadata",
    "memberof": "src/Player/BasicPlayer.js~BasicPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/BasicPlayer.js~BasicPlayer#_isValidAdMetadata",
    "access": "private",
    "description": null,
    "lineNumber": 1487,
    "undocument": true,
    "params": [
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "file",
    "name": "src/Player/DashPlayer.js",
    "content": "import * as ShakaPlayer from '../../3rd/shaka-player/dist/shaka-player.compiled'\nimport { AdaptivePlayer } from '../AdaptivePlayer'\nimport { PlayerBase } from './PlayerBase'\nimport * as ObjectUtil from '../Utils/Object'\nimport * as StringUtil from '../Utils/String'\nimport { FakeEvent } from '../Utils/FakeEvent';\nimport { EventManager } from '../Manager/EventManager';\nimport { NLError } from '../Media/NLError';\nimport { NLTrack } from '../Media/NLTrack';\nimport * as UrlUtil from '../Utils/Url'\nimport * as VideoUtil from '../Utils/Video';\nimport { Settings } from '../config'\nimport * as CuesUtil from '../Media/Cues'\nimport { CCExtractor } from '../Media/CCExtractor'\nimport * as PlatformUtil from '../Utils/Platform';\n\nlet ShakaInner = typeof shaka === 'undefined' ? ShakaPlayer : shaka;\nexport default class DashPlayer extends PlayerBase {\n\tconstructor(video, parent) {\n\t\tsuper(video, parent);\n\n\t\t// Promise (for IE11) and other polyfills...\n\t\tShakaInner.polyfill.installAll();\n\n\t\tthis._url = '';\n\n\t\tthis._player = null;\n\t\tthis._playerConfig = {};\n\t\tthis._config = {};\n\t\tthis._ccTrack = null;\n\t\tthis._ccExtractor = null;\n\n\t\tthis._sentSeekRangeForCVODOnce = false;\n\n\t\tthis.type = AdaptivePlayer.PlayerType.SHAKA;\n\t\tthis.streamType = AdaptivePlayer.StreamType.DASH;\n\n\t\tthis.print(AdaptivePlayer.LogLevel.INFO, 'DashPlayer', 'Instance created!');\n\t}\n\n\tdestroy() {\n\t\treturn this.unload().then(function () {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.INFO, 'DashPlayer', 'Instance destroyed!');\n\t\t}.bind(this));\n\t}\n\n\tconfigure(config) {\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'configure called!');\n\n\t\t// the proper value set by experience.\n\t\tlet retryParameters = {\n\t\t\ttimeout: 10000, // timeout in ms, after which we abort a request; 0 means never; default value;\n\t\t\tmaxAttempts: 3, // the maximum number of requests before we fail; three times covers CDN 3s 404 cache.\n\t\t\tbaseDelay: 1000, // the base delay in ms between retries; default value.\n\t\t\tbackoffFactor: 1.5, // the multiplicative backoff factor between retries; 1000, 1000*1.3, 1000*1.3*1.3\n\t\t\tfuzzFactor: 0.5 // the fuzz factor to apply to each retry delay; default value;\n\t\t};\n\t\tthis._playerConfig = ({\n\t\t\tabr: {},\n\t\t\tmanifest: {\n\t\t\t\tretryParameters: retryParameters,\n\t\t\t\tdash: {}\n\t\t\t},\n\t\t\tstreaming: {},\n\t\t\tclosedCaption: {\n\t\t\t\tlabel: 'English',\n\t\t\t\tlanguage: 'en'\n\t\t\t},\n\t\t\tdebugConfig: {}\n\t\t});\n\t\tif (config) {\n\t\t\tif (!!config.debug && ShakaInner.log) {\n\t\t\t\tShakaInner.log.setLevel(ShakaInner.log.Level.DEBUG);\n\t\t\t}\n\t\t\tif (config.drm) {\n\t\t\t\tthis._playerConfig.drm = this._convertDRMConfig(config.drm);\n\t\t\t}\n\t\t\tif (config.abr) {\n\t\t\t\tif (!isNaN(config.abr.enabled)) {\n\t\t\t\t\tthis._playerConfig.abr.enabled = config.abr.enabled;\n\t\t\t\t}\n\t\t\t\tif (config.abr.startBandwidth) {\n\t\t\t\t\tthis._playerConfig.abr.defaultBandwidthEstimate = config.abr.startBandwidth;\n\t\t\t\t}\n\t\t\t\tif (config.abr.startBitrate) {\n\t\t\t\t\tthis._playerConfig.abr.startBitrate = config.abr.startBitrate;\n\t\t\t\t}\n\t\t\t\t// For NDP-2545 Player - Bitrates not going higher when auto is selected.\n\t\t\t\t// can be set in app \n\t\t\t\tif (config.abr.bandwidthUpgradeTarget) {\n\t\t\t\t\tthis._playerConfig.abr.bandwidthUpgradeTarget = config.abr.bandwidthUpgradeTarget;\n\t\t\t\t}\n\t\t\t\tif (config.abr.bandwidthDowngradeTarget) {\n\t\t\t\t\tthis._playerConfig.abr.bandwidthDowngradeTarget = config.abr.bandwidthDowngradeTarget;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.streaming) {\n\t\t\t\tthis._playerConfig.streaming = config.streaming;\n\t\t\t\tif (config.streaming.bufferingGoal == null) {\n\t\t\t\t\tthis._playerConfig.streaming.bufferingGoal = 5; // default 5s\n\t\t\t\t}\n\t\t\t\tif (config.streaming.bufferBehind == null) {\n\t\t\t\t\tthis._playerConfig.streaming.bufferBehind = 5; // default 5s\n\t\t\t\t}\n\t\t\t\tthis._playerConfig.streaming.retryParameters = retryParameters;\n\t\t\t\tif (config.streaming.neulionGapDealing == null) {\n\t\t\t\t\tthis._playerConfig.streaming.neulionGapDealing = false;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(config.streaming.safeEdgeEndSize)) {\n\t\t\t\t\tthis._playerConfig.streaming.safeEdgeEndSize = config.streaming.safeEdgeEndSize;\n\t\t\t\t}\n\t\t\t\tif (!isNaN(config.streaming.safeEdgeBeginSize)) {\n\t\t\t\t\tthis._playerConfig.streaming.safeEdgeBeginSize = config.streaming.safeEdgeBeginSize;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.preferredAudioLanguage) {\n\t\t\t\tthis._playerConfig.preferredAudioLanguage = config.preferredAudioLanguage;\n\t\t\t}\n\t\t\tif (config.preferredTextLanguage) {\n\t\t\t\tthis._playerConfig.preferredTextLanguage = config.preferredTextLanguage;\n\t\t\t}\n\t\t\tif (config.closedCaption) {\n\t\t\t\tthis._playerConfig.closedCaption = config.closedCaption;\n\t\t\t}\n\t\t\tif (config.debugConfig) {\n\t\t\t\tif (config.debugConfig.gapTolerance) {\n\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance = config.debugConfig.gapTolerance;\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.firefox)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.firefox = 0.02;\n\t\t\t\t\t}\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.ie)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.ie = 0.02;\n\t\t\t\t\t}\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.edge)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.edge = 0.02;\n\t\t\t\t\t}\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.chrome)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.chrome = 0.03;\n\t\t\t\t\t}\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.safari)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.safari = 0.02;\n\t\t\t\t\t}\n\t\t\t\t\tif (isNaN(config.debugConfig.gapTolerance.others)) {\n\t\t\t\t\t\tthis._playerConfig.debugConfig.gapTolerance.others = 0.02;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._config = config;\n\t}\n\n\tload(url, startTime) {\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'load called!');\n\n\t\tthis._emptyAdvertisementList = [];\n\n\t\tthis._player = new ShakaInner.Player(this._video);\n\n\t\tthis._sentSeekRangeForCVODOnce = false;\n\t\tthis._ccExtractor = new CCExtractor(this._onClosedCaption.bind(this));\n\n\t\t// register events from Shaka\n\t\t// manage events of video element\n\t\tthis._eventManager = new EventManager();\n\t\tthis._eventManager.listen(this._player, 'error'/* ShakaInner.Player.ErrorEvent */, this._onShakaError.bind(this));\n\t\tthis._eventManager.listen(this._player, 'buffering'/* ShakaInner.Player.BufferingEvent */, this._onShakaBufferingEvent.bind(this));\n\t\tthis._eventManager.listen(this._player, 'trackschanged'/* ShakaInner.Player.TracksChangedEvent */, this._onShakaTracksChanged.bind(this));\n\t\tthis._eventManager.listen(this._player, 'periodschanged'/* ShakaInner.Player.TracksChangedEvent */, this._onShakaPeriodsChanged.bind(this));\n\t\tthis._eventManager.listen(this._player, 'closedcaption'/* ShakaInner.Player.TracksChangedEvent */, this._onClosedCaption.bind(this));\n\t\tthis._eventManager.listen(this._player, 'emsg'/* ShakaInner.Player.EmsgEvent */, this._onEMSG.bind(this));\n\t\tthis._eventManager.listen(this._player, 'advertisement'/* ShakaInner.Player.AdEvent|AdEventPost */, this._onAdvertisement.bind(this));\n\t\tthis._eventManager.listen(this._player, 'emptyAdPost'/* ShakaInner.Player.EmptyAdEventPost */, this._onEmptyAdvertisement.bind(this));\n\t\tthis._eventManager.listen(this._player, 'adRangeUpdate'/* ShakaInner.Player.AdRangesUpdate */, this._onAdRangesUpdate.bind(this));\n\t\tthis._eventManager.listen(this._player, 'adaptation'/* ShakaInner.Player.AdaptationEven */, this._onAdaptation.bind(this));\n\n\t\t// register events\n\t\t['loading', // ShakaInner.Player.LoadingEvent\n\t\t\t'unloading' // ShakaInner.Player.UnloadingEvent\n\t\t\t// 'texttrackvisibility' // ShakaInner.Player.TextTrackVisibilityEvent\n\t\t\t// 'trackschanged', // ShakaInner.Player.TracksChangedEvent\n\t\t\t// 'adaptation', // ShakaInner.Player.AdaptationEvent\n\t\t].forEach(function (event) {\n\t\t\tthis._eventManager.listen(this._player, event, this._onShakaEvent.bind(this));\n\t\t}.bind(this))\n\n\t\t// for closed caption\n\t\tthis._eventManager.listen(this._video, 'loadeddata', function () {\n\t\t\tif (this._eventManager == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._eventManager.listen(this._video, 'seeking', function () {\n\t\t\t\t// reset cc extractor\n\t\t\t\tthis._ccExtractor.resetData();\n\t\t\t\tthis._clearCConReset();\n\t\t\t}.bind(this));\n\t\t\tthis._eventManager.listen(this._video, 'seeked', function () {\n\t\t\t\t// reenable subtitle track\n\t\t\t\tthis._reEnableSubtitleTrack();\n\t\t\t}.bind(this));\n\t\t}.bind(this));\n\n\t\ttry {\n\t\t\tif (AdaptivePlayer.browserType === 'IE' ||\n\t\t\t\tAdaptivePlayer.browserType === 'Edge') {\n\t\t\t\tShakaInner.dash.DashParser.setCustomConfig({\n\t\t\t\t\t'isPlayReady': true\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.ERROR, 'DashPlayer', 'register NeuLion Plugin error!');\n\t\t\treturn Promise.reject(new Error('register NeuLion Plugin error!'));\n\t\t}\n\n\t\t// register filter for crediencials setup and license request\n\t\tthis._player.getNetworkingEngine().registerRequestFilter(this._onLicenseHttpRequest.bind(this));\n\n\t\tlet registerResponseFilter = true;\n\t\tif (this._config && typeof this._config.dashCC === 'boolean' && !this._config.dashCC) {\n\t\t\tregisterResponseFilter = false;\n\t\t}\n\t\tif (registerResponseFilter) {\n\t\t\tthis._player.getNetworkingEngine().registerResponseFilter(this._onSegmentResponse.bind(this));\n\t\t}\n\n\t\tthis._url = url;\n\n\t\tif (!ObjectUtil.isEmpty(this._playerConfig)) {\n\t\t\tthis._player.configure(this._playerConfig);\n\t\t}\n\n\t\t// load with start time\n\t\treturn this._player.load(url, startTime).then(function () {\n\t\t\t// This runs if the asynchronous load is successful.\n\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'The video has now been loaded!');\n\t\t\tif (this._video.paused && this._video.autoplay) {\n\t\t\t\t// While the manifest is being loaded in parallel, go ahead and ask the video\n\t\t\t\t// to play.  This can help with autoplay on Android, since Android requires\n\t\t\t\t// user interaction to play a video and this function is called from a click\n\t\t\t\t// event.  This seems to work only because Shaka Player has already created a\n\t\t\t\t// MediaSource object and set video.src.\n\t\t\t\tthis._video.play();\n\t\t\t}\n\n\t\t\t// Fix #44574\n\t\t\t// Add cc track when find CC tag like <Accessibility schemeIdUri=\"urn:scte:dash:cc:cea-608:2015\" value=\"CC1=eng\"/>\n\t\t\tif (this._player.getCCInfos() !== '') {\n\t\t\t\tif (this._ccTrack == null) {\n\t\t\t\t\tthis._addCCTrack();\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this)).catch(this._onShakaError.bind(this)); // onShakaError is executed if the asynchronous load fails.\n\t}\n\n\tunload() {\n\t\tthis.print(AdaptivePlayer.LogLevel.INFO, 'DashPlayer', 'unload called!');\n\n\t\tif (this._eventManager) {\n\t\t\tthis._eventManager.destroy();\n\t\t}\n\t\tif (this._player) {\n\t\t\tthis._player.unload();\n\n\t\t\tif (this._ccTrack) {\n\t\t\t\t// remove text tracks\n\t\t\t\tthis._clearCConReset();\n\t\t\t\tthis._ccTrack.mode = 'disabled';\n\t\t\t\tthis._ccTrack.hashId = null;\n\t\t\t\tthis._ccTrack = null;\n\t\t\t}\n\n\t\t\t// use this._player.getManifestUri() to detect player destroyed or not\n\t\t\tif (this._player.getManifestUri() != null) {\n\t\t\t\t// clear subtitle after unload\n\t\t\t\t// for firefox workaround: https://github.com/google/shaka-player/issues/1583\n\t\t\t\tif (this._player.setTextTrackVisibility != null) {\n\t\t\t\t\tthis._player.setTextTrackVisibility(false);\n\t\t\t\t}\n\t\t\t\treturn this._player.destroy();\n\t\t\t}\t\t\t\t\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tvideoTracks() {\n\t\tif (!this._player) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet tracks = [];\n\t\tlet variantTracks = this._player.getVariantTracks();\n\t\tif (variantTracks.length === 0) {\n\t\t\ttracks = this._video.videoTracks;\n\t\t} else {\n\t\t\tlet activeTracks = variantTracks.filter(function (track) {\n\t\t\t\treturn track.active === true;\n\t\t\t});\n\t\t\tlet selectedTrack = activeTracks[0];\n\n\t\t\tvariantTracks.forEach(function (track, index) {\n\t\t\t\tif (track.audioId === selectedTrack.audioId) {\n\t\t\t\t\ttracks.push(new NLTrack(AdaptivePlayer.Kind.VIDEO, track, AdaptivePlayer.PlayerType.SHAKA, {\n\t\t\t\t\t\tid: index,\n\t\t\t\t\t\tplayer: this\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t}\n\t\t// sort by bandwidth\n\t\ttracks.sort(function (a, b) {\n\t\t\treturn a.bandwidth - b.bandwidth;\n\t\t});\n\t\treturn tracks;\n\t}\n\n\taudioTracks() {\n\t\tif (!this._player) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet tracks = [];\n\t\tlet variantTracks = this._player.getVariantTracks();\n\t\tif (variantTracks.length === 0) {\n\t\t\ttracks = this._video.audioTracks;\n\t\t} else {\n\t\t\tlet activeTracks = variantTracks.filter(function (track) {\n\t\t\t\treturn track.active === true;\n\t\t\t});\n\t\t\tlet selectedTrack = activeTracks[0];\n\t\t\tlet audioTracks = variantTracks.filter(function (track) {\n\t\t\t\treturn track.videoId === selectedTrack.videoId;\n\t\t\t});\n\t\t\taudioTracks.forEach(function (track, index) {\n\t\t\t\ttracks.push(new NLTrack(AdaptivePlayer.Kind.AUDIO, track, AdaptivePlayer.PlayerType.SHAKA, {\n\t\t\t\t\tid: index,\n\t\t\t\t\tplayer: this\n\t\t\t\t}));\n\t\t\t}.bind(this));\n\t\t}\n\n\t\treturn tracks;\n\t}\n\n\ttextTracks() {\n\t\tif (!this._player) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet tracks = [];\n\n\t\t// Ignore captions and subtitle tracks from shaka player\n\t\t// cause not fully support yet\n\t\tlet nativeTextTracks = this._video.textTracks;\n\t\tlet nativeActive = false;\n\t\tif (nativeTextTracks) {\n\t\t\tfor (let i = 0; i < nativeTextTracks.length; i++) {\n\t\t\t\tlet track = nativeTextTracks[i];\n\t\t\t\tif (track.mode !== 'disabled' &&\n\t\t\t\t\t(track.kind === 'captions' || track.kind === 'subtitles') &&\n\t\t\t\t\ttrack.label !== Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME &&\n\t\t\t\t\ttrack.hashId !== null) {\n\t\t\t\t\tif (track.mode === 'showing') {\n\t\t\t\t\t\tnativeActive = true;\n\t\t\t\t\t}\n\t\t\t\t\t// process cc infos\n\t\t\t\t\tlet ccInfos = {};\n\t\t\t\t\tlet ccString = this._player.getCCInfos();\n\t\t\t\t\tif (ccString !== '') {\n\t\t\t\t\t\tlet items = ccString.split(';'); \n\t\t\t\t\t\titems.forEach(function (item) { \n\t\t\t\t\t\t\tlet vars = item.split('='); \n\t\t\t\t\t\t\tccInfos[vars[0]] = { name: vars[1], lang: 'en' }; \n\t\t\t\t\t\t});\t\n\t\t\t\t\t}\n\t\t\t\t\ttracks.push(new NLTrack(AdaptivePlayer.Kind.TEXT, track, AdaptivePlayer.PlayerType.NATIVE, {\n\t\t\t\t\t\tid: i,\n\t\t\t\t\t\tplayer: this._video,\n\t\t\t\t\t\tccInfos: ccInfos\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet textTracks = this._player.getTextTracks();\n\t\tif (textTracks) {\n\t\t\ttextTracks.forEach(function (track, index) {\n\t\t\t\t// show subtitle when preferred language found\n\t\t\t\tif (!nativeActive && \n\t\t\t\t\t\tthis._playerConfig.preferredTextLanguage === track.language && \n\t\t\t\t\t\ttrack.active && \n\t\t\t\t\t\t!this._player.isTextTrackVisible()) {\n\t\t\t\t\tthis._player.setTextTrackVisibility(true);\n\t\t\t\t}\n\t\t\t\ttracks.push(new NLTrack(AdaptivePlayer.Kind.TEXT, track, AdaptivePlayer.PlayerType.SHAKA, {\n\t\t\t\t\tid: index,\n\t\t\t\t\tplayer: this,\n\t\t\t\t\tflag: this._player.isTextTrackVisible()\n\t\t\t\t}));\n\t\t\t}.bind(this));\n\t\t}\n\n\t\treturn tracks;\n\t}\n\n\tccTracks() {\n\t\tlet ccTracks = [];\n\t\tfor (let i = this._video.textTracks.length - 1; i >= 0; i--) {\n\t\t\tlet base = this._video.textTracks[i];\n\t\t\tif (base.label === Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME ||\n\t\t\t\t(base.label === this._playerConfig.closedCaption.label && base.mode !== 'disabled')) {\n\t\t\t\tccTracks.push(base);\n\t\t\t}\n\t\t}\n\t\treturn ccTracks;\n\t}\n\n\tsetTextTrackVisibility(enabled) {\n\t\tthis._player.setTextTrackVisibility(enabled);\n\t}\n\n\tselectTrack(track, optClearBuffer) {\n\t\tif (track) {\n\t\t\t/* By default, clear buffer when switching audios/subtitles\n\t\t\t\t\tNot clear buffer when switching between bitrates\n\t\t\t*/\n\t\t\tif (optClearBuffer == null) {\n\t\t\t\tif (track.kind === 'AUDIO' || track.kind === 'TEXT') {\n\t\t\t\t\toptClearBuffer = true;\n\t\t\t\t} else if (track.kind === 'VIDEO') {\n\t\t\t\t\toptClearBuffer = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (track.kind === 'AUDIO') {\n\t\t\t\t/** find correct track \n\t\t\t\t * In case of \n\t\t\t\t */\t\n\t\t\t\tlet currentAudioTracks = this.audioTracks();\n\t\t\t\tlet matchAudioTracks = currentAudioTracks.filter(function(item) {\n\t\t\t\t\treturn track.base.audioId === item.base.audioId;\n\t\t\t\t})\n\t\t\t\tif (matchAudioTracks.length > 0) {\n\t\t\t\t\t// use newly updated track\n\t\t\t\t\tif (track.id !== matchAudioTracks[0].id) {\n\t\t\t\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'selectTrack(A): ' + track.id + '->' + matchAudioTracks[0].id);\n\t\t\t\t\t}\n\t\t\t\t\ttrack = matchAudioTracks[0];\n\t\t\t\t}\n\t\t\t\t// only do select when track not active\n\t\t\t\tif (track.active) return; \n\n\t\t\t\t// this._player.configure({ abr: { enabled: false } });\n        this._player.selectAudioLanguage(track.base.language, track.base.displayName);\n\t\t\t\tthis._player.selectVariantTrack(track.base, !!optClearBuffer);\n\t\t\t} else if (track.kind === 'VIDEO') {\n\t\t\t\t/** find correct track */\n\t\t\t\tlet currentVideoTracks = this.videoTracks();\n\t\t\t\tlet matchVideoTracks = currentVideoTracks.filter(function (item) {\n\t\t\t\t\treturn track.base.videoId === item.base.videoId;\n\t\t\t\t})\n\t\t\t\tif (matchVideoTracks.length > 0) {\n\t\t\t\t\t// use newly updated track\n\t\t\t\t\tif (track.id !== matchVideoTracks[0].id) {\n\t\t\t\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'selectTrack(V): ' + track.id + '->' + matchVideoTracks[0].id);\n\t\t\t\t\t}\n\t\t\t\t\ttrack = matchVideoTracks[0];\n\t\t\t\t} \n\t\t\t\t// only do select when track not active\n\t\t\t\tif (track.active) return;\n\n\t\t\t\tthis._player.configure({ abr: { enabled: false } });\n\t\t\t\tthis._player.selectVariantTrack(track.base, !!optClearBuffer);\n\t\t\t\tthis._onAdaptation({ from: 'manual select' });\n\n\t\t\t\t// reset init segment to null for new level cc parsing\n\t\t\t\tthis._ccExtractor.resetInitSegment();\n\n\t\t\t\t/** audio tracks had been updated\n\t\t\t\t * fire track changed event to upper layer to rebuild toolbar\n\t\t\t\t */\n\t\t\t\tthis._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.TrackChange, { \n\t\t\t\t\tdetails: { \n\t\t\t\t\t\ttype: AdaptivePlayer.Kind.AUDIO, \n\t\t\t\t\t\ttracks: this.audioTracks() \n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\t// Reset CC\n\t\t\t\tthis._clearCConReset();\n\t\t\t} else if (track.kind === 'TEXT') {\n\t\t\t\tif (track.type === AdaptivePlayer.PlayerType.SHAKA) {\n\t\t\t\t\t// hide cc tracks if any\n\t\t\t\t\tthis.textTracks().forEach(function(track) {\n\t\t\t\t\t\tif (track.type === AdaptivePlayer.PlayerType.NATIVE) {\n\t\t\t\t\t\t\ttrack.base.mode = 'hidden';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// set only when not visible\n\t\t\t\t\tif (!this._player.isTextTrackVisible()) {\n\t\t\t\t\t\tthis.setTextTrackVisibility(true);\n\t\t\t\t\t}\n\t\t\t\t\tthis._player.selectTextTrack(track.base);\n\t\t\t\t} else if (track.type === AdaptivePlayer.PlayerType.NATIVE) {\n\t\t\t\t\ttrack.base.mode = 'showing';\n\t\t\t\t\t// hide shaka text track\n\t\t\t\t\tif (this._player.isTextTrackVisible()) {\n\t\t\t\t\t\tthis.setTextTrackVisibility(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._eventHandler.dispatchEvent(\n\t\t\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { details: { type: AdaptivePlayer.Kind.TEXT, tracks: this.textTracks() } }));\n\t\t\t}\n\t\t}\n\t}\n\n\tgetStats() {\n\t\tif (!this._player) {\n\t\t\treturn {\n\t\t\t\tbytesLoaded: NaN,\n\t\t\t\tbitrate: NaN,\n\t\t\t\tbandwidth: NaN,\n\t\t\t\tswitchInfo: NaN,\n\t\t\t\tisAutoSwitch: true,\n\t\t\t\tlivePointOffest: -1\n\t\t\t};\n\t\t}\n\n\t\tlet bytesLoaded = 0;\n\t\tlet estimatedBandwidth = 0;\n\t\tlet streamBandwidth = 0;\n\t\tlet switchHistory = [];\n\t\tlet innerStat = this._player.getStats();\n\t\tlet playerConfig = this._player.getConfiguration();\n\t\tlet isAutoSwitch;\n\t\tlet switchInfo;\n\t\tlet livePointOffest;\n\t\tlet currentCdnIndex = -1;\n\t\tif (innerStat) {\n\t\t\tbytesLoaded = innerStat.bytesLoaded;\n\t\t\tstreamBandwidth = Math.floor(innerStat.streamBandwidth / 1000);\n\t\t\tisAutoSwitch = playerConfig.abr.enabled;\n\t\t\testimatedBandwidth = innerStat.estimatedBandwidth ? innerStat.estimatedBandwidth : 0;\n\t\t\testimatedBandwidth = Math.floor(estimatedBandwidth / 1000);\n\t\t\tswitchHistory = innerStat.switchHistory ? innerStat.switchHistory : null;\n\t\t\tlivePointOffest = innerStat.livePointOffest ? innerStat.livePointOffest : -1;\n\t\t\tcurrentCdnIndex = innerStat.currentCdnIndex;\n\t\t\tif (switchHistory && switchHistory.length > 0) {\n\t\t\t\tlet to; let from; let adaption; let timestamp;\n\t\t\t\tfor (let i = switchHistory.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (switchHistory[i].type === 'variant') {\n\t\t\t\t\t\tif (to == null) {\n\t\t\t\t\t\t\tlet current = this._player.getVariantTracks().filter(function (track) { return track.id === switchHistory[i].id; });\n\t\t\t\t\t\t\tif (current.length > 0) {\n\t\t\t\t\t\t\t\tto = (current[0].videoBandwidth || current[0].bandwidth);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tadaption = switchHistory[i].fromAdaptation;\n\t\t\t\t\t\t\ttimestamp = switchHistory[i].timestamp;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (to != null && from == null && timestamp !== switchHistory[i].timestamp) {\n\t\t\t\t\t\t\tlet current = this._player.getVariantTracks().filter(function (track) { return track.id === switchHistory[i].id; });\n\t\t\t\t\t\t\tif (current.length > 0) {\n\t\t\t\t\t\t\t\tfrom = (current[0].videoBandwidth || current[0].bandwidth);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tswitchInfo = { 'from': from, 'to': to, 'fromAdaptation': adaption };\n\t\t\t}\n\t\t}\n\n\t\tlet data = {\n\t\t\tbytesLoaded: bytesLoaded,\n\t\t\tcurrentCdnIndex: currentCdnIndex,\n\t\t\tbitrate: streamBandwidth,\n\t\t\tbandwidth: estimatedBandwidth,\n\t\t\tswitchInfo: switchInfo,\n\t\t\tswitchHistory: switchHistory,\n\t\t\tisAutoSwitch: isAutoSwitch,\n\t\t\tlivePointOffest: livePointOffest\n\t\t};\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'getStats return: ' + JSON.stringify(data));\n\t\treturn data;\n\t}\n\n\tisLive() {\n\t\tif (this._player) {\n\t\t\treturn this._player.isLive();\n\t\t}\n\t\treturn false;\n\t}\n\n\tgotoLive() {\n\t\tif (this._player && this._player.isLive()) {\n\t\t\tlet range = this._player.seekRange();\n\t\t\tthis._video.currentTime = range.end; // - AdaptivePlayer.RANGE_GAP;\n\t\t}\n\t}\n\n\tstatic support(callback) {\n\t\tlet nothingSupport = {\n\t\t\t'manifest': {},\n\t\t\t'media': {},\n\t\t\t'drm': {},\n\t\t\t'offline': false\n\t\t};\n\t\ttry {\n\t\t\tif (!ShakaInner.Player.isBrowserSupported()) {\n\t\t\t\tcallback(nothingSupport);\n\t\t\t} else {\n\t\t\t\tShakaInner.Player.probeSupport().then(function (support) {\n\t\t\t\t\tcallback(support);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ;\n\t\t}\n\t}\n\n\tsetAdaptation(value) {\n\t\tif (this._player.getConfiguration()) {\n\t\t\tlet config = this._player.getConfiguration();\n\t\t\tconfig.abr.enabled = value;\n\t\t\tthis._player.configure(config);\n\t\t}\n\t}\n\n\tgetThumbnailStreams() {\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'getThumbnailStreams!');\n\t\tif (this._player && this._player.getThumbnailStreams) {\n\t\t\treturn this._player.getThumbnailStreams();\n\t\t}\n\t}\n\n\tgetThumbnailStreamImages(streamid, time, thumbnailsCb) {\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'getThumbnailStreamImages!');\n\t\tif (this._player && this._player.getThumbnailStreamImages) {\n      let requestBaseTime = 0;\n\t\t\tif (!this.isLive()) {\n\t\t\t\t// CVOD case\n\t\t\t\tlet periodSections = this._player.getPeriodSections();\n        if (periodSections && periodSections.length > 0) {\n          requestBaseTime = Math.max(periodSections[0].start, periodSections[0].maxStart);\n        }\n\t\t\t}\n\t\t\tthis._player.getThumbnailStreamImages(streamid, time, requestBaseTime, thumbnailsCb);\n\t\t}\n\t}\n\n\tget currentTime() {\n\t\tlet absTime = this._video.currentTime;\n\t\treturn absTime;\n\t}\n\n\tset currentTime(value) {\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Seek to ' + value);\n\t\tlet range = this._player.seekRange();\n\t\tif (value > range.end) {\n\t\t\tvalue = range.end;\n\t\t} else if (value < range.start) {\n\t\t\tvalue = range.start;\n\t\t}\n\t\tthis._video.currentTime = value;\n\t}\n\n\tnotifyPlayStarted() { \n\t\t// notify text track change\n\t\t// as shaka reuses textTrack for subtitle, video will not trigger addTextTrack when 2nd time playback\n\t\tthis._eventHandler.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { details: { type: AdaptivePlayer.Kind.TEXT, tracks: this.textTracks() } }));\n\n\t\tlet periodSections = this._player.getPeriodSections();\n\t\tif (!this.isLive() && !this._sentSeekRangeForCVODOnce && periodSections && periodSections.length > 0) {\n\t\t\tthis._sentSeekRangeForCVODOnce = true;\n\t\t\tlet ranges = [];\n\t\t\tperiodSections.forEach(function (item) {\n\t\t\t\tlet begin = Math.max(item.start, item.maxStart);\n\t\t\t\tranges.push({ id: item.id, begin: begin, end: item.minEnd });\n\t\t\t});\n\t\t\tlet start = Math.max(periodSections[0].start, periodSections[0].maxStart);\n\t\t\tif (periodSections.length > 0 && start > 0) {\n\t\t\t\tlet newRange = {\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: periodSections[periodSections.length - 1].minEnd,\n\t\t\t\t\tranges: ranges\n\t\t\t\t};\n\t\t\t\tthis._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n\t\t\t\t\tdata: newRange,\n\t\t\t\t\tdetails: newRange\n\t\t\t\t}));\n\t\t\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'Fired SeekRangeChange of CVOD: ' + '[' + JSON.stringify(newRange) + ']');\n\t\t\t}\n\t\t}\n\t}\n\n\tnotifyProfileChanged(data) {\n\t\t// not trigger, use _onAdaptation instead\n\t}\n\n\t_onTimeUpdate(event) {\n\t\t// seek range changed event for live stream\n\t\tif (this.isLive()) {\n\t\t\tlet range = this._player.seekRange();\n\t\t\tlet gap = this.currentTime - this._video.currentTime;\n\t\t\tlet ranges = [];\n\t\t\tlet periodSections = this._player.getPeriodSections();\n\t\t\tif (periodSections && periodSections.length > 0) {\n\t\t\t\tperiodSections.forEach(function (item) {\n\t\t\t\t\tlet begin = Math.max(item.start, item.maxStart);\n\t\t\t\t\tranges.push({ id: item.id, begin: begin, end: item.minEnd });\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet newRange = {\n\t\t\t\tstart: range.start + gap,\n\t\t\t\tend: range.end + gap,\n\t\t\t\tranges: ranges\n\t\t\t};\n\t\t\tthis._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n\t\t\t\tdata: newRange, // will be deprecated later\n\t\t\t\tdetails: newRange\n\t\t\t}));\n\t\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'Fired SeekRangeChange: ' + '[' + JSON.stringify(newRange) + ']');\n\t\t}\n\t}\n\n\t_onShakaError(event) {\n\t\tlet errorDetail = event.detail || event;\n\t\tif (!errorDetail.hasOwnProperty('category') || !errorDetail.hasOwnProperty('code')) {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.Error, 'DashPlayer', 'Unknown Error Format! ');\n\t\t\treturn;\n\t\t}\n\n\t\tlet errorCode = 0;\n\t\tlet errorLevel = NLError.SeverityLevel.All;\n\t\tlet url = this._url;\n\n\t\tswitch (errorDetail.category) {\n\t\t\tcase ShakaInner.util.Error.Category.NETWORK: {\n\t\t\t\turl = errorDetail.data[0];\n\t\t\t\tif (!UrlUtil.validateURL(url)) {\n\t\t\t\t\terrorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Connect_Failed;\n\t\t\t\t\terrorLevel = NLError.SeverityLevel.Fatal;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet extensionType = UrlUtil.getExtension(url);\n\t\t\t\tif (extensionType === 'mpd') {\n\t\t\t\t\tlet isLive = this.isLive();\n\t\t\t\t\terrorCode = NLError.Code.Get_Primary_Manifest_Failed;\n\t\t\t\t\terrorLevel = isLive ? NLError.SeverityLevel.Warning : NLError.SeverityLevel.Fatal;\n\t\t\t\t} else if (extensionType === 'm3u8' || extensionType === 'm3u') {\n\t\t\t\t\tlet isMBR = this._url === url;\n\t\t\t\t\terrorCode = isMBR ? NLError.Code.Get_Primary_Manifest_Failed : NLError.Code.Get_Single_Bitrate_Manifest_Failed;\n\t\t\t\t\terrorLevel = NLError.SeverityLevel.Warning;\n\t\t\t\t} else {\n\t\t\t\t\terrorCode = NLError.Code.Get_Chunk_Failed;\n\t\t\t\t\terrorLevel = NLError.SeverityLevel.Warning;\n\t\t\t\t}\n\n\t\t\t\tlet networkCode = 0;\n\t\t\t\tswitch (errorDetail.code) {\n\t\t\t\t\tcase ShakaInner.util.Error.Code.UNSUPPORTED_SCHEME:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.MALFORMED_DATA_URI:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.UNKNOWN_DATA_URI_ENCODING:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.HTTP_ERROR:\n\t\t\t\t\t\tnetworkCode = NLError.NetworkDetailCode.Connect_Failed;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ShakaInner.util.Error.Code.BAD_HTTP_STATUS:\n\t\t\t\t\t\tnetworkCode = errorDetail.data[1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ShakaInner.util.Error.Code.TIMEOUT:\n\t\t\t\t\t\tnetworkCode = NLError.NetworkDetailCode.Timeout;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\terrorCode += networkCode;\n\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ShakaInner.util.Error.Category.TEXT:\n\t\t\t\terrorCode = NLError.Code.Get_Chunk_Failed + NLError.NetworkDetailCode.Content_Error;\n\t\t\t\terrorLevel = NLError.SeverityLevel.Warning;\n\t\t\t\tbreak;\n\t\t\tcase ShakaInner.util.Error.Category.MEDIA:\n\t\t\t\tbreak;\n\t\t\tcase ShakaInner.util.Error.Category.STREAMING:\n\t\t\t\tswitch (errorDetail.code) {\n\t\t\t\t\tcase ShakaInner.util.Error.Code.UNABLE_TO_GUESS_MANIFEST_TYPE:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_INVALID_XML:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_EMPTY_PERIOD:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_UNSUPPORTED_CONTAINER:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_NO_COMMON_KEY_SYSTEM:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_MULTIPLE_KEY_IDS_NOT_SUPPORTED:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.DASH_CONFLICTING_KEY_IDS:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.UNPLAYABLE_PERIOD:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.RESTRICTIONS_CANNOT_BE_MET: {\n\t\t\t\t\t\terrorCode = NLError.Code.Playback_Generic_Error;\n\t\t\t\t\t\terrorLevel = NLError.SeverityLevel.Warning;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase ShakaInner.util.Error.Category.MANIFEST:\n\t\t\t\terrorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Content_Error;\n\t\t\t\terrorLevel = NLError.SeverityLevel.Warning;\n\t\t\t\tbreak;\n\n\t\t\tcase ShakaInner.util.Error.Category.DRM:\n\t\t\t\terrorLevel = NLError.SeverityLevel.Fatal;\n\t\t\t\tswitch (errorDetail.code) {\n\t\t\t\t\t// manifest config error\n\t\t\t\t\tcase ShakaInner.util.Error.Code.NO_RECOGNIZED_KEY_SYSTEMS:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.ENCRYPTED_CONTENT_WITHOUT_DRM_INFO:\n\t\t\t\t\t\terrorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Content_Error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// DRM_Not_Supported\n\t\t\t\t\tcase ShakaInner.util.Error.Code.REQUESTED_KEY_SYSTEM_CONFIG_UNAVAILABLE:\n\t\t\t\t\t\terrorCode = NLError.Code.DRM_Not_Supported;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// DRM_Init_Failed\n\t\t\t\t\tcase ShakaInner.util.Error.Code.NO_LICENSE_SERVER_GIVEN:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.FAILED_TO_CREATE_CDM:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.FAILED_TO_ATTACH_TO_VIDEO:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.FAILED_TO_CREATE_SESSION:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.INVALID_SERVER_CERTIFICATE:\n\t\t\t\t\tcase ShakaInner.util.Error.Code.FAILED_TO_GENERATE_LICENSE_REQUEST:\n\t\t\t\t\t\terrorCode = NLError.Code.DRM_Init_Failed;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ShakaInner.util.Error.Code.LICENSE_REQUEST_FAILED: {\n\t\t\t\t\t\terrorCode = NLError.Code.Get_Key_License_Failed;\n\t\t\t\t\t\tlet licenseErrorDetail = errorDetail.data[0];\n\t\t\t\t\t\tif (!licenseErrorDetail) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\turl = licenseErrorDetail.data[0];\n\t\t\t\t\t\tif (!UrlUtil.validateURL(url)) {\n\t\t\t\t\t\t\terrorCode = NLError.Code.Get_Key_License_Failed + NLError.NetworkDetailCode.Connect_Failed;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (licenseErrorDetail.category === ShakaInner.util.Error.Category.NETWORK) {\n\t\t\t\t\t\t\tlet networkCode = 0;\n\t\t\t\t\t\t\tswitch (licenseErrorDetail.code) {\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.UNSUPPORTED_SCHEME:\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.MALFORMED_DATA_URI:\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.UNKNOWN_DATA_URI_ENCODING:\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.HTTP_ERROR:\n\t\t\t\t\t\t\t\t\tnetworkCode = NLError.NetworkDetailCode.Connect_Failed;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.BAD_HTTP_STATUS:\n\t\t\t\t\t\t\t\t\tnetworkCode = licenseErrorDetail.data[1];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase ShakaInner.util.Error.Code.TIMEOUT:\n\t\t\t\t\t\t\t\t\tnetworkCode = NLError.NetworkDetailCode.Timeout;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\terrorCode += networkCode;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ShakaInner.util.Error.Code.LICENSE_RESPONSE_REJECTED:\n\t\t\t\t\t\terrorCode = NLError.Code.Get_Key_License_Failed + NLError.NetworkDetailCode.Content_Error;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ShakaInner.util.Error.Code.EXPIRED:\n\t\t\t\t\t\terrorCode = NLError.Code.DRM_Module_Error_License_Expired;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t/*\n\t\t\t LOAD_INTERRUPTED\t7000\tnumber\tThe call to Player.load() was interrupted by a call to Player.unload() or another call to Player.load().\n\t\t\t * */\n\t\t\tcase ShakaInner.util.Error.Category.PLAYER:\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// VOD can't recover after retry times\n\t\t// A critical error that the library cannot recover from\n\t\t// Need to report as Fatal error\n\t\tif (errorDetail.severity === ShakaInner.util.Error.Severity.CRITICAL) {\n\t\t\terrorLevel = NLError.SeverityLevel.Fatal;\n\t\t}\n\n\t\tlet nativeErrMsg = ObjectUtil.getKeyByValue(ShakaInner.util.Error.Category, errorDetail.category) + ' ' +\n\t\t\tObjectUtil.getKeyByValue(ShakaInner.util.Error.Code, errorDetail.code);\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'shaka Error: [' + url + ', ' + nativeErrMsg + ']');\n\t\tlet errorInfo = NLError.create(errorCode, errorLevel, url, nativeErrMsg, errorDetail.code);\n\t\tthis._statisticManager.reportError(errorInfo);\n\t}\n\n\t_onShakaBufferingEvent(event) {\n\t\tthis._eventHandler.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.Buffering, {\n\t\t\t\tnewState: event.buffering ? 'pause' : 'playing'\n\t\t\t}));\n\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'Fired Buffering event: ' + event.type + '[' + event + ']');\n\t}\n\n\t_onShakaTracksChanged(event) {\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Fired TracksChange: ' + event.type + '[' + event + ']');\n\t}\n\n\t_onShakaPeriodsChanged(event) {\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Fired PeriodsChanged: ' + event.type + '[' + event + ']');\n\t\tthis._eventHandler.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { \n\t\t\t\tdetails: { \n\t\t\t\t\ttype: AdaptivePlayer.Kind.TEXT, \n\t\t\t\t\ttracks: this.textTracks() \n\t\t\t\t}, \n\t\t\t\t// Add .data to send multiple trackChanges in one event\n\t\t\t\tdata: [\n\t\t\t\t\t{ type: AdaptivePlayer.Kind.VIDEO, tracks: this.videoTracks() },\n\t\t\t\t\t{ type: AdaptivePlayer.Kind.AUDIO, tracks: this.audioTracks() },\n\t\t\t\t\t{ type: AdaptivePlayer.Kind.TEXT, tracks: this.textTracks() }\n\t\t\t\t]\n\t\t\t}));\n\t}\n\n\t_addCCTrack() {\n\t\tthis._ccTrack = this._video.addTextTrack('captions', this._playerConfig.closedCaption.label, this._playerConfig.closedCaption.language);\n\t\tthis._ccTrack.mode = 'hidden';\n\t\tthis._ccTrack.hashId = 'dash_cc_' + PlatformUtil.generateUUID();\n\n\t\t// fire text track changed event to upper layer to rebuild toolbar\n\t\tthis._eventHandler.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { details: { type: AdaptivePlayer.Kind.TEXT, tracks: this.textTracks() } }));\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Fired TracksChange');\n\t}\n\n\t_onClosedCaption(event) {\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', '_onClosedCaption ');\n\t\tthis._logger.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', '_onClosedCaption ');\n\n\t\tif (this._ccTrack == null) {\n\t\t\tthis._addCCTrack();\n\t\t} \n\n\t\tCuesUtil.MakeCues(event, this._ccTrack);\n\t}\n\n\t_addCue (cue) {\n\t\tif (!this._ccTrack) {\n\t\t\treturn;\n\t\t}\n\t\t// skip cues which overlap more than 50% with previously parsed time ranges\n\t\tif (this._ccTrack.cues) {\n\t\t\tfor (let i = this._ccTrack.cues.length; i--;) {\n\t\t\t\tlet cue_ = this._ccTrack.cues[i];\n\t\t\t\t// if (cue_.endTime < cue.startTime) { break; }\n\t\t\t\tlet overlap = Math.min(cue_.endTime, cue.endTime) - Math.max(cue_.startTime, cue.startTime);\n\t\t\t\tif (overlap >= 0 && (overlap / (cue.endTime - cue.startTime)) > 0.5) {\n\t\t\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Discard cue[' + cue.startTime + '/' + cue.endTime + ': ' + cue.text);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ccTrack.addCue(cue);\n\t}\n\n\t_onEMSG(event) {\n\t\tif (!event.detail || !event.detail.messageData) {\n\t\t\treturn;\n\t\t}\n\t\tlet sample = {\n\t\t\tpts: 0,\n\t\t\tdata: null,\n\t\t\tdict: null\n\t\t};\n\t\tsample.pts = event.detail.startTime;\n\t\tlet emsgData = StringUtil.utf8ArrayToStr(event.detail.messageData);\n\t\tlet parser = new DOMParser();\n\t\tlet xmlDoc = parser.parseFromString(emsgData, 'application/xml');\n\t\tlet privateCommand = xmlDoc.getElementsByTagName('PrivateCommand');\n\t\tif (privateCommand.length > 0) {\n\t\t\tlet id3HexStr = privateCommand[0].getAttribute('PrivateBytes');\n\t\t\tsample.data = new Uint8Array(StringUtil.hexStringToArray(id3HexStr));\n\t\t}\n\n\t\tthis._cuepointManager.onID3(sample);\n\t}\n\n\t_onShakaEvent(event) {\n\t\tthis._eventHandler.dispatchEvent(\n\t\t\tnew FakeEvent(AdaptivePlayer.EventType.StreamingEvent, {\n\t\t\t\tdetails: {\n\t\t\t\t\tfrom: 'DashPlayer',\n\t\t\t\t\tdata: { type: event.type }\n\t\t\t\t}\n\t\t\t}));\n\t\t// this.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', 'Fired streaming event: ' + event.type + '[' + JSON.stringify(event) + ']');\n\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Fired streaming event: ' + '[' + event.type + ']');\n\t}\n\n\t_onAdaptation(event) {\n\t\tlet tracks = this.videoTracks();\n\t\ttracks.forEach(function (track) {\n\t\t\tif (!track.active || (track.id === this._activeVideoTrackId)) return;\n\t\t\tthis._activeVideoTrackId = track.id;\n\t\t\tlet data = {\n\t\t\t\tid: track.id,\n\t\t\t\tvideoWidth: track.width,\n\t\t\t\tvideoHeight: track.height,\n\t\t\t\tdetails: {\n\t\t\t\t\tid: track.id,\n\t\t\t\t\tvideoWidth: track.width,\n\t\t\t\t\tvideoHeight: track.height\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.ProfileChange, data));\n\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'Fired ProfileChange: ' + JSON.stringify(data));\n\n\t\t\t// fire trackChange event to refresh audio tracks\n\t\t\tthis._eventHandler.dispatchEvent(\n\t\t\t\tnew FakeEvent(AdaptivePlayer.EventType.TrackChange, { details: { type: AdaptivePlayer.Kind.VIDEO, tracks: this.videoTracks() } }));\n\t\t}.bind(this));\n\t}\n\n\t_onAdvertisement(event) {\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', '_onAdvertisement');\n\t\t/*\n\t\tdetail: shaka.util.AdUploadMsg\n\t\t{\n\t\t\tadId: '',\n\t\t\tuploadType: 'ADSTART'/'ADEND'/'ADPOST',\n\t\t\turls: []  // {name:'defaultClick/trackClick, url:'http://...'}\n\t\t} */\n\t\tif (event && event.detail) {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.WARNING, 'DashPlayer', '_onAdvertisement: ' + JSON.stringify(event.detail));\n\t\t\tlet upload = {\n\t\t\t\ttype: event.detail.uploadType,\n\t\t\t\tdata: {\n\t\t\t\t\tadid: event.detail.adId,\n\t\t\t\t\turls: event.detail.urls\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._eventHandler._onAdvertisement(upload);\n\t\t}\n\t}\n\n\t/**\n\t * empty advertisement\n\t *     event.detail: [{type: string, time: number, urls: Array[string]}]\n\t */\n\t_onEmptyAdvertisement(event) {\n\t\tif (event && event.detail) {\n\t\t\tthis._eventHandler._onEmptyAdvertisement(event.detail);\n\t\t}\n\t}\n\n\t/**\n\t * range\n\t *     event.detail: [{id: string, start: number, end: number}]\n\t */\n\t_onAdRangesUpdate(event) {\n\t\tif (event && event.detail) {\n\t\t\tthis._eventHandler._onAdRangesUpdate(event.detail);\n\t\t}\n\t}\n\n\t_readDrmInfo(result, info, isCustom, keySystem) {\n\t\tif (!info) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!isCustom) {\n\t\t\tresult.servers[keySystem] = info.server;\n\t\t} else {\n\t\t\tlet type = '';\n\t\t\tif (keySystem === 'com.widevine.alpha') {\n\t\t\t\ttype = 'widevine';\n\t\t\t} else if (keySystem === 'com.microsoft.playready') {\n\t\t\t\ttype = 'playready';\n\t\t\t} else if (keySystem === 'com.apple.fps.1_0') {\n\t\t\t\ttype = 'fairplay';\n\t\t\t}\n\n\t\t\tresult.servers[keySystem] = info.server + '/getlicense/' + type;\n\t\t}\n\n\t\t// Requested by Saffron\n\t\t// Enable a unique identifier within the CDM that is persistent even when the player closes down.\n\t\t// Removed for Firefox 58/58.0.1\n\t\t/*\n\t\tif (keySystem === 'com.widevine.alpha') {\n\t\t\t\tif (!result.advanced[keySystem]) {\n\t\t\t\t\t\tresult.advanced[keySystem] = {};\n\t\t\t\t}\n\t\t\t\tresult.advanced[keySystem].persistentStateRequired = true;\n\t\t}\n\t\t*/\n\t\tif (info.serverCertificate) {\n\t\t\tif (!result.advanced[keySystem]) {\n\t\t\t\tresult.advanced[keySystem] = {};\n\t\t\t}\n\t\t\tresult.advanced[keySystem].serverCertificate = info.serverCertificate;\n\t\t}\n\t}\n\n\t_convertDRMConfig(config) {\n\t\tlet result = {\n\t\t\tservers: {},\n\t\t\tadvanced: {}\n\t\t};\n\t\tif (!config) {\n\t\t\treturn result;\n\t\t}\n\n\t\tlet isCustom = false;\n\t\tif (config && config.params && config.params.saffron_license_server_used) {\n\t\t\tisCustom = config.params.saffron_license_server_used;\n\t\t}\n\n\t\tthis._readDrmInfo(result, config.widevine || config, isCustom, 'com.widevine.alpha');\n\t\tthis._readDrmInfo(result, config.playready || config, isCustom, 'com.microsoft.playready');\n\t\tthis._readDrmInfo(result, config.fairplay || config, isCustom, 'com.apple.fps.1_0');\n\n\t\treturn result;\n\t}\n\n\t_onLicenseHttpRequest(type, request) {\n\t\tlet predefinedUrlPatternAllowWithCredentialsForSegment = false;\n\t\tthis._config.withCredentialsFragmentPattern.forEach(function (item) {\n\t\t\tif (request.uris[0].indexOf(item) !== -1) { // found it\n\t\t\t\tpredefinedUrlPatternAllowWithCredentialsForSegment = true;\n\t\t\t}\n\t\t});\n\t\tif (this._config.withCredentials && (\n\t\t\t(type === ShakaInner.net.NetworkingEngine.RequestType.SEGMENT && predefinedUrlPatternAllowWithCredentialsForSegment) ||\n\t\t\t(type !== ShakaInner.net.NetworkingEngine.RequestType.SEGMENT))) {\n\t\t\t// allow cookies to be sent cross-origin\n\t\t\trequest.allowCrossSiteCredentials = true;\n\t\t}\n\n\t\tif (this._config.headers) {\n\t\t\tfor (let k in this._config.headers) {\n\t\t\t\trequest.headers[k] = this._config.headers[k];\n\t\t\t}\n\t\t}\n\n\t\tif (type === ShakaInner.net.NetworkingEngine.RequestType.LICENSE) {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.DEBUG, 'DashPlayer', 'License request called!');\n\n\t\t\t// Talk with Saffron license server\n\t\t\t// NDP-925\n\t\t\t// request.headers.CustomData = this._config.drm.params.token; \n\t\t\trequest.headers.Authorization = this._config.drm.params.token;\n\t\t}\n\t}\n\n\t_onSegmentResponse(type, response) {\n\t\tthis.print(AdaptivePlayer.LogLevel.TRACE, 'DashPlayer', '_onSegmentResponse: ' + type + ', uri=' + response.uri);\n    // https://jira.neulion.com/browse/SKYUK-243\n    // Add try-catch to ignore DASH CC exception\n\t\ttry {\n\t\t\tif (this._ccExtractor) {\n\t\t\t\tif (type === ShakaInner.net.NetworkingEngine.RequestType.VIDEO_INIT) {\n\t\t\t\t\tlet periodSections = this._player.getPeriodSections();\n\t\t\t\t\tlet offsetTime = 0;\n\t\t\t\t\tif (periodSections && periodSections.length > 0) {\n\t\t\t\t\t\toffsetTime = Math.max(periodSections[0].start, periodSections[0].maxStart);\n\t\t\t\t\t}\n\t\t\t\t\tthis._ccExtractor.appendInit(response.data, this.isLive(), offsetTime);\n\t\t\t\t} else if (type === ShakaInner.net.NetworkingEngine.RequestType.VIDEO_SEGMENT) {\n\t\t\t\t\tthis._ccExtractor.appendSegment(response.data);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.print(AdaptivePlayer.LogLevel.WARNING, 'DashPlayer', 'cc extractor and parser occured error: ' + error);\n\t\t}\n\t}\n\n\t_reEnableSubtitleTrack() {\n\t\t// hide cc tracks if any\n\t\tlet activeCCTrackLabel = null;\n\t\tfor (let i = 0; i < this._video.textTracks.length; i++) {\n\t\t\tlet track = this._video.textTracks[i];\n\t\t\tif (track.mode === 'showing') {\n\t\t\t\ttrack.mode = 'hidden';\n\t\t\t\tactiveCCTrackLabel = VideoUtil.getHashNameOfTrack(track);\n\t\t\t}\n\t\t}\n\t\t// show cc tracks if any\n\t\tfor (let i = 0; i < this._video.textTracks.length; i++) {\n\t\t\tlet track = this._video.textTracks[i];\n\t\t\tif (VideoUtil.getHashNameOfTrack(track) === activeCCTrackLabel) {\n\t\t\t\ttrack.mode = 'showing';\n\t\t\t}\n\t\t}\n\t}\n\n\t_clearCConReset() {\n\t\tif (AdaptivePlayer.browserType === 'IE' || AdaptivePlayer.browserType === 'Edge') {\n\t\t\tthis._clearCC();\n\t\t} else {\n\t\t\tthis._clearCCActiveCues();\n\t\t}\n\t}\n\n\t_clearCCActiveCues() {\n\t\t// clear cues\n\t\tif (this._ccTrack && this._ccTrack.activeCues && this._ccTrack.activeCues.length > 0) {\n\t\t\t// remove text cues of CC\n\t\t\tfor (let j = this._ccTrack.activeCues.length - 1; j >= 0; j--) {\n\t\t\t\ttry {\n\t\t\t\t\tthis._ccTrack.removeCue(this._ccTrack.activeCues[j]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.print(AdaptivePlayer.LogLevel.WARNING, 'DashPlayer', 'clear cc active cue exception: ' + error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t_clearCC() {\n\t\t// clear cues\n\t\tif (this._ccTrack && this._ccTrack.cues && this._ccTrack.cues.length > 0) {\n\t\t\t// remove text cues of CC\n\t\t\tfor (let j = this._ccTrack.cues.length - 1; j >= 0; j--) {\n\t\t\t\ttry {\n\t\t\t\t\tthis._ccTrack.removeCue(this._ccTrack.cues[j]);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.print(AdaptivePlayer.LogLevel.WARNING, 'DashPlayer', 'clear cc cue exception: ' + error);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._clearCCActiveCues();\n\t}\n}\n\nDashPlayer.version = ShakaInner.Player.version;\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Player/DashPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 723,
    "kind": "variable",
    "name": "ShakaInner",
    "memberof": "src/Player/DashPlayer.js",
    "static": true,
    "longname": "src/Player/DashPlayer.js~ShakaInner",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Player/DashPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 724,
    "kind": "class",
    "name": "DashPlayer",
    "memberof": "src/Player/DashPlayer.js",
    "static": true,
    "longname": "src/Player/DashPlayer.js~DashPlayer",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Player/DashPlayer.js",
    "importStyle": "DashPlayer",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Player/PlayerBase.js~PlayerBase"
    ]
  },
  {
    "__docId__": 725,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "_url",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_url",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "_player",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_player",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "_playerConfig",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_playerConfig",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "_config",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_config",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "_ccTrack",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_ccTrack",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "_ccExtractor",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_ccExtractor",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "member",
    "name": "_sentSeekRangeForCVODOnce",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_sentSeekRangeForCVODOnce",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "type",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#type",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "member",
    "name": "streamType",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#streamType",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#configure",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "load",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#load",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "startTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "member",
    "name": "_emptyAdvertisementList",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_emptyAdvertisementList",
    "access": "private",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "unload",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#unload",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "videoTracks",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#videoTracks",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "audioTracks",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#audioTracks",
    "access": "public",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "textTracks",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#textTracks",
    "access": "public",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 751,
    "kind": "method",
    "name": "ccTracks",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#ccTracks",
    "access": "public",
    "description": null,
    "lineNumber": 405,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "method",
    "name": "setTextTrackVisibility",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#setTextTrackVisibility",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#selectTrack",
    "access": "public",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      },
      {
        "name": "optClearBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#getStats",
    "access": "public",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 585,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "gotoLive",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#gotoLive",
    "access": "public",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "support",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Player/DashPlayer.js~DashPlayer.support",
    "access": "public",
    "description": null,
    "lineNumber": 599,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "setAdaptation",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#setAdaptation",
    "access": "public",
    "description": null,
    "lineNumber": 619,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "getThumbnailStreams",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#getThumbnailStreams",
    "access": "public",
    "description": null,
    "lineNumber": 627,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "getThumbnailStreamImages",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#getThumbnailStreamImages",
    "access": "public",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "params": [
      {
        "name": "streamid",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "thumbnailsCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 761,
    "kind": "get",
    "name": "currentTime",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "set",
    "name": "currentTime",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 654,
    "undocument": true
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "notifyPlayStarted",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#notifyPlayStarted",
    "access": "public",
    "description": null,
    "lineNumber": 665,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 765,
    "kind": "method",
    "name": "notifyProfileChanged",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#notifyProfileChanged",
    "access": "public",
    "description": null,
    "lineNumber": 695,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 766,
    "kind": "method",
    "name": "_onTimeUpdate",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onTimeUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 699,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "_onShakaError",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onShakaError",
    "access": "private",
    "description": null,
    "lineNumber": 725,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "_onShakaBufferingEvent",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onShakaBufferingEvent",
    "access": "private",
    "description": null,
    "lineNumber": 894,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "_onShakaTracksChanged",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onShakaTracksChanged",
    "access": "private",
    "description": null,
    "lineNumber": 903,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "_onShakaPeriodsChanged",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onShakaPeriodsChanged",
    "access": "private",
    "description": null,
    "lineNumber": 907,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "_addCCTrack",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_addCCTrack",
    "access": "private",
    "description": null,
    "lineNumber": 924,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "_onClosedCaption",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onClosedCaption",
    "access": "private",
    "description": null,
    "lineNumber": 935,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "_addCue",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_addCue",
    "access": "private",
    "description": null,
    "lineNumber": 946,
    "undocument": true,
    "params": [
      {
        "name": "cue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "_onEMSG",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onEMSG",
    "access": "private",
    "description": null,
    "lineNumber": 965,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "_onShakaEvent",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onShakaEvent",
    "access": "private",
    "description": null,
    "lineNumber": 987,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "_onAdaptation",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onAdaptation",
    "access": "private",
    "description": null,
    "lineNumber": 999,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "member",
    "name": "_activeVideoTrackId",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_activeVideoTrackId",
    "access": "private",
    "description": null,
    "lineNumber": 1003,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "_onAdvertisement",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onAdvertisement",
    "access": "private",
    "description": null,
    "lineNumber": 1023,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "_onEmptyAdvertisement",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onEmptyAdvertisement",
    "access": "private",
    "description": "empty advertisement\n    event.detail: [{type: string, time: number, urls: Array[string]}]",
    "lineNumber": 1049,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "_onAdRangesUpdate",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onAdRangesUpdate",
    "access": "private",
    "description": "range\n    event.detail: [{id: string, start: number, end: number}]",
    "lineNumber": 1059,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "_readDrmInfo",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_readDrmInfo",
    "access": "private",
    "description": null,
    "lineNumber": 1065,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      },
      {
        "name": "isCustom",
        "types": [
          "*"
        ]
      },
      {
        "name": "keySystem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "_convertDRMConfig",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_convertDRMConfig",
    "access": "private",
    "description": null,
    "lineNumber": 1104,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "_onLicenseHttpRequest",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onLicenseHttpRequest",
    "access": "private",
    "description": null,
    "lineNumber": 1125,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "request",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "_onSegmentResponse",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_onSegmentResponse",
    "access": "private",
    "description": null,
    "lineNumber": 1155,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "_reEnableSubtitleTrack",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_reEnableSubtitleTrack",
    "access": "private",
    "description": null,
    "lineNumber": 1177,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "_clearCConReset",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_clearCConReset",
    "access": "private",
    "description": null,
    "lineNumber": 1196,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "_clearCCActiveCues",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_clearCCActiveCues",
    "access": "private",
    "description": null,
    "lineNumber": 1204,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "_clearCC",
    "memberof": "src/Player/DashPlayer.js~DashPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/DashPlayer.js~DashPlayer#_clearCC",
    "access": "private",
    "description": null,
    "lineNumber": 1218,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 790,
    "kind": "file",
    "name": "src/Player/HlsPlayer.js",
    "content": "import Hlsjs from '../../3rd/hls.js/dist/hls.min'\nimport { AdaptivePlayer } from '../AdaptivePlayer'\nimport { PlayerBase } from './PlayerBase'\nimport { FakeEvent } from '../Utils/FakeEvent';\nimport { NLError } from '../Media/NLError';\nimport { NLTrack } from '../Media/NLTrack';\nimport { Settings } from '../config';\nimport * as TimeRangeUtil from '../Utils/TimeRange';\nimport * as XHRUtil from '../Utils/Xhr';\n\nlet HlsInner = typeof Hls === 'undefined' ? Hlsjs : Hls;\nexport default class HlsPlayer extends PlayerBase {\n  constructor(video, parent) {\n    super(video, parent);\n\n    this._player = null;\n    this._isLive = false;\n\n    this._userConfig = {};\n    this._config = {};\n    this._currentLevel = -1;\n    this._startLevel = -1;\n    this._switchInfo = [];\n    /** used for LTE CVOD, need to seek to startPostion */\n    this._firstSeekforLTECVOD = false;\n    this.streamType = AdaptivePlayer.StreamType.HLS;\n\n    this._timeline = {\n      init: false,\n      targetDuration: 0,\n      absStart: 0,\n      curAbsStart: 0,\n      curAbsEnd: 0,\n      timeRanges: []\n    };\n\n    this.type = AdaptivePlayer.PlayerType.HLSJS;\n    this.streamType = AdaptivePlayer.StreamType.HLS;\n\n    this._seekEndTime = 0;\n    this._seekBeginTime = 0;\n    this.print(AdaptivePlayer.LogLevel.INFO, 'HlsPlayer', 'Instance created!');\n  }\n\n  destroy() {\n    this.print(AdaptivePlayer.LogLevel.INFO, 'HlsPlayer', 'Instance destroyed!');\n    return this.unload();\n  }\n\n  configure(config) {\n    this.print(AdaptivePlayer.LogLevel.INFO, 'HlsPlayer', 'configure called!');\n    this._userConfig = config;\n\n    this._config = {\n      startFragPrefetch: true,\n      maxMaxBufferLength: 60,\n      abrMaxWithRealBitrate: true,\n      maxBufferLength: 30,\n      startBitrate: -1,\n      startPosition: -1,\n      autoLevelEnabled: true,\n      liveSyncDurationCount: 4,\n      withCredentialsFragmentPattern: [],\n      nudgeMaxRetry: 10,\n      fragLoadingMaxRetry: 6,\n      captionsTextTrack1Label: 'English',\n      captionsTextTrack1LanguageCode: 'en',\n      lteMode: false\n    };\n    if (config) {\n      this._config.debug = !!config.debug;\n      if (config.abr) {\n        this._config.autoLevelEnabled = !!config.abr.enabled;\n        if (!!config.abr.startBitrate) {\n          this._config.startBitrate = config.abr.startBitrate;\n        }\n      }\n      if (config.preferredAudioLanguage) {\n        this._config.preferredAudioLanguage = config.preferredAudioLanguage.toLowerCase();\n      }\n      if (config.preferredTextLanguage) {\n        this._config.preferredTextLanguage = config.preferredTextLanguage.toLowerCase();\n      }\n      if (config.withCredentialsFragmentPattern) {\n        this._config.withCredentialsFragmentPattern = config.withCredentialsFragmentPattern;\n      }\n      if (config.withCredentials) {\n        this._config.xhrSetup = function (xhr, url) {\n          xhr.withCredentials = true; // do send cookies\n        }\n      }\n      if (config.closedCaption) {\n        if (config.closedCaption.label) {\n          this._config.captionsTextTrack1Label = config.closedCaption.label;\n        }\n        if (config.closedCaption.language) {\n          this._config.captionsTextTrack1LanguageCode = config.closedCaption.language;\n        }\n      }\n      if (config.debugConfig.logServer) {\n        this._config.logServer = config.debugConfig.logServer;\n      }\n      this._config.lteMode = !!config.enableLTEmode;\n      if (this._config.lteMode) {\n        this._config.maxBufferLength = 120;\n        this._config.maxFragLookUpTolerance = 0.15;\n      }\n    }\n  }\n\n  load(url, startTime) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'load called!');\n\n    this._url = url;\n\n    this._clearTextTracks();\n\n    this._currentLevel = -1;\n    this._startLevel = -1;\n    this._switchInfo = [];\n    this._firstSeekforLTECVOD = false;\n\n    // start from certain position in seconds\n    if (typeof (startTime) === 'number' && startTime >= 0) {\n      this._config.startPosition = startTime;\n      if (this._userConfig && !!this._userConfig.enableLTEmode) {\n        // HLS CVOD need to seek after level loaded\n        this._userConfig.startPosition = startTime;\n      }\n    }\n\n    this._player = new HlsInner(this._config);\n    this._player.attachMedia(this._video);\n    this._player.setSysInfo(AdaptivePlayer.browserType, AdaptivePlayer.OS);\n    this._player.on(HlsInner.Events.MEDIA_ATTACHED, function () {\n      this._player.loadSource(url);\n      (!this._config.autoLevelEnabled) && this.setAdaptation(this._config.autoLevelEnabled);\n\n      // register error\n      this._player.on(HlsInner.Events.ERROR, this._onError.bind(this));\n\n      // register events\n      [HlsInner.Events.MEDIA_ATTACHING,\n      HlsInner.Events.MEDIA_ATTACHED,\n      HlsInner.Events.MEDIA_DETACHING,\n      HlsInner.Events.MEDIA_DETACHED,\n      HlsInner.Events.BUFFER_RESET,\n      HlsInner.Events.BUFFER_CODECS,\n      HlsInner.Events.BUFFER_CREATED,\n      HlsInner.Events.BUFFER_APPENDING,\n      HlsInner.Events.BUFFER_APPENDED,\n      HlsInner.Events.BUFFER_EOS,\n      HlsInner.Events.BUFFER_FLUSHING,\n      HlsInner.Events.BUFFER_FLUSHED,\n      HlsInner.Events.MANIFEST_LOADING,\n      HlsInner.Events.MANIFEST_LOADED,\n      HlsInner.Events.MANIFEST_PARSED,\n      HlsInner.Events.LEVEL_LOADING,\n      HlsInner.Events.LEVEL_UPDATED,\n      HlsInner.Events.LEVEL_PTS_UPDATED,\n      HlsInner.Events.LEVEL_SWITCHING,\n      HlsInner.Events.LEVEL_SWITCHED,\n      HlsInner.Events.AUDIO_TRACKS_UPDATED,\n      HlsInner.Events.AUDIO_TRACK_LOADING,\n      HlsInner.Events.AUDIO_TRACK_LOADED,\n      HlsInner.Events.FRAG_LOADING,\n      HlsInner.Events.FRAG_LOAD_PROGRESS,\n      HlsInner.Events.FRAG_LOAD_EMERGENCY_ABORTED,\n      HlsInner.Events.FRAG_LOADED,\n      HlsInner.Events.FRAG_PARSING_INIT_SEGMENT,\n      HlsInner.Events.FRAG_PARSING_USERDATA,\n      HlsInner.Events.FRAG_PARSING_DATA,\n      HlsInner.Events.FRAG_PARSED,\n      HlsInner.Events.FRAG_BUFFERED,\n      HlsInner.Events.FRAG_DECRYPTED,\n      HlsInner.Events.FPS_DROP,\n      HlsInner.Events.FPS_DROP_LEVEL_CAPPING,\n      HlsInner.Events.DESTROYING,\n      HlsInner.Events.KEY_LOADING,\n      HlsInner.Events.KEY_LOADED,\n      HlsInner.Events.INIT_PTS_FOUND,\n      HlsInner.Events.STREAM_STATE_TRANSITION\n      ].forEach(function (event) {\n        this._player.on(event, this._onHlsjsEvent.bind(this));\n      }.bind(this));\n\n      // IE11 doesn't fire video resize event, use 'FRAG_CHANGED' to fire ProfileChange event\n      // And need to fire it in case of resolution same between bitrates\n      // just changed to download segments of new level, not really changed source for renderring\n      // if (this._eventHandler._browserType === 'IE')\n      this._player.on(HlsInner.Events.FRAG_CHANGED, this._onFragChanged.bind(this));\n      // else\n      //    this._player.on(HlsInner.Events.FRAG_CHANGED, this._onHlsjsEvent.bind(this));\n\n      this._player.on(HlsInner.Events.MANIFEST_PARSED, this._onManifestParsed.bind(this));\n      // to get isLive from level loaded event\n      this._player.on(HlsInner.Events.LEVEL_LOADED, this._onLevelLoaded.bind(this));\n\n      this._player.on(HlsInner.Events.LEVEL_SWITCHING, function (event, data) {\n        this._switchInfo.push({\n          'type': 'variant',\n          'timestamp': (new Date().getTime() / 1000).toFixed(2),\n          'bandwidth': data.bitrate,\n          'fromAdaptation': this._player.autoLevelEnabled\n        });\n      }.bind(this));\n\n      // ID3\n      this._cuepointManager.cleanup();\n      this._player.on(HlsInner.Events.FRAG_PARSING_METADATA, this._onID3.bind(this));\n\n      // Thumbnail\n      this._player.on(HlsInner.Events.THUMBNAIL_IMAGE_ASSEMBLED, this._onThumbnailImageLoaded.bind(this));\n\n      // Advertisement\n      this._player.on(HlsInner.Events.ADVERTISEMENT_UPLOAD, this._onAdvertisement.bind(this));\n\n      // Empty Advertisement\n      this._player.on(HlsInner.Events.EMPTY_ADVERTISEMENT_UPLOAD, this._onEmptyAdvertisement.bind(this));\n\n      // Advertisement ranges\n      this._player.on(HlsInner.Events.ADVERTISEMENT_RANGE_UPDATE, this._onAdRangesUpdate.bind(this));\n\n      // Dump mp4\n      this._player.on(HlsInner.Events.FRAG_REMUXED, this._onFragRemuxed.bind(this));\n\n      this._video.addEventListener('seeked', function(event) {\n        this._seekEndTime = Date.now();\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', `_seekBeginTime=${this._seekBeginTime}, _seekEndTime=${this._seekEndTime}, cost=${this._seekEndTime - this._seekBeginTime}`);\n      }.bind(this));\n    }.bind(this));\n\n    return Promise.resolve();\n  }\n\n  unload() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'unload called!');\n\n    // clear ID3 messages\n    this._id3Cues = [];\n\n    // clear text tracks\n    this._clearTextTracks();\n\n    // unload player\n    if (this._player) {\n      this._player.stopLoad();\n      this._player.destroy();\n      this._player.detachMedia(); // unbind VideoElement from hls instance,\n      // signal the end of the stream on MediaSource\n      // reset video source (video.src = '')\n    }\n\n    this._player = null;\n    this._isLive = false;\n    this._userConfig = null;\n    this._config = null;\n    this._currentLevel = -1;\n\n    this._timeline = {\n      init: false,\n      targetDuration: 0,\n      absStart: 0,\n      curAbsStart: 0,\n      curAbsEnd: 0,\n      timeRanges: []\n    };\n\n    this._seekEndTime = 0;\n    this._seekBeginTime = 0;\n\n    return Promise.resolve();\n  }\n\n  getStats() {\n    if (!this._player) {\n      return {\n        bytesLoaded: NaN,\n        currentCdnIndex: -1,\n        bandwidth: NaN,\n        bitrate: NaN,\n        switchInfo: NaN,\n        isAutoSwitch: true,\n        livePointOffest: -1\n      };\n    }\n\n    let bandwidth = 0;\n    let bitrate = 0;\n    let switchInfo = '';\n    let isAutoSwitch = true;\n    let livePointOffest = -1;\n    let currentCdnIndex = -1;\n    let bytesLoaded = [];\n    let switchHistory = [];\n    if (this._player) {\n      try {\n        bandwidth = this._player.streamController.fragLastKbps;\n        if (this._player.currentLevel != null && this._player.levels[this._player.currentLevel] && this._player.levels[this._player.currentLevel].bitrate) {\n          bitrate = Math.floor(this._player.levels[this._player.currentLevel].bitrate / 1000);\n        }\n\n        switchHistory = this._switchInfo;\n        if (switchHistory && switchHistory.length > 0) {\n          let to; let from; let adaption; let timestamp;\n          for (let i = switchHistory.length - 1; i >= 0; i--) {\n            if (switchHistory[i].type === 'variant') {\n              if (to == null) {\n                to = switchHistory[i].bandwidth;\n                adaption = switchHistory[i].fromAdaptation;\n                timestamp = switchHistory[i].timestamp;\n                continue;\n              } else if (to != null && from == null && timestamp !== switchHistory[i].timestamp) {\n                from = switchHistory[i].bandwidth;\n                break;\n              }\n            }\n          }\n          switchInfo = { 'from': from, 'to': to, 'fromAdaptation': adaption };\n        }\n\n        isAutoSwitch = this._config.autoLevelEnabled;\n        bytesLoaded = this._player.cdnsLoadBytes;\n        currentCdnIndex = this._player.currentCdnIndex;\n        let liveEdge = this._player.liveEdge;\n        if (this._isLive) {\n          livePointOffest = liveEdge - this._video.currentTime;\n        } else {\n          livePointOffest = this._player.vodDuration - this._video.currentTime;\n        }\n\n        return {\n          bandwidth: bandwidth,\n          bitrate: bitrate,\n          switchInfo: switchInfo,\n          switchHistory: switchHistory,\n          isAutoSwitch: isAutoSwitch,\n          bytesLoaded: bytesLoaded,\n          currentCdnIndex: currentCdnIndex,\n          livePointOffest: livePointOffest\n        };\n      } catch (e) {\n        // console.log(e);\n      }\n    }\n  }\n\n  setAdaptation(value) {\n    if (this._player) {\n      this._config.autoLevelEnabled = value;\n      if (value) {\n        this._player.autoLevelCapping = -1;\n        this._player.nextLevel = -1;\n      } else {\n        let level = this._player.currentLevel;\n        this._player.autoLevelCapping = level;\n        this._player.currentLevel = level;\n      }\n    }\n  }\n\n  isLive() {\n    return this._isLive;\n  }\n\n  gotoLive() {\n    if (this._timeline.timeRanges.length > 0) {\n      this.currentTime = TimeRangeUtil.relTimeToAbsTime(this._getRelEndLimit(), this._timeline.timeRanges, this._timeline.absStart);\n    }\n  }\n\n  audioTracks() {\n    if (!this._player) {\n      return;\n    }\n\n    let tracks = [];\n    let audioTracks = this._player.audioTracks;\n    if (audioTracks) {\n      audioTracks.forEach(function (track, index) {\n        // if (track.url != undefined || track.url != '')\n        tracks.push(new NLTrack(AdaptivePlayer.Kind.AUDIO, track, AdaptivePlayer.PlayerType.HLSJS, {\n          id: index,\n          player: this,\n          audioTrack: this._player.audioTrack\n        }));\n      }.bind(this));\n    }\n    return tracks;\n  }\n\n  textTracks() {\n    if (!this._player) {\n      return;\n    }\n\n    let tracks = [];\n    let textTracks = this._video.textTracks;\n    for (let i = 0; i < textTracks.length; i++) {\n      let base = this._video.textTracks[i];\n      if (base.label !== Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME && // discard text track of shaka\n        base.mode !== 'disabled' &&\n        base.hashId) {\n        if (base.kind === 'captions') {\n          tracks.push(new NLTrack(AdaptivePlayer.Kind.TEXT, base, AdaptivePlayer.PlayerType.NATIVE, {\n            id: base.hashId,\n            player: this._video,\n            ccInfos: this._player.getHlsCC()\n          }));\n        } else if (base.kind === 'subtitles') {\n          tracks.push(new NLTrack(AdaptivePlayer.Kind.TEXT, base, AdaptivePlayer.PlayerType.HLSJS, {\n            id: base.hashId,\n            player: this,\n            subtitleTrack: this._player.subtitleTrack\n          }));\n        }\n      }\n    }\n    return tracks;\n  }\n\n  ccTracks() {\n    let ccTracks = [];\n    for (let i = this._video.textTracks.length - 1; i >= 0; i--) {\n      let base = this._video.textTracks[i];\n      if (base.label !== Settings.DASHPLAYER.DEFAULT_SUBTITLE_TRACK_NAME && // discard text track of shaka\n        base.mode !== 'disabled' &&\n        base.kind === 'captions') {\n        ccTracks.push(base);\n      }\n    }\n    return ccTracks;\n  }\n\n  videoTracks() {\n    if (!this._player) {\n      return;\n    }\n\n    let tracks = [];\n    let videoTracks = this._player.levels;\n    if (videoTracks) {\n      videoTracks.forEach(function (track, index) {\n        tracks.push(new NLTrack(AdaptivePlayer.Kind.VIDEO, track, AdaptivePlayer.PlayerType.HLSJS, {\n          id: index,\n          player: this,\n          startLevel: (this._player.currentLevel >= 0) ? this._startLevel : null,\n          currentLevel: this._player.currentLevel,\n          levels: this._player.levels || []\n        }));\n      }.bind(this));\n    }\n    return tracks;\n  }\n\n  selectTrack(track, optClearBuffer) {\n    if (track) {\n      if (track.kind === AdaptivePlayer.Kind.AUDIO) {\n        this._player.audioTrack = track.id;\n      } else if (track.kind === AdaptivePlayer.Kind.TEXT) {\n        // hide all text tracks\n        for (let i = 0; i < this._video.textTracks.length; i++) {\n          let track = this._video.textTracks[i];\n          if (track.mode === 'showing') {\n            track.mode = 'hidden';\n          }\n        }\n        if (track.type === AdaptivePlayer.PlayerType.HLSJS) {\n          this._player.subtitleTrack = track.id;\n        } else {\n          this._player.subtitleTrack = -1;\n        }\n        track.base.mode = 'showing';\n      } else if (track.kind === AdaptivePlayer.Kind.VIDEO) {\n        // NFL-804: when changing bitrates player hesitates\n        if (!!optClearBuffer) {\n          this._player.currentLevel = track.id;\n        } else {\n          this._player.nextLevel = track.id;\n        }\n        this._player.autoLevelCapping = track.id;\n        this._config.autoLevelEnabled = false;\n      }\n    }\n  }\n\n  getThumbnailStreams() {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'HlsPlayer', 'getThumbnailStreams!');\n    if (this._player) {\n      return this._player.getThumbnailStreams();\n    }\n  }\n\n  getThumbnailStreamImages(streamid, time, thumbnailsCb) {\n    if (this._player && (!isNaN(time))) {\n      if (this._player.isCVodStream && this._player.timelineInfo && this._player.timelineInfo.init && this._player.timelineInfo.absStart > 0) {\n        time = TimeRangeUtil.relTimeToAbsTime(time, this._player.timelineInfo.timeRanges, this._player.timelineInfo.absStart);\n      }\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'getThumbnailStreamImages! time=' + time);\n      if (!TimeRangeUtil.vacancyTime(time, this._player.timelineInfo.timeRanges)) {\n        this._player.getThumbnailStreamImages(streamid, time, thumbnailsCb);\n      } else {\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'getThumbnailStreamImages: time is out of ranges.');\n      }\n    }\n  }\n\n  get currentTime() {\n    let absTime = this._video.currentTime;\n    // this._userConfig && !!this._userConfig.enableLTEmode\n    if (this._isLive || (this._userConfig && !!this._userConfig.enableLTEmode)) {\n      absTime = TimeRangeUtil.relTimeToAbsTime(this._video.currentTime, this._timeline.timeRanges, this._timeline.absStart);\n    }\n    \n    if (this._userConfig && !!this._userConfig.enableLTEmode) {\n      // adjust for LTE\n      let streamInfos = this._player.getLteStreamInfos(this._player.currentLevel);\n      if (streamInfos) {\n        absTime -= streamInfos.fixFrameOffset;\n      }\n    }\n    return absTime;\n  }\n\n  set currentTime(value) {\n    let rawAbsTime = value;\n    // this._userConfig && !!this._userConfig.enableLTEmode\n    if (this._isLive || (this._userConfig && !!this._userConfig.enableLTEmode)) {\n      let relTime = TimeRangeUtil.absTimeToRelTime(value, this._timeline.timeRanges, this._timeline.absStart);\n      if (relTime > this._getRelEndLimit()) {\n        relTime = this._getRelEndLimit();\n      }\n      if (relTime < this._getRelStartLimit()) {\n        relTime = this._getRelStartLimit();\n      }\n      value = relTime;\n    }\n    let rawRelTime = value;\n    let normalizeTime = value;\n    let offsetModRelTime = value;\n\n    if (this._userConfig && !!this._userConfig.enableLTEmode) {\n      // adjust for LTE\n      let streamInfos = this._player.getLteStreamInfos(this._player.currentLevel);\n      if (streamInfos) {\n        let normalizeTime = this._normalize(value, streamInfos.fixFrameOffset);\n        value = normalizeTime;\n        offsetModRelTime = normalizeTime + streamInfos.fixFrameOffset;\n        if (offsetModRelTime < 0) {\n          offsetModRelTime = 0;\n        }\n        value = offsetModRelTime;\n      }\n    }\n\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', `rawAbsTime=${rawAbsTime}, rawRelTime=${rawRelTime}, modRelTime=${normalizeTime}, offsetModRelTime=${offsetModRelTime}`);\n    this._seekBeginTime = Date.now();\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', `seekBegin=${this._seekBeginTime}`);\n\n    this._video.currentTime = value;\n  }\n\n  getNormalizeCurrentTime() {\n    let absTime = this.currentTime;\n    if (this._userConfig && !!this._userConfig.enableLTEmode) {\n      // adjust for LTE\n      let streamInfos = this._player.getLteStreamInfos(this._player.currentLevel);\n      if (streamInfos) {\n        if (absTime < 0) {\n          absTime = 0;\n        }\n        absTime = this._normalize(absTime, streamInfos.fixFrameOffset);\n      }\n    }\n    return absTime;\n  }\n\n  setNormalizeCurrentTime() {\n    let current = this._player.currentTime;\n    this._player.currentTime = current;\n  }\n\n  _normalize(time, sampleDuration) {\n    let reValue = time;\n    if (!isNaN(sampleDuration) && sampleDuration > 0) {\n      let divisor = Math.floor(time / sampleDuration);\n      let minTime = divisor * sampleDuration;\n      let maxTime = (divisor + 1) * sampleDuration;\n      reValue = ((time - minTime) <= (maxTime - time)) ? minTime : maxTime;\n    }\n    return reValue;\n  }\n\n  get sampleDuration() { \n    if (this._userConfig && !!this._userConfig.enableLTEmode) {\n      // adjust for LTE\n      let streamInfos = this._player.getLteStreamInfos(this._player.currentLevel);\n      if (streamInfos) {\n        return streamInfos.frameDuration;\n      }\n    }\n    return 0;\n  }\n\n  notifyPlayStarted() {\n    if (this._player && this._player.timelineInfo && this._player.timelineInfo.timeRanges.length > 0 && this._player.timelineInfo.absStart > 0) {\n      let range = {\n        start: this._player.timelineInfo.absStart,\n        end: this._player.timelineInfo.timeRanges[this._player.timelineInfo.timeRanges.length - 1].end,\n        ranges: this._player.timelineInfo.curTimeRanges\n      };\n      this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n        details: range,\n        data: range\n      }));\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'Fired SeekRangeChange for CVOD: ' + '[' + JSON.stringify(range) + ']');\n    }\n  }\n\n  notifyProfileChanged(data) {\n    // not trigger, use _onFragChanged instead\n  }\n\n  _onID3(event, data) {\n    if (!data.samples) {\n      return;\n    }\n\n    // TODO: need to fire id3 event on exact time of id3 event\n\n    // sort first\n    data.samples.sort(function (a, b) { return a.pts - b.pts });\n\n    // push to queue\n    data.samples.forEach(function (sample) {\n      sample.pts = TimeRangeUtil.relTimeToAbsTime(sample.pts, this._timeline.timeRanges, this._timeline.absStart);\n      sample.dts = TimeRangeUtil.relTimeToAbsTime(sample.dts, this._timeline.timeRanges, this._timeline.absStart);\n      this._cuepointManager.onID3(sample);\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'HlsPlayer', 'Got ID3 from Player: ' + event + '[' + sample.pts + ']');\n    }.bind(this));\n  }\n\n  _onThumbnailImageLoaded(event, data) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'HlsPlayer', '_onThumbnailImageLoaded: id=' + data.streamId +\n      ' requestTime=' + data.requestTime + ' baseTime=' + data.baseTime);\n    data.thumbnails.images.forEach(function (element) {\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'HlsPlayer', '_onThumbnailImageLoaded: url=' + element.url +\n        ' startTime=' + element.startTime + ' endTime=' + element.endTime);\n    }.bind(this));\n    let cb = data.cb;\n    let thumbnails = data.thumbnails;\n    if (cb != null) {\n      cb(thumbnails);\n    }\n  }\n\n  /**\n       * ad end event:\n       * @  {\n       *         start: xxxx,\n       *         data: { 'type':'ADEND', 'data': {'adid':'18732270_2659078'}}\n       *    }\n       * ad start event\n       * @  {\n       *         start: xxxx,\n       *         data: {'type':'ADSTART', data: {'adid':'18732270_2659078', 'urls':[{'type':'trackClick','url':'http://xxxx'}]}}\n       *    }\n       */\n  _onAdvertisement(event, data) {\n    if (data && data.type) {\n      this._eventHandler._onAdvertisement(data);\n    }\n  }\n\n  /**\n   * empty advertisement\n   *     data: [{sn: number, urls: Array[string]}]\n   */\n  _onEmptyAdvertisement(event, data) {\n    if (data) {\n      this._eventHandler._onEmptyAdvertisement(data);\n    }\n  }\n\n  /**\n   * adranges\n   *     data:[{id:string,start:number,end:number}]\n   */\n  _onAdRangesUpdate(event, data) {\n    if (data) {\n      this._eventHandler._onAdRangesUpdate(data);\n    }\n  }\n\n  _onFragRemuxed(event, data) {\n    if (data && this._config.logServer) {\n      let options = {\n        url: this._config.logServer + '/addStreams?name=' + data.name + '&type=' + data.type,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/octet-stream'\n        },\n        params: data.remuxedData.buffer\n      };\n      XHRUtil.createXHR(options).catch(function (e) { });\n    }\n  }\n\n  _onFragChanged(event, data) {\n    let level = (this._player.currentLevel === -1) ? data.frag.level : this._player.currentLevel;\n    if (this._currentLevel !== this._player.currentLevel) {\n      this._currentLevel = this._player.currentLevel;\n      this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.ProfileChange,\n        {\n          id: this._currentLevel,\n          videoWidth: this._player.levels[level].width,\n          videoHeight: this._player.levels[level].height\n        }));\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'Fired ProfileChange');\n    }\n  }\n\n  _onHlsjsEvent(event, data) {\n    this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.StreamingEvent, {\n      data: {\n        from: AdaptivePlayer.PlayerType.HLSJS,\n        data: data\n      }\n    }));\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'HlsPlayer', 'Fired streaming event: ' + event + '[' + data + ']');\n  }\n\n  _onManifestParsed(event, data) {\n    if (this._config.startBitrate > 0) {\n      let vTracks = this.videoTracks();\n      let level = -1;\n      let minBitrateLevel = -1;\n      let minBandwidth = Infinity;\n      vTracks.sort(function (a, b) {\n        return a.bandwidth - b.bandwidth;\n      }).forEach(function (item, index) {\n        if (item.bandwidth <= this._config.startBitrate) {\n          level = item.id;\n        }\n        if (item.bandwidth <= minBandwidth) {\n          minBandwidth = item.bandwidth;\n          minBitrateLevel = item.id;\n        }\n      }.bind(this));\n      if (level >= 0) {\n        this._player.currentLevel = this._startLevel = level;\n      } else if (this._config.startBitrate > 0 && minBitrateLevel >= 0) {\n        this._player.currentLevel = this._startLevel = minBitrateLevel;\n      }\n    }\n  }\n\n  _onLevelLoaded(event, data) {\n    this._isLive = data.details.live;\n    this._mergeProgrameTime(data);\n\n    // Live stream, need to send seek range change event\n    if (this._isLive) {\n      this._updateSeekRange();\n    } else {\n      if (!this._firstSeekforLTECVOD && this._userConfig && !!this._userConfig.enableLTEmode && this._userConfig.startPosition > 0) {\n        // HLS CVOD need to seek after level loaded\n        this.currentTime = this._userConfig.startPosition;\n        this._firstSeekforLTECVOD = true;\n      }\n    }\n\n    this._onHlsjsEvent(event, data);\n  }\n\n  _updateSeekRange() {\n    if (this._isLive) {\n      let relLivePosition = this._getRelEndLimit();\n      let range = {\n        start: this._timeline.curAbsStart,\n        end: TimeRangeUtil.relTimeToAbsTime(relLivePosition, this._timeline.timeRanges, this._timeline.absStart),\n        ranges: this._timeline.curTimeRanges\n      };\n      this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n        details: range,\n        data: range\n      }));\n      if (!!this._userConfig.enableLTEmode) {\n        this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.LTEEvent, {\n          details: {\n            type: 'ranges',\n            data: this._player.timelineInfo.timeRanges\n          }\n        }));\n      }\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'Fired SeekRangeChange: ' + '[' + JSON.stringify(range) + ']');\n    } else {\n      if (this._userConfig && (!!this._userConfig.enableLTEmode) && this._player.timelineInfo.timeRanges.length > 0 && this._player.timelineInfo.absStart > 0) {\n        let range = {\n          start: this._player.timelineInfo.absStart,\n          end: this._player.timelineInfo.timeRanges[this._player.timelineInfo.timeRanges.length - 1].end,\n          ranges: this._timeline.curTimeRanges\n        };\n        this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.SeekRangeChange, {\n          details: range,\n          data: range\n        }));\n        this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.LTEEvent, {\n          details: {\n            type: 'ranges', \n            data: this._player.timelineInfo.timeRanges\n          }\n        }));\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'Fired SeekRangeChange for CVOD: ' + '[' + JSON.stringify(range) + ']');\n      }\n    }\n  }\n\n  _onError(event, data) {\n    let errorInfo;\n    let url = '';\n\n    let mediaTypeTestCase = [\n      { name: 'manifest', code: NLError.Code.Get_Primary_Manifest_Failed },\n      { name: 'level', code: NLError.Code.Get_Single_Bitrate_Manifest_Failed },\n      { name: 'frag', code: NLError.Code.Get_Chunk_Failed },\n      { name: 'key', code: NLError.Code.Get_Key_License_Failed }\n    ];\n\n    let errorTypeTestCase = [\n      { name: 'LoadError', code: NLError.NetworkDetailCode.Http_Error },\n      { name: 'LoadTimeOut', code: NLError.NetworkDetailCode.Timeout },\n      { name: 'ParsingError', code: NLError.NetworkDetailCode.Content_Error },\n      { name: 'DecryptError', code: NLError.NetworkDetailCode.Content_Error }\n    ];\n\n    switch (data.type) {\n      case HlsInner.ErrorTypes.NETWORK_ERROR: {\n        let networkErrorDetail = data.details;\n        let mediaType = mediaTypeTestCase.filter(function (item) {\n          if (networkErrorDetail.indexOf(item.name) >= 0) return true;\n        })[0];\n        let errorType = errorTypeTestCase.filter(function (item) {\n          if (networkErrorDetail.indexOf(item.name) >= 0) return true;\n        })[0];\n\n        if (!mediaType || !errorType) {\n          break;\n        }\n\n        if (mediaType && mediaType.code === NLError.Code.Get_Chunk_Failed) {\n          url = data.frag ? data.frag.url : '';\n        } else {\n          url = data.url ? data.url : this._url;\n        }\n\n        if (errorType && errorType.code === NLError.NetworkDetailCode.Http_Error) {\n          errorType.code = data.response ? data.response.code : NLError.NetworkDetailCode.Http_Error;\n          errorType.code = (errorType.code > 0 && errorType.code < 600) ? errorType.code : NLError.NetworkDetailCode.Connect_Failed;\n        }\n        let errorCode = mediaType.code + errorType.code;\n        let errorLevel;\n        if (mediaType.name === 'manifest') {\n          errorLevel = data.fatal ? NLError.SeverityLevel.Fatal : NLError.SeverityLevel.Warning;\n        } else {\n          errorLevel = data.fatal ? NLError.SeverityLevel.Error : NLError.SeverityLevel.Warning;\n        }\n\n        errorInfo = NLError.create(errorCode, errorLevel, url, data.details);\n        this._statisticManager.reportError(errorInfo);\n      }\n        break;\n      // Identifier for a media Error (video/parsing/mediasource error)\n      case HlsInner.ErrorTypes.MEDIA_ERROR: {\n        if (!data.fatal) {\n          return;\n        } else {\n          if (data.details === HlsInner.ErrorDetails.FRAG_LOOP_LOADING_ERROR) {\n            this.print(AdaptivePlayer.LogLevel.WARNING, 'HlsPlayer', 'FRAG_LOOP_LOADING_ERROR fatal error encountered, try to recover');\n            this._player.recoverMediaError();\n            return;\n          }\n        }\n        let errorCode = NLError.Code.Playback_Generic_Error;\n        let errorLevel = NLError.SeverityLevel.Error;\n        if (data.details === HlsInner.ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR) {\n          // - raised when manifest only contains quality level with codecs incompatible with MediaSource Engine.\n          errorCode = NLError.Code.Incompatible_Codecs_Error;\n          errorLevel = NLError.SeverityLevel.Fatal;\n        }\n        errorInfo = NLError.create(errorCode, errorLevel, this._url, data.details)\n        this._statisticManager.reportError(errorInfo);\n      }\n        break;\n      // Identifier for a mux Error (demuxing/remuxing)\n      case HlsInner.ErrorTypes.MUX_ERROR:\n        break;\n      // Identifier for all other errors\n      case HlsInner.ErrorTypes.OTHER_ERROR: {\n        // LTE error handling\n        let lteErrors = [\n          HlsInner.ErrorDetails.LTE_PARSE_ERROR /** The stream can't be used by LTE\n                                                1. Not NeuLion streams, filename is not appended with date time; \n                                                2. Not float date time in filename */\n        ];\n        let foundErrors = lteErrors.filter(function (item) {\n          if (data.details.indexOf(item) >= 0) return true;\n        });\n        if (foundErrors.length > 0) {\n          // lte error\n          // trigger LTEEvent\n          let errorLevel = data.fatal ? NLError.SeverityLevel.Fatal : NLError.SeverityLevel.Warning;\n          this._statisticManager.reportError(\n            NLError.create(NLError.Code.Manifest_Not_For_LTE, errorLevel, this._url, data.details));\n        }\n      }\n        break;\n      default:\n        break;\n    }\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'HLS Error: ' + '[' + JSON.stringify(data.details) + ']');\n  }\n\n  _clearTextTracks() {\n    if (this._video) {\n      // remove text tracks\n      let textTracks = this._video.textTracks;\n      for (let i = textTracks.length - 1; i >= 0; i--) {\n        if (textTracks[i].cues && textTracks[i].cues.length > 0) {\n          // remove empty text cues\n          for (let j = textTracks[i].cues.length - 1; j >= 0; j--) {\n            textTracks[i].removeCue(textTracks[i].cues[j]);\n          }\n        }\n        if (textTracks[i].hashId) {\n          textTracks[i].hashId = null;\n          textTracks[i].mode = 'disabled'; // make it hidden\n        }\n        // video not reset, so all text tracks will be kept even after destroy\n        // dash & hls player\n      }\n    }\n  }\n\n  _mergeProgrameTime(data) {\n    this._timeline = this._player.timelineInfo;\n  }\n\n  _getRelStartLimit() {\n    return TimeRangeUtil.absTimeToRelTime(this._timeline.curAbsStart, this._timeline.timeRanges, this._timeline.absStart);\n  }\n\n  _getRelEndLimit() {\n    let end = TimeRangeUtil.absTimeToRelTime(this._timeline.curAbsEnd, this._timeline.timeRanges, this._timeline.absStart);\n    if (this._player && this._player.liveSyncPosition) {\n      end = this._player.liveSyncPosition;\n    } else {\n      // CSM-715 \"Begin From Start\" feature freezes within the first 10 seconds\n      // initialization with programDateTime + live edge by specs\n      end = end - 3 * this._timeline.targetDuration;\n    }\n    return end;\n  }\n\n  _printTimeline() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', 'Print timeline:');\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', '\\tabsStart=' + this._timeline.absStart + ' curAbsStart=' + this._timeline.curAbsStart + ' curAbsEnd=' + this._timeline.curAbsEnd);\n    for (let i = this._timeline.timeRanges.length - 1; i >= 0; i--) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'HlsPlayer', '\\t\\t begin=' + this._timeline.timeRanges[i].begin + ' end=' + this._timeline.timeRanges[i].end);\n    }\n  }\n}\n\nHlsPlayer.version = 'v' + HlsInner.version;\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Player/HlsPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 791,
    "kind": "variable",
    "name": "HlsInner",
    "memberof": "src/Player/HlsPlayer.js",
    "static": true,
    "longname": "src/Player/HlsPlayer.js~HlsInner",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Player/HlsPlayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 792,
    "kind": "class",
    "name": "HlsPlayer",
    "memberof": "src/Player/HlsPlayer.js",
    "static": true,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Player/HlsPlayer.js",
    "importStyle": "HlsPlayer",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Player/PlayerBase.js~PlayerBase"
    ]
  },
  {
    "__docId__": 793,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "_player",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_player",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "member",
    "name": "_isLive",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_isLive",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "_userConfig",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_userConfig",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 797,
    "kind": "member",
    "name": "_config",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_config",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "member",
    "name": "_currentLevel",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_currentLevel",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 799,
    "kind": "member",
    "name": "_startLevel",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_startLevel",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "member",
    "name": "_switchInfo",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_switchInfo",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "member",
    "name": "_firstSeekforLTECVOD",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_firstSeekforLTECVOD",
    "access": "private",
    "description": "used for LTE CVOD, need to seek to startPostion",
    "lineNumber": 25,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 802,
    "kind": "member",
    "name": "streamType",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#streamType",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 803,
    "kind": "member",
    "name": "_timeline",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_timeline",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"init\": *, \"targetDuration\": *, \"absStart\": *, \"curAbsStart\": *, \"curAbsEnd\": *, \"timeRanges\": *}"
      ]
    }
  },
  {
    "__docId__": 804,
    "kind": "member",
    "name": "type",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#type",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "member",
    "name": "_seekEndTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_seekEndTime",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 807,
    "kind": "member",
    "name": "_seekBeginTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_seekBeginTime",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#configure",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "load",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#load",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "startTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "member",
    "name": "_url",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_url",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "unload",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#unload",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "_id3Cues",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_id3Cues",
    "access": "private",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#getStats",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"bandwidth\": *, \"bitrate\": *, \"switchInfo\": *, \"switchHistory\": *, \"isAutoSwitch\": *, \"bytesLoaded\": *, \"currentCdnIndex\": *, \"livePointOffest\": *}"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "setAdaptation",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#setAdaptation",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "gotoLive",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#gotoLive",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 835,
    "kind": "method",
    "name": "audioTracks",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#audioTracks",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 836,
    "kind": "method",
    "name": "textTracks",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#textTracks",
    "access": "public",
    "description": null,
    "lineNumber": 392,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 837,
    "kind": "method",
    "name": "ccTracks",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#ccTracks",
    "access": "public",
    "description": null,
    "lineNumber": 422,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "videoTracks",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#videoTracks",
    "access": "public",
    "description": null,
    "lineNumber": 435,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#selectTrack",
    "access": "public",
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      },
      {
        "name": "optClearBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "getThumbnailStreams",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#getThumbnailStreams",
    "access": "public",
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "getThumbnailStreamImages",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#getThumbnailStreamImages",
    "access": "public",
    "description": null,
    "lineNumber": 494,
    "undocument": true,
    "params": [
      {
        "name": "streamid",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "thumbnailsCb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 842,
    "kind": "get",
    "name": "currentTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 508,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "set",
    "name": "currentTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 525,
    "undocument": true
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "getNormalizeCurrentTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#getNormalizeCurrentTime",
    "access": "public",
    "description": null,
    "lineNumber": 563,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "setNormalizeCurrentTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#setNormalizeCurrentTime",
    "access": "public",
    "description": null,
    "lineNumber": 578,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "_normalize",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_normalize",
    "access": "private",
    "description": null,
    "lineNumber": 583,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleDuration",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 848,
    "kind": "get",
    "name": "sampleDuration",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#sampleDuration",
    "access": "public",
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "notifyPlayStarted",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#notifyPlayStarted",
    "access": "public",
    "description": null,
    "lineNumber": 605,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "notifyProfileChanged",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#notifyProfileChanged",
    "access": "public",
    "description": null,
    "lineNumber": 620,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "_onID3",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onID3",
    "access": "private",
    "description": null,
    "lineNumber": 624,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "_onThumbnailImageLoaded",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onThumbnailImageLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 643,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "_onAdvertisement",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onAdvertisement",
    "access": "private",
    "description": "ad end event:\n@  {\n        start: xxxx,\n        data: { 'type':'ADEND', 'data': {'adid':'18732270_2659078'}}\n   }\nad start event\n@  {\n        start: xxxx,\n        data: {'type':'ADSTART', data: {'adid':'18732270_2659078', 'urls':[{'type':'trackClick','url':'http://xxxx'}]}}\n   }",
    "lineNumber": 669,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 854,
    "kind": "method",
    "name": "_onEmptyAdvertisement",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onEmptyAdvertisement",
    "access": "private",
    "description": "empty advertisement\n    data: [{sn: number, urls: Array[string]}]",
    "lineNumber": 679,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "_onAdRangesUpdate",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onAdRangesUpdate",
    "access": "private",
    "description": "adranges\n    data:[{id:string,start:number,end:number}]",
    "lineNumber": 689,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "_onFragRemuxed",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onFragRemuxed",
    "access": "private",
    "description": null,
    "lineNumber": 695,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "_onFragChanged",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onFragChanged",
    "access": "private",
    "description": null,
    "lineNumber": 709,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "_onHlsjsEvent",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onHlsjsEvent",
    "access": "private",
    "description": null,
    "lineNumber": 723,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "_onManifestParsed",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onManifestParsed",
    "access": "private",
    "description": null,
    "lineNumber": 733,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "_onLevelLoaded",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onLevelLoaded",
    "access": "private",
    "description": null,
    "lineNumber": 758,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "_updateSeekRange",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_updateSeekRange",
    "access": "private",
    "description": null,
    "lineNumber": 776,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "_clearTextTracks",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_clearTextTracks",
    "access": "private",
    "description": null,
    "lineNumber": 924,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 868,
    "kind": "method",
    "name": "_mergeProgrameTime",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_mergeProgrameTime",
    "access": "private",
    "description": null,
    "lineNumber": 945,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "_getRelStartLimit",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_getRelStartLimit",
    "access": "private",
    "description": null,
    "lineNumber": 949,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 871,
    "kind": "method",
    "name": "_getRelEndLimit",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_getRelEndLimit",
    "access": "private",
    "description": null,
    "lineNumber": 953,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "_printTimeline",
    "memberof": "src/Player/HlsPlayer.js~HlsPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/HlsPlayer.js~HlsPlayer#_printTimeline",
    "access": "private",
    "description": null,
    "lineNumber": 965,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 873,
    "kind": "file",
    "name": "src/Player/PlayerBase.js",
    "content": "import { FakeEvent } from '../Utils/FakeEvent';\nimport { AdaptivePlayer } from '../AdaptivePlayer'\nimport { Logger } from '../Utils/Logger';\n\nexport class PlayerBase extends Logger {\n  constructor(video, parent) {\n    super(parent._logger);\n    this._video = video;\n    this._eventHandler = parent;\n    this._cuepointManager = parent._cuepointManager;\n    this._statisticManager = parent._statisticManager;\n  }\n  \n  destroy() {}\n\n  configure(config) {}\n  load(url, startTime) {}\n  unload() {}\n  gotoLive() {}\n  selectTrack(track) {}\n  setAdaptation(value) {}\n\n  getStats() {\n    return {\n      bytesLoaded: NaN,\n      bandwidth: NaN,\n      bitrate: NaN,\n      switchInfo: NaN,\n      switchHistory: NaN,\n      isAutoSwitch: true,\n      livePointOffest: -1\n    };\n  }\n  isLive() {}\n\n  videoTracks() {\n    return [];\n  }\n  audioTracks() {\n    return [];\n  }\n  textTracks() {\n    return [];\n  }\n  ccTracks() {\n    return [];\n  }\n\n  getThumbnailStreams() {}\n  getThumbnailStreamImages() {}\n\n  get currentTime() {}\n  set currentTime(value) {}\n\n  get sampleDuration() { return 0; }\n  \n  // event from adaptiveplayer\n  /**\n   * Notify AdaptivePlayer.EventType.ProfileChange\n   * @param {Object} data {videoWidth, videoHeight}\n   */\n  notifyProfileChanged(data) {\n    if (data.videoHeight === 0 || data.videoWidth === 0) {\n      return; // ignore\n    }\n\n    let newData = {\n      videoWidth: data.videoWidth,\n      videoHeight: data.videoHeight,\n      details: {\n        videoWidth: data.videoWidth,\n        videoHeight: data.videoHeight\n      }\n    };\n    this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.ProfileChange, newData));\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'PlayerBase', 'Fired ProfileChange: ' + JSON.stringify(newData));\n  }\n\n  /**\n   * Notify AdaptivePlayer.EventType.PlayStart\n   */\n  notifyPlayStarted() {}\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Player/PlayerBase.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 874,
    "kind": "class",
    "name": "PlayerBase",
    "memberof": "src/Player/PlayerBase.js",
    "static": true,
    "longname": "src/Player/PlayerBase.js~PlayerBase",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Player/PlayerBase.js",
    "importStyle": "{PlayerBase}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Utils/Logger.js~Logger"
    ]
  },
  {
    "__docId__": 875,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 876,
    "kind": "member",
    "name": "_video",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#_video",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "member",
    "name": "_eventHandler",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#_eventHandler",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 878,
    "kind": "member",
    "name": "_cuepointManager",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#_cuepointManager",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "member",
    "name": "_statisticManager",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#_statisticManager",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#configure",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "load",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#load",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "startTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 883,
    "kind": "method",
    "name": "unload",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#unload",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 884,
    "kind": "method",
    "name": "gotoLive",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#gotoLive",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 885,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#selectTrack",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "setAdaptation",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#setAdaptation",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 887,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#getStats",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"bytesLoaded\": *, \"bandwidth\": *, \"bitrate\": *, \"switchInfo\": *, \"switchHistory\": *, \"isAutoSwitch\": boolean, \"livePointOffest\": *}"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "videoTracks",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#videoTracks",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "audioTracks",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#audioTracks",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "textTracks",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#textTracks",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "ccTracks",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#ccTracks",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "getThumbnailStreams",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#getThumbnailStreams",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "getThumbnailStreamImages",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#getThumbnailStreamImages",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 895,
    "kind": "get",
    "name": "currentTime",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 896,
    "kind": "set",
    "name": "currentTime",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#currentTime",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 897,
    "kind": "get",
    "name": "sampleDuration",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#sampleDuration",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "notifyProfileChanged",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#notifyProfileChanged",
    "access": "public",
    "description": "Notify AdaptivePlayer.EventType.ProfileChange",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "{videoWidth, videoHeight}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "notifyPlayStarted",
    "memberof": "src/Player/PlayerBase.js~PlayerBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/PlayerBase.js~PlayerBase#notifyPlayStarted",
    "access": "public",
    "description": "Notify AdaptivePlayer.EventType.PlayStart",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 900,
    "kind": "file",
    "name": "src/Player/WebRTCPlayer.js",
    "content": "import { AdaptivePlayer } from '../AdaptivePlayer';\nimport { PlayerBase } from './PlayerBase'\nimport { EventManager } from '../Manager/EventManager';\nimport { Settings } from '../config';\nimport { NLTrack } from '../Media/NLTrack';\nimport { FakeEvent } from '../Utils/FakeEvent';\nimport { NLError } from '../Media/NLError';\n\nexport default class WebRTCPlayer extends PlayerBase {\n  constructor(video, parent) {\n    super(video, parent);\n\n    this._tracks = [];\n    this._bitrate = 0;\n\n    this._config = {};\n\n    this.type = AdaptivePlayer.PlayerType.WEBRTC;\n    this.streamType = AdaptivePlayer.StreamType.WEBRTC;\n\n    this._wsCodeNormalClosed = Settings.WEBRTCPLAYER.WS_NORMAL_CLOSE;\n\n    // register events from Shaka\n    // manage events of video element\n    this._eventManager = new EventManager();\n  }\n\n  configure(config) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'configure called!');\n    this._config = {\n      iceServers: Settings.WEBRTCPLAYER.DEFAULT_ICE_SERVERS,\n      abr: { enabled: true }\n    };\n    if (config.iceServers) {\n      this._config.iceServers = config.iceServers;\n    }\n    this._config.abr = config.abr;\n  }\n\n  load(url, startTime) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'load called!');\n    this._url = url;\n    if (this._websocket) {\n      this._websocket.close(this._wsCodeNormalClosed);\n    } else {\n      this._websocket = new WebSocket(this._url);\n      this._eventManager.listen(this._websocket, 'open', this._onWSOpened.bind(this));\n      this._eventManager.listen(this._websocket, 'message', this._onWSMessage.bind(this));\n      this._eventManager.listen(this._websocket, 'close', this._onWSClose.bind(this));\n      this._eventManager.listen(this._websocket, 'error', this._onWSError.bind(this));\n    }\n  }\n\n  isLive() {\n    return (this._video.duration === Infinity);\n  }\n\n  unload() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'unload called!');\n    if (this._eventManager) {\n      this._eventManager.removeAll();\n    }\n    if (this._peer_connection) {\n      this._peer_connection.close();\n    }\n    if (this._video.captureStream) {\n      this._video.captureStream().getTracks().forEach(function (track) { track.stop(); });\n    }\n\n    this._video.srcObject = null;\n    this._url = '';\n    this._current_bw = 0;\n    this._bitrate = 0;\n    this._tracks = [];\n\n    return Promise.resolve();\n  }\n\n  destroy() {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'destroy called!');\n\n    this.unload();\n\n    if (this._eventManager) {\n      this._eventManager.destroy();\n    }\n    return Promise.resolve();\n  }\n\n  getStats() {\n    return {\n      bytesLoaded: NaN,\n      bandwidth: this._current_bw / 1000,\n      bitrate: this._bitrate / 1000,\n      switchInfo: NaN,\n      switchHistory: NaN,\n      isAutoSwitch: !!this._config.abr.enabled,\n      livePointOffest: -1\n    };\n  }\n\n  videoTracks() {\n    return this._tracks;\n  }\n\n  selectTrack(track) {\n    if (track) {\n      let node = {};\n      node.type = 'user_bitrate';\n      node.payload = {};\n      node.payload.bitrate = parseInt(track.bandwidth / 1000);\n      let jsonString = JSON.stringify(node);\n\n      this._websocket.send(jsonString);\n\n      this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'auto quality switch status changed to manual');\n\n      this._bitrate = parseInt(track.base);\n\n      this._config.abr.enabled = false;\n    }\n  }\n\n  setAdaptation(value) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'auto quality switch status changed to auto');\n    this._config.abr.enabled = value;\n    if (value) {\n      let node = {};\n      node.type = 'user_bitrate';\n      node.payload = {};\n      node.payload.bitrate = parseInt(0);\n      let jsonString = JSON.stringify(node);\n\n      this._websocket.send(jsonString);\n    }\n  }\n\n  notifyProfileChanged(data) {\n    // notify profile change\n    for (let i = 0; i < this._tracks.length; i++) {\n      this._tracks[i].active = false;\n      if (this._tracks[i].bandwidth === this._bitrate) {\n        this._tracks[i].active = true;\n        let newData = {\n          id: i,\n          videoWidth: data.videoWidth,\n          videoHeight: data.videoHeight\n        };\n        this._eventHandler.dispatchEvent(new FakeEvent(AdaptivePlayer.EventType.ProfileChange, {\n          details: newData\n        }));\n        this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'Fired ProfileChange: ' + JSON.stringify(newData));\n      }\n    }\n  }\n\n  _onWSOpened(event) {\n    this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'ws opened');\n\n    this._peer_connection = new RTCPeerConnection(this._config);\n    this._peer_connection.ontrack = function (event) { // Never called in chrome 61\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'track added');\n    }.bind(this);\n\n    this._peer_connection.onaddstream = function (event) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'stream added');\n      this._video.srcObject = event.stream;\n    }.bind(this);\n  }\n\n  _onWSMessage(msg) {\n    this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'message : ' + msg.data);\n\n    let data = JSON.parse(msg.data);\n\n    switch (data.type) {\n      case 'offer': \n        this._peer_connection.setRemoteDescription({ type: 'offer', sdp: data.payload });\n\n        this._peer_connection.onicecandidate = function (event) {\n          if (event.candidate) {\n            this._websocket.send(JSON.stringify({ type: 'ice', payload: event.candidate }));\n          }\n        }.bind(this);\n\n        this._peer_connection.createAnswer().then(function (answer) {\n          this._peer_connection.setLocalDescription(answer);\n\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'answer : ' + JSON.stringify(answer));\n\n          this._websocket.send(JSON.stringify({ type: 'answer', payload: answer }));\n        }.bind(this));\n        break;\n\n      case 'ice': \n        this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'ice candidate : ' + JSON.stringify(data.payload));\n        this._peer_connection.addIceCandidate(new RTCIceCandidate(data.payload)).catch(function (e) {\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'add ice failed ' + e);\n          this._onError(e);\n        });\n        break;\n\n      case 'available_qualities': {\n        this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'available qualities: ' + JSON.stringify(data.bitrates));\n\n        let bitrates = data.bitrates;\n        this._tracks = [];\n        for (let i = 0; i < bitrates.length; i++) {\n          this._tracks.push(new NLTrack('VIDEO', bitrates[i].bitrate * 1000, AdaptivePlayer.PlayerType.WEBRTC, i, this));\n          this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'available qualities : ' + JSON.stringify(bitrates[i].bitrate + ' Kbit'));\n        }\n\n        this._websocket.send(JSON.stringify({ type: 'hello' }));\n\n        this._bitrate = bitrates[0].bitrate * 1000;\n      }\n        break;\n\n      case 'current_net_bw': \n        this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'Current Network Bandwidth: ' + data.bitrate + 'Kbit');\n        this._current_bw = data.bitrate * 1000;\n        break;\n\n      case 'current_quality': \n        this.print(AdaptivePlayer.LogLevel.TRACE, 'WebRTCPlayer', 'current quality: ' + JSON.stringify(data.bitrate));\n        this._bitrate = data.bitrate * 1000;\n        break;\n    }\n  }\n\n  _onWSClose(evt) {\n    if (evt.code === WebRTCPlayer.WS_NORMAL_CLOSE) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'ws closed');\n    } else {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'ws connection error');\n      this._onError(evt);\n    }\n    this._websocket = null;\n  }\n\n  _onWSError(evt) {\n    if (this._websocket.readyState === 1) {\n      this.print(AdaptivePlayer.LogLevel.DEBUG, 'WebRTCPlayer', 'ws normal error: ' + evt.type);\n    }\n  }\n\n  _onError(e) {\n    let level = NLError.SeverityLevel.Fatal;\n    let errorCode = NLError.Code.Get_Primary_Manifest_Failed + NLError.NetworkDetailCode.Connect_Failed;\n    let url = this._url;\n    let message = 'WebRTC closeEvent ';\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n    // TODO: Need more test to set correct errorCode\n    if (e.code === 1000) { // Normal Closure\n      // ;\n    } else if (e.code === 1001) { //\tGoing Away \n      message += 'Going Away';\n    } else if (e.code === 1002) { // Protocol Error\n      message += 'Protocol Error';\n    } else if (e.code === 1003) { //\tUnsupported Data \n      message += 'Protocol Error';\n    } else if (e.code === 1004) { // \n      message += 'Protocol Error';\n    } else if (e.code === 1005) { //\tNo Status Recvd \n      message += 'No Status Recvd';\n    } else if (e.code === 1006) { // Abnormal Closure\n      message += 'Abnormal Closure';\n    } else if (e.code === 1007) { //\tInvalid frame payload data \n      message += 'Invalid frame payload data';\n    } else if (e.code === 1008) { //\tPolicy Violation\n      message += 'Policy Violation';\n    } else if (e.code === 1009) { // Message too big\n      message += 'Message too big';\n    } else if (e.code === 1010) { //\tMissing Extension\n      message += 'Missing Extension';\n    } else if (e.code === 1011) { // Internal Error\n      message += 'Internal Error';\n    } else if (e.code === 1012) { //\tService Restart \n      message += 'Service Restart ';\n    } else if (e.code === 1013) { //\tTry Again Later\n      message += 'Try Again Later';\n    } else if (e.code === 1014) { // Bad Gateway\n      message += 'Bad Gateway';\n    } else if (e.code === 1015) { //\tTLS Handshake\n      message += 'TLS Handshake';\n    } else { //\tNot defined yet \n      return;\n    }\n\n    let errorInfo = NLError.create(errorCode, level, url, message, e.code);\n    this._statisticManager.reportError(errorInfo);\n    this.print(AdaptivePlayer.LogLevel.ERROR, 'WebRTCPlayer', 'Fired streaming error: ' + message);\n  }\n}\n\nWebRTCPlayer.version = 'v0.0.1';\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Player/WebRTCPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 901,
    "kind": "class",
    "name": "WebRTCPlayer",
    "memberof": "src/Player/WebRTCPlayer.js",
    "static": true,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Player/WebRTCPlayer.js",
    "importStyle": "WebRTCPlayer",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Player/PlayerBase.js~PlayerBase"
    ]
  },
  {
    "__docId__": 902,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 903,
    "kind": "member",
    "name": "_tracks",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_tracks",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "member",
    "name": "_bitrate",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_bitrate",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "member",
    "name": "_config",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_config",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 906,
    "kind": "member",
    "name": "type",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#type",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 907,
    "kind": "member",
    "name": "streamType",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#streamType",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 908,
    "kind": "member",
    "name": "_wsCodeNormalClosed",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_wsCodeNormalClosed",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 909,
    "kind": "member",
    "name": "_eventManager",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_eventManager",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#configure",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "load",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#load",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "startTime",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 913,
    "kind": "member",
    "name": "_url",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_url",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 914,
    "kind": "member",
    "name": "_websocket",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_websocket",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 915,
    "kind": "method",
    "name": "isLive",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#isLive",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 916,
    "kind": "method",
    "name": "unload",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#unload",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 918,
    "kind": "member",
    "name": "_current_bw",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_current_bw",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 921,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 922,
    "kind": "method",
    "name": "getStats",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#getStats",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"bytesLoaded\": *, \"bandwidth\": *, \"bitrate\": *, \"switchInfo\": *, \"switchHistory\": *, \"isAutoSwitch\": *, \"livePointOffest\": *}"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "videoTracks",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#videoTracks",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "selectTrack",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#selectTrack",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "setAdaptation",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#setAdaptation",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "notifyProfileChanged",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#notifyProfileChanged",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "_onWSOpened",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_onWSOpened",
    "access": "private",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 929,
    "kind": "member",
    "name": "_peer_connection",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_peer_connection",
    "access": "private",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "_onWSMessage",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_onWSMessage",
    "access": "private",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 935,
    "kind": "method",
    "name": "_onWSClose",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_onWSClose",
    "access": "private",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 937,
    "kind": "method",
    "name": "_onWSError",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_onWSError",
    "access": "private",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "evt",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 938,
    "kind": "method",
    "name": "_onError",
    "memberof": "src/Player/WebRTCPlayer.js~WebRTCPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Player/WebRTCPlayer.js~WebRTCPlayer#_onError",
    "access": "private",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 939,
    "kind": "file",
    "name": "src/require-babel-polyfill.js",
    "content": "/**\n * use require for babel-polyfill as it can be single instance only\n */\n\nexport default (() => {\n  if (!global || !global._babelPolyfill) {\n    require('babel-polyfill')\n  }\n})()\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/require-babel-polyfill.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 940,
    "kind": "file",
    "name": "src/Utils/FakeEvent.js",
    "content": "/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class FakeEvent {\n  /**\n   * Create an Event work-alike object based on the dictionary.\n   * The event should contain all of the same properties from the dict.\n   *\n   * @param {string} type\n   * @param {Object=} optDict\n   * @constructor\n   * @extends {Event}\n   */\n  constructor(type, optDict) {\n    // Take properties from dict if present.\n    let dict = optDict || {};\n    for (let key in dict) {\n      this[key] = dict[key];\n    }\n\n    // These Properties below cannot be set by dict.  They are all provided for\n    // compatibility with native events.\n\n    /** @const {boolean} */\n    this.bubbles = false;\n\n    /** @const {boolean} */\n    this.cancelable = false;\n\n    /** @const {boolean} */\n    this.defaultPrevented = false;\n\n    /**\n     * According to MDN, Chrome uses high-res timers instead of epoch time.\n     * Follow suit so that timeStamps on FakeEvents use the same base as\n     * on native Events.\n     * @const {number}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\n     */\n    this.timeStamp = (window.performance && window.performance.now) ? window.performance.now() : Date.now();\n\n    /** @const {string} */\n    this.type = type;\n\n    /** @const {boolean} */\n    this.isTrusted = false;\n\n    /** @type {EventTarget} */\n    this.currentTarget = null;\n\n    /** @type {EventTarget} */\n    this.target = null;\n\n    /**\n     * Non-standard property read by FakeEventTarget to stop processing listeners.\n     * @type {boolean}\n     */\n    this.stopped = false;\n  }\n\n  /**\n   * Does nothing, since FakeEvents have no default.  Provided for compatibility\n   * with native Events.\n   */\n  preventDefault() { }\n\n  /**\n   * Stops processing event listeners for this event.  Provided for compatibility\n   * with native Events.\n   */\n  stopImmediatePropagation() {\n    this.stopped = true;\n  }\n\n  /**\n   * Does nothing, since FakeEvents do not bubble.  Provided for compatibility\n   * with native Events.\n   */\n  stopPropagation() { }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/FakeEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 941,
    "kind": "class",
    "name": "FakeEvent",
    "memberof": "src/Utils/FakeEvent.js",
    "static": true,
    "longname": "src/Utils/FakeEvent.js~FakeEvent",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/FakeEvent.js",
    "importStyle": "{FakeEvent}",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@license",
        "tagValue": "Copyright 2016 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 942,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#constructor",
    "access": "public",
    "description": "Create an Event work-alike object based on the dictionary.\nThe event should contain all of the same properties from the dict.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "{Event}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object="
        ],
        "spread": false,
        "optional": false,
        "name": "optDict",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 943,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 944,
    "kind": "member",
    "name": "bubbles",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#bubbles",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{boolean}"
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 945,
    "kind": "member",
    "name": "cancelable",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#cancelable",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{boolean}"
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 946,
    "kind": "member",
    "name": "defaultPrevented",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#defaultPrevented",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{boolean}"
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 947,
    "kind": "member",
    "name": "timeStamp",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#timeStamp",
    "access": "public",
    "description": "According to MDN, Chrome uses high-res timers instead of epoch time.\nFollow suit so that timeStamps on FakeEvents use the same base as\non native Events.",
    "see": [
      "https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp"
    ],
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{number}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 948,
    "kind": "member",
    "name": "type",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#type",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{string}"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 949,
    "kind": "member",
    "name": "isTrusted",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#isTrusted",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": "{boolean}"
      }
    ],
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 950,
    "kind": "member",
    "name": "currentTarget",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#currentTarget",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "EventTarget"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 951,
    "kind": "member",
    "name": "target",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#target",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "EventTarget"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 952,
    "kind": "member",
    "name": "stopped",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#stopped",
    "access": "public",
    "description": "Non-standard property read by FakeEventTarget to stop processing listeners.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 953,
    "kind": "method",
    "name": "preventDefault",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#preventDefault",
    "access": "public",
    "description": "Does nothing, since FakeEvents have no default.  Provided for compatibility\nwith native Events.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 954,
    "kind": "method",
    "name": "stopImmediatePropagation",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#stopImmediatePropagation",
    "access": "public",
    "description": "Stops processing event listeners for this event.  Provided for compatibility\nwith native Events.",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 956,
    "kind": "method",
    "name": "stopPropagation",
    "memberof": "src/Utils/FakeEvent.js~FakeEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEvent.js~FakeEvent#stopPropagation",
    "access": "public",
    "description": "Does nothing, since FakeEvents do not bubble.  Provided for compatibility\nwith native Events.",
    "lineNumber": 93,
    "params": [],
    "return": null
  },
  {
    "__docId__": 957,
    "kind": "file",
    "name": "src/Utils/FakeEventTarget.js",
    "content": "/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MultiMap } from './MultiMap'\n\n/**\n * A work-alike for EventTarget.  Only DOM elements may be true EventTargets,\n * but this can be used as a base class to provide event dispatch to non-DOM\n * classes.  Only FakeEvents should be dispatched.\n *\n * @class FakeEventTarget\n */\nexport class FakeEventTarget {\n  constructor() {\n    // @private {!shaka.util.MultiMap.<shaka.util.FakeEventTarget.ListenerType>}\n    this.listeners_ = new MultiMap();\n  }\n\n  /**\n   * Add an event listener to this object.\n   *\n   * @param {string} type The event type to listen for.\n   * @param {ListenerType} listener The callback or\n   *   listener object to invoke.\n   * @param {boolean=} optCapturing Ignored.  do not have\n   *   parents, so events neither capture nor bubble.\n   * @override\n   */\n  addEventListener(type, listener, optCapturing) {\n    this.listeners_.push(type, listener);\n  }\n\n  /**\n   * Remove an event listener from this object.\n   *\n   * @param {string} type The event type for which you wish to remove a listener.\n   * @param {ListenerType} listener The callback or\n   *   listener object to remove.\n   * @param {boolean=} optCapturing Ignored.  FakeEventTargets do not have\n   *   parents, so events neither capture nor bubble.\n   * @override\n   */\n  removeEventListener(type, listener, optCapturing) {\n    this.listeners_.remove(type, listener);\n  }\n\n  destroy() {\n    this.listeners_.clear();\n  }\n\n  /**\n   * Dispatch an event from this object.\n   *\n   * @param {!Event} event The event to be dispatched from this object.\n   * @return {boolean} True if the default action was prevented.\n   * @override\n   */\n  dispatchEvent(event) {\n    let list = this.listeners_.get(event.type) || [];\n\n    for (let i = 0; i < list.length; ++i) {\n      // Do this every time, since events can be re-dispatched from handlers.\n      event.target = this;\n      event.currentTarget = this;\n\n      let listener = list[i];\n      try {\n        if (listener.handleEvent) {\n          listener.handleEvent(event);\n        } else {\n          listener.call(this, event);\n        }\n      } catch (exception) {\n        // Exceptions during event handlers should not affect the caller,\n        // but should appear on the console as uncaught, according to MDN:\n        // http://goo.gl/N6Ff27\n        // console.log('Uncaught exception in event handler', exception);\n      }\n\n      if (event.stopped) {\n        break;\n      }\n    }\n\n    return event.defaultPrevented;\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/FakeEventTarget.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 958,
    "kind": "class",
    "name": "FakeEventTarget",
    "memberof": "src/Utils/FakeEventTarget.js",
    "static": true,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/FakeEventTarget.js",
    "importStyle": "{FakeEventTarget}",
    "description": "A work-alike for EventTarget.  Only DOM elements may be true EventTargets,\nbut this can be used as a base class to provide event dispatch to non-DOM\nclasses.  Only FakeEvents should be dispatched.",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FakeEventTarget"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 959,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 960,
    "kind": "member",
    "name": "listeners_",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#listeners_",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "addEventListener",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#addEventListener",
    "access": "public",
    "description": "Add an event listener to this object.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type to listen for."
      },
      {
        "nullable": null,
        "types": [
          "ListenerType"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "The callback or\n  listener object to invoke."
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "optCapturing",
        "description": "Ignored.  do not have\n  parents, so events neither capture nor bubble."
      }
    ],
    "override": true,
    "return": null
  },
  {
    "__docId__": 962,
    "kind": "method",
    "name": "removeEventListener",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#removeEventListener",
    "access": "public",
    "description": "Remove an event listener from this object.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The event type for which you wish to remove a listener."
      },
      {
        "nullable": null,
        "types": [
          "ListenerType"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "The callback or\n  listener object to remove."
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "optCapturing",
        "description": "Ignored.  FakeEventTargets do not have\n  parents, so events neither capture nor bubble."
      }
    ],
    "override": true,
    "return": null
  },
  {
    "__docId__": 963,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "dispatchEvent",
    "memberof": "src/Utils/FakeEventTarget.js~FakeEventTarget",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/FakeEventTarget.js~FakeEventTarget#dispatchEvent",
    "access": "public",
    "description": "Dispatch an event from this object.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": false,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event to be dispatched from this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the default action was prevented."
    },
    "override": true
  },
  {
    "__docId__": 965,
    "kind": "file",
    "name": "src/Utils/Log.js",
    "content": "/* eslint no-console: \"off\" */\nlet instance = null;\n\n/**\n * class LogUtil\n */\nexport class LogUtil {\n    constructor() {\n        if (!instance) {\n            instance = this;\n        }\n        this._level = LogUtil.LogLevel.INFO;\n        return instance;\n    }\n    print(level, from, message) {\n        if (level < this._level) {\n            return;\n        }\n        let date = new Date().toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n        let text = '[' + date + '] ' + from + ': ' + message;\n        switch (level) {\n            case LogUtil.LogLevel.TRACE:\n                text = '[TRACE] ' + text;\n                console.trace(text);\n                break;\n            case LogUtil.LogLevel.DEBUG:\n                text = '[DEBUG] ' + text;\n                console.debug(text);\n                break;\n            case LogUtil.LogLevel.INFO:\n                text = '[INFO] ' + text;\n                console.info(text);\n                break;\n            case LogUtil.LogLevel.WARNING:\n                text = '[WARNING] ' + text;\n                console.warn(text);\n                break;\n            case LogUtil.LogLevel.ERROR:\n                text = '[ERROR] ' + text;\n                console.error(text);\n                break;\n            case LogUtil.LogLevel.HIGHLIGHTED:\n                text = '[HIGHLIGHTED] ' + text;\n                console.log(text);\n                break;                \n        }\n    }\n\n    setLogLevel(level) {\n        this._level = level;\n    }\n}\n\n/**\n * Log level\n * @readonly\n * @enum {number}\n * @static\n * @type LogUtil.LogLevel\n */\nLogUtil.LogLevel = {\n    TRACE: 0,\n    DEBUG: 1,\n    INFO: 2,\n    WARNING: 3,\n    ERROR: 4,\n    HIGHLIGHTED: 99\n};\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Log.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 966,
    "kind": "variable",
    "name": "instance",
    "memberof": "src/Utils/Log.js",
    "static": true,
    "longname": "src/Utils/Log.js~instance",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Utils/Log.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 967,
    "kind": "class",
    "name": "LogUtil",
    "memberof": "src/Utils/Log.js",
    "static": true,
    "longname": "src/Utils/Log.js~LogUtil",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Log.js",
    "importStyle": "{LogUtil}",
    "description": "class LogUtil",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 968,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/Log.js~LogUtil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Log.js~LogUtil#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 969,
    "kind": "member",
    "name": "_level",
    "memberof": "src/Utils/Log.js~LogUtil",
    "static": false,
    "longname": "src/Utils/Log.js~LogUtil#_level",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 970,
    "kind": "method",
    "name": "print",
    "memberof": "src/Utils/Log.js~LogUtil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Log.js~LogUtil#print",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 971,
    "kind": "method",
    "name": "setLogLevel",
    "memberof": "src/Utils/Log.js~LogUtil",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Log.js~LogUtil#setLogLevel",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 973,
    "kind": "file",
    "name": "src/Utils/Logger.js",
    "content": "import { Settings } from '../config';\nimport { LogUtil } from './Log';\n\nexport class Logger {\n  constructor(logger) {\n    this._logger = logger;\n    this._logEnabled = true;\n    this._logHighlighted = false;\n\n    if (Settings.LOG_HIGHLIGHTED && typeof Settings.LOG_HIGHLIGHTED[this.constructor.name] === 'boolean') {\n      this.enableHighlight(Settings.LOG_HIGHLIGHTED[this.constructor.name]);\n    }\n  }\n\n  setLogLevel(level) {\n    this._logger.setLogLevel(level);\n  }\n\n  enableLogger(enable) {\n    this._logEnabled = !!enable;\n  }\n\n  print(level, from, message) {\n    if (this._logEnabled) {\n      this._logger.print(this._logHighlighted ? LogUtil.LogLevel.HIGHLIGHTED : level, from, message);\n    }\n  }\n\n  enableHighlight(enable) {\n    this._logHighlighted = !!enable;\n    this._logEnabled = this._logHighlighted;\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 974,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/Utils/Logger.js",
    "static": true,
    "longname": "src/Utils/Logger.js~Logger",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Logger.js",
    "importStyle": "{Logger}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 975,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 976,
    "kind": "member",
    "name": "_logger",
    "memberof": "src/Utils/Logger.js~Logger",
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#_logger",
    "access": "private",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 977,
    "kind": "member",
    "name": "_logEnabled",
    "memberof": "src/Utils/Logger.js~Logger",
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#_logEnabled",
    "access": "private",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 978,
    "kind": "member",
    "name": "_logHighlighted",
    "memberof": "src/Utils/Logger.js~Logger",
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#_logHighlighted",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 979,
    "kind": "method",
    "name": "setLogLevel",
    "memberof": "src/Utils/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#setLogLevel",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "enableLogger",
    "memberof": "src/Utils/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#enableLogger",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "enable",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "print",
    "memberof": "src/Utils/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#print",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "from",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "enableHighlight",
    "memberof": "src/Utils/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Logger.js~Logger#enableHighlight",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "enable",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 986,
    "kind": "file",
    "name": "src/Utils/MultiMap.js",
    "content": "/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MultiMap {\n  /**\n   * A simple multimap template.\n   * @constructor\n   * @struct\n   * @template T\n   */\n  constructor() {\n    /** @private {!Object.<string, !Array.<T>>} */\n    this.map_ = {};\n  }\n\n  /**\n   * Add a key, value pair to the map.\n   * @param {string} key\n   * @param {T} value\n   */\n  push(key, value) {\n    if (this.map_.hasOwnProperty(key)) {\n      this.map_[key].push(value);\n    } else {\n      this.map_[key] = [value];\n    }\n  }\n\n  /**\n   * Set an array of values for the key, overwriting any previous data.\n   * @param {string} key\n   * @param {!Array.<T>} values\n   */\n  set(key, values) {\n    this.map_[key] = values;\n  }\n\n  /**\n   * Check for a key.\n   * @param {string} key\n   * @return {boolean} true if the key exists.\n   */\n  has(key) {\n    return this.map_.hasOwnProperty(key);\n  }\n\n  /**\n   * Get a list of values by key.\n   * @param {string} key\n   * @return {Array.<T>} or null if no such key exists.\n   */\n  get(key) {\n    let list = this.map_[key];\n    // slice() clones the list so that it and the map can each be modified\n    // without affecting the other.\n    return list ? list.slice() : null;\n  }\n\n  /**\n   * Get a list of all values.\n   * @return {!Array.<T>}\n   */\n  getAll() {\n    let list = [];\n    for (let key in this.map_) {\n      list.push.apply(list, this.map_[key]);\n    }\n    return list;\n  }\n\n  /**\n   * Remove a specific value, if it exists.\n   * @param {string} key\n   * @param {T} value\n   */\n  remove(key, value) {\n    let list = this.map_[key];\n    if (!list) { return; }\n    for (let i = 0; i < list.length; ++i) {\n      if (list[i] === value) {\n        list.splice(i, 1);\n        --i;\n      }\n    }\n  }\n\n  /**\n   * Get all keys from the multimap.\n   * @return {!Array.<string>}\n   */\n  keys() {\n    let result = [];\n    for (let key in this.map_) {\n      result.push(key);\n    }\n    return result;\n  }\n\n  /**\n   * Clear all keys and values from the multimap.\n   */\n  clear() {\n    this.map_ = {};\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/MultiMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 987,
    "kind": "class",
    "name": "MultiMap",
    "memberof": "src/Utils/MultiMap.js",
    "static": true,
    "longname": "src/Utils/MultiMap.js~MultiMap",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/MultiMap.js",
    "importStyle": "{MultiMap}",
    "description": "",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@license",
        "tagValue": "Copyright 2016 Google Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 988,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#constructor",
    "access": "public",
    "description": "A simple multimap template.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@struct",
        "tagValue": ""
      },
      {
        "tagName": "@template",
        "tagValue": "T"
      }
    ]
  },
  {
    "__docId__": 989,
    "kind": "member",
    "name": "map_",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#map_",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 990,
    "kind": "method",
    "name": "push",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#push",
    "access": "public",
    "description": "Add a key, value pair to the map.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "set",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#set",
    "access": "public",
    "description": "Set an array of values for the key, overwriting any previous data.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": false,
        "types": [
          "Array.<T>"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 992,
    "kind": "method",
    "name": "has",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#has",
    "access": "public",
    "description": "Check for a key.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the key exists."
    }
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "get",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#get",
    "access": "public",
    "description": "Get a list of values by key.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<T>"
      ],
      "spread": false,
      "description": "or null if no such key exists."
    }
  },
  {
    "__docId__": 994,
    "kind": "method",
    "name": "getAll",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#getAll",
    "access": "public",
    "description": "Get a list of all values.",
    "lineNumber": 76,
    "return": {
      "nullable": false,
      "types": [
        "Array.<T>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 995,
    "kind": "method",
    "name": "remove",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#remove",
    "access": "public",
    "description": "Remove a specific value, if it exists.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "T"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "keys",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#keys",
    "access": "public",
    "description": "Get all keys from the multimap.",
    "lineNumber": 104,
    "return": {
      "nullable": false,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 997,
    "kind": "method",
    "name": "clear",
    "memberof": "src/Utils/MultiMap.js~MultiMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/MultiMap.js~MultiMap#clear",
    "access": "public",
    "description": "Clear all keys and values from the multimap.",
    "lineNumber": 115,
    "params": [],
    "return": null
  },
  {
    "__docId__": 999,
    "kind": "file",
    "name": "src/Utils/Object.js",
    "content": "export function mergeObject(obj1, obj2) {\n  let obj3 = {};\n  for (let attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n  for (let attrname in obj2) { if (obj3[attrname] == null) obj3[attrname] = obj2[attrname]; }\n  return obj3;\n}\n\n// Speed up calls to hasOwnProperty\nlet hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function isEmpty(obj) {\n  // null and undefined are 'empty'\n  if (obj == null) { return true; }\n\n  // Assume if it has a length property with a non-zero value\n  // that that property is correct.\n  if (obj.length > 0) { return false; }\n  if (obj.length === 0) { return true; }\n\n  // If it isn't an object at this point\n  // it is empty, but it can't be anything *but* empty\n  // Is it empty?  Depends on your application.\n  if (typeof obj !== 'object') { return true; }\n\n  // Otherwise, does it have any properties of its own?\n  // Note that this doesn't handle\n  // toString and valueOf enumeration bugs in IE < 9\n  for (let key in obj) {\n    if (hasOwnProperty.call(obj, key)) { return false; }\n  }\n\n  return true;\n}\n\nexport function getKeyByValue(map, value) {\n  for (let name in map) {\n    if (map[name] === value) {\n      return name;\n    }\n  }\n  return '';\n}\n\nexport function find(arr, propertyName, target) {\n  if (!arr || arr.length <= 0) {\n    return null;\n  }\n\n  let n = arr.length;\n  for (let i = 0; i < n; i++) {\n    if (arr[i][propertyName] === target) {\n      return arr[i];\n    }\n  }\n\n  return null;\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Object.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1000,
    "kind": "function",
    "name": "mergeObject",
    "memberof": "src/Utils/Object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Object.js~mergeObject",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Object.js",
    "importStyle": "{mergeObject}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "obj1",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1001,
    "kind": "variable",
    "name": "hasOwnProperty",
    "memberof": "src/Utils/Object.js",
    "static": true,
    "longname": "src/Utils/Object.js~hasOwnProperty",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Utils/Object.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1002,
    "kind": "function",
    "name": "isEmpty",
    "memberof": "src/Utils/Object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Object.js~isEmpty",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Object.js",
    "importStyle": "{isEmpty}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1003,
    "kind": "function",
    "name": "getKeyByValue",
    "memberof": "src/Utils/Object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Object.js~getKeyByValue",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Object.js",
    "importStyle": "{getKeyByValue}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "map",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1004,
    "kind": "function",
    "name": "find",
    "memberof": "src/Utils/Object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Object.js~find",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Object.js",
    "importStyle": "{find}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1005,
    "kind": "file",
    "name": "src/Utils/Platform.js",
    "content": "import UAParser from '../../externals/ua-parser-js/ua-parser.min'\n\nexport function probePlatformSupport() {\n  window.MediaSource = window.MediaSource || window.WebKitMediaSource;\n  let mseSupport = !!(window.MediaSource &&\n    typeof window.MediaSource.isTypeSupported === 'function' &&\n    window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"'));\n\n  let browser = new UAParser().getBrowser();\n  let browserLimitation = (browser.name !== 'IE') || (browser.name === 'IE' && browser.major >= 11); // IE 11+\n\n  return mseSupport && browserLimitation;\n}\n\nexport function probeWebRTCSupport() {\n  let isWebRTCSupported = false;\n  ['RTCPeerConnection', 'webkitRTCPeerConnection', 'mozRTCPeerConnection', 'RTCIceGatherer'].forEach(function (item) {\n    if (isWebRTCSupported) {\n      return;\n    }\n\n    if (item in window) {\n      isWebRTCSupported = true;\n    }\n  });\n  return isWebRTCSupported;\n}\n\nfunction isLocalStorageAvailable() {\n  let test = 'test';\n  try {\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function generateUUID() {\n  // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0;\n    let v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport function getDeviceId() {\n  let id = generateUUID();\n\n  // detect local storage available or not\n  // if not available, use different id every time\n  if (isLocalStorageAvailable()) {\n    let oldId = localStorage.getItem('deviceId');\n    if (!oldId) {\n      localStorage.setItem('deviceId', id);\n    } else {\n      id = oldId;\n    }\n  }\n\n  return id;\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Platform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1006,
    "kind": "function",
    "name": "probePlatformSupport",
    "memberof": "src/Utils/Platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Platform.js~probePlatformSupport",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Platform.js",
    "importStyle": "{probePlatformSupport}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1007,
    "kind": "function",
    "name": "probeWebRTCSupport",
    "memberof": "src/Utils/Platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Platform.js~probeWebRTCSupport",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Platform.js",
    "importStyle": "{probeWebRTCSupport}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1008,
    "kind": "function",
    "name": "isLocalStorageAvailable",
    "memberof": "src/Utils/Platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Platform.js~isLocalStorageAvailable",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Utils/Platform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1009,
    "kind": "function",
    "name": "generateUUID",
    "memberof": "src/Utils/Platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Platform.js~generateUUID",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Platform.js",
    "importStyle": "{generateUUID}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1010,
    "kind": "function",
    "name": "getDeviceId",
    "memberof": "src/Utils/Platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Platform.js~getDeviceId",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Platform.js",
    "importStyle": "{getDeviceId}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1011,
    "kind": "file",
    "name": "src/Utils/String.js",
    "content": "\nexport function toDateString(epoch) {\n    let date = new Date(epoch * 1000);\n    return (date.getMonth() + 1) + '/' +\n        date.getDate() + '/' +\n        date.getFullYear() + ' ' +\n        date.getHours() + ':' +\n        date.getMinutes() + ':' +\n        date.getSeconds()\n}\n\nexport function formatSeconds(seconds) {\n    let date = new Date(1970, 0, 1);\n    date.setSeconds(seconds);\n    return date.toTimeString().replace(/.*(\\d{2}:\\d{2}:\\d{2}).*/, '$1');\n}\n\nexport function formatBytes(bytes, decimals) {\n    if (bytes === 0) { return '0 Byte'; }\n    let k = 1024;\n    let dm = decimals || 2\n    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    let i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\nexport function utf8ArrayToStr(array) {\n    let c;\n    let char2;\n    let char3;\n\n    let out = '';\n    let len = array.length;\n    let i = 0;\n    while (i < len) {\n        c = array[i++];\n        switch (c >> 4) {\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                // 0xxxxxxx\n                out += String.fromCharCode(c);\n                break;\n            case 12: case 13:\n                // 110x xxxx   10xx xxxx\n                char2 = array[i++];\n                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n                break;\n            case 14:\n                // 1110 xxxx  10xx xxxx  10xx xxxx\n                char2 = array[i++];\n                char3 = array[i++];\n                out += String.fromCharCode(((c & 0x0F) << 12) |\n                    ((char2 & 0x3F) << 6) |\n                    ((char3 & 0x3F) << 0));\n                break;\n        }\n    }\n\n    return out;\n}\n\nexport function hexStringToArray(str) {\n    let result = [];\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n    return result;\n}\n\nexport function base64EncodeUint8Array(input) {\n    let str;\n    if (typeof input === 'string') {\n        str = input;\n    } else if (input instanceof ArrayBuffer) {\n        str = String.fromCharCode.apply(null, new Uint8Array(input));\n    } else if (input instanceof Uint8Array) {\n        str = String.fromCharCode.apply(null, input);\n    } else {\n        return '';\n    }\n\n    return window.btoa(str);\n}\n\nexport function base64DecodeUint8Array(input) {\n    let raw = window.atob(input);\n    let rawLength = raw.length;\n    let array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (let i = 0; i < rawLength; i++) {\n        array[i] = raw.charCodeAt(i);\n    }\n\n    return array;\n}\n\nexport function stringToArray(string) {\n    let buffer = new ArrayBuffer(string.length * 2); // 2 bytes for each char\n    let array = new Uint16Array(buffer);\n    for (let i = 0, strLen = string.length; i < strLen; i++) {\n        array[i] = string.charCodeAt(i);\n    }\n    return array;\n}\n\nexport function arrayToString(array) {\n    let uint16array = new Uint16Array(array.buffer);\n    return String.fromCharCode.apply(null, uint16array);\n}\n\nexport function endsWith(str, search, thisLen) {\n    if (thisLen == null || thisLen > str.length) {\n        thisLen = str.length;\n    }\n    return str.substring(thisLen - search.length, thisLen) === search;\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/String.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1012,
    "kind": "function",
    "name": "toDateString",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~toDateString",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{toDateString}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "epoch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1013,
    "kind": "function",
    "name": "formatSeconds",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~formatSeconds",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{formatSeconds}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "seconds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1014,
    "kind": "function",
    "name": "formatBytes",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~formatBytes",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{formatBytes}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "bytes",
        "types": [
          "*"
        ]
      },
      {
        "name": "decimals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1015,
    "kind": "function",
    "name": "utf8ArrayToStr",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~utf8ArrayToStr",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{utf8ArrayToStr}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1016,
    "kind": "function",
    "name": "hexStringToArray",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~hexStringToArray",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{hexStringToArray}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "function",
    "name": "base64EncodeUint8Array",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~base64EncodeUint8Array",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{base64EncodeUint8Array}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "function",
    "name": "base64DecodeUint8Array",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~base64DecodeUint8Array",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{base64DecodeUint8Array}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1019,
    "kind": "function",
    "name": "stringToArray",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~stringToArray",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{stringToArray}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1020,
    "kind": "function",
    "name": "arrayToString",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~arrayToString",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{arrayToString}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "function",
    "name": "endsWith",
    "memberof": "src/Utils/String.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/String.js~endsWith",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/String.js",
    "importStyle": "{endsWith}",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "search",
        "types": [
          "*"
        ]
      },
      {
        "name": "thisLen",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1022,
    "kind": "file",
    "name": "src/Utils/TimeRange.js",
    "content": "\nexport function absTimeToRelTime(time, timeRanges, absStart) {\n  if (time < absStart) {\n    time = absStart;\n  } else if (timeRanges.length > 0 && time > timeRanges[timeRanges.length - 1].end) {\n    time = timeRanges[timeRanges.length - 1].end;\n  }\n\n  let calcTime = time;\n  let offset = 0;\n  for (let i = 0; i < timeRanges.length; i++) {\n    if (i !== 0) {\n      offset += (timeRanges[i].begin - timeRanges[i - 1].end);\n    }\n    if (time >= timeRanges[i].begin && time <= timeRanges[i].end) {\n      calcTime = time - offset - absStart;\n      break;\n    } else {\n      if (time < timeRanges[i].begin) {\n        calcTime = timeRanges[i].begin - offset - absStart;\n        break;\n      }\n      if (i !== 0) {\n        if (time > timeRanges[i - 1].end && time < timeRanges[i].begin) {\n          calcTime = timeRanges[i].begin - offset - absStart;\n          break;\n        }\n        if (i === timeRanges.length - 1 && time > timeRanges[i].end) {\n          calcTime = timeRanges[i].end - offset - absStart;\n          break;\n        }\n      }\n    }\n  }\n  return calcTime;\n}\n\nexport function relTimeToAbsTime(time, timeRanges, absStart) {\n  let calcTime = time;\n  let offset = 0;\n  for (let i = 0; i < timeRanges.length; i++) {\n    if (i !== 0) {\n      offset += (timeRanges[i].begin - timeRanges[i - 1].end);\n    }\n    let relBegin = timeRanges[i].begin - offset - absStart;\n    let relEnd = timeRanges[i].end - offset - absStart;\n    if (time >= relBegin && time <= relEnd) {\n      calcTime = time + offset + absStart;\n      break;\n    } else {\n      if (time < relBegin) {\n        calcTime = relBegin + offset + absStart;\n        break;\n      }\n      if (i !== 0) {\n        let lastOffset = offset - (timeRanges[i].begin - timeRanges[i - 1].end);\n        let lastRelEnd = timeRanges[i - 1].end - lastOffset - absStart;\n        if (time > lastRelEnd && time < relBegin) {\n          calcTime = relBegin + offset + absStart;\n          break;\n        }\n        if (i === timeRanges.length - 1 && time > relEnd) {\n          calcTime = relEnd + offset + absStart;\n          break;\n        }\n      }\n    }\n  }\n  return calcTime;\n}\n\nexport function getAbsSafeTime(absTime, timeRanges, absEndLimit) {\n  let safeAbsTime = absTime;\n  if (timeRanges && timeRanges.length > 0) {\n    if (absTime <= timeRanges[0].begin) {\n      safeAbsTime = timeRanges[0].begin;\n      return safeAbsTime;\n    }\n    if (absTime >= timeRanges[timeRanges.length - 1].end) {\n      safeAbsTime = timeRanges[timeRanges.length - 1].end;\n      if (absEndLimit) {\n        safeAbsTime = Math.min(absEndLimit, safeAbsTime);\n      }\n      return safeAbsTime;\n    }\n    for (let i = 0; i < timeRanges.length; i++) {\n      let lastEnd = timeRanges[i].begin;\n      if (i !== 0) {\n        lastEnd = timeRanges[i - 1].end;\n      }\n      if (absTime >= lastEnd && absTime <= timeRanges[i].begin) {\n        safeAbsTime = timeRanges[i].begin;\n        break;\n      }\n      if (absTime > timeRanges[i].begin && absTime <= timeRanges[i].end) {\n        break;\n      }\n    }\n  }\n\n  return safeAbsTime;\n}\n\nexport function vacancyTime(absTime, timeRanges) {\n  let vacancy = true;\n\n  for (let i = 0; i < timeRanges.length; i++) {\n    if (absTime >= timeRanges[i].begin && absTime <= timeRanges[i].end) {\n      vacancy = false;\n      break;\n    }\n  }\n\n  return vacancy;\n}\n\nfunction _findTimeRanges(timeRanges, time) {\n    let range = null;\n    for (let i = timeRanges.length - 1; i >= 0; i--) {\n        if ((timeRanges[i].end === null && time >= timeRanges[i].begin) ||\n            (timeRanges[i].end !== null && time >= timeRanges[i].begin && time <= timeRanges[i].end)) {\n            range = timeRanges[i];\n            break;\n        }\n    }\n    return range;\n}\n\nexport function mergeProgrameTime(timeline, dateRangesInM3u, targetDurationInM3u, playlistDurationInM3u) {\n  let dateRanges = dateRangesInM3u;\n  let timeRanges = timeline.timeRanges;\n\n  timeline.targetDuration = targetDurationInM3u || 0;\n\n  if (dateRanges.length > 0) {\n    for (let i = 0; i < dateRanges.length; i++) {\n      if (i === 0 && !timeline.init) {\n        timeline.init = true;\n        timeline.absStart = dateRanges[i].begin;\n      }\n      let range = _findTimeRanges(timeline.timeRanges, dateRanges[i].begin);\n      if (range === null) {\n        range = {\n          begin: dateRanges[i].begin,\n          end: dateRanges[i].end\n        };\n        timeRanges.push(range);\n      } else {\n        if (range.end < dateRanges[i].end) {\n            range.end = dateRanges[i].end;\n        }\n      }\n      if (i === 0) {\n        timeline.curAbsStart = dateRanges[i].begin;\n      }\n      if (i === dateRanges.length - 1) {\n        timeline.curAbsEnd = dateRanges[dateRanges.length - 1].end;\n      }\n    }\n  } else {\n    timeline.curAbsEnd = playlistDurationInM3u;\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/TimeRange.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1023,
    "kind": "function",
    "name": "absTimeToRelTime",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~absTimeToRelTime",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": "{absTimeToRelTime}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeRanges",
        "types": [
          "*"
        ]
      },
      {
        "name": "absStart",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1024,
    "kind": "function",
    "name": "relTimeToAbsTime",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~relTimeToAbsTime",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": "{relTimeToAbsTime}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeRanges",
        "types": [
          "*"
        ]
      },
      {
        "name": "absStart",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1025,
    "kind": "function",
    "name": "getAbsSafeTime",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~getAbsSafeTime",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": "{getAbsSafeTime}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "absTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeRanges",
        "types": [
          "*"
        ]
      },
      {
        "name": "absEndLimit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "function",
    "name": "vacancyTime",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~vacancyTime",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": "{vacancyTime}",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "absTime",
        "types": [
          "*"
        ]
      },
      {
        "name": "timeRanges",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1027,
    "kind": "function",
    "name": "_findTimeRanges",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~_findTimeRanges",
    "access": "private",
    "export": false,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "timeRanges",
        "types": [
          "*"
        ]
      },
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1028,
    "kind": "function",
    "name": "mergeProgrameTime",
    "memberof": "src/Utils/TimeRange.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/TimeRange.js~mergeProgrameTime",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/TimeRange.js",
    "importStyle": "{mergeProgrameTime}",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "timeline",
        "types": [
          "*"
        ]
      },
      {
        "name": "dateRangesInM3u",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetDurationInM3u",
        "types": [
          "*"
        ]
      },
      {
        "name": "playlistDurationInM3u",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1029,
    "kind": "file",
    "name": "src/Utils/Url.js",
    "content": "import UrlValidator from '../../externals/valid-url/index'\nimport { AdaptivePlayer } from '../AdaptivePlayer';\n\nexport function validateURL(url) {\n  return UrlValidator.isWebUri(url);\n}\n\nexport function isAbsoluteUrl(url) {\n  if (typeof url !== 'string') {\n    return false;\n  }\n  return UrlValidator.isWebUri(url);\n}\n\nexport function getPath(url) {\n  let tmp = url.split('?')[0];\n  return tmp.substr(0, tmp.lastIndexOf('/') + 1);\n}\n\nexport function getExtension(url) {\n  if (!url) { return ''; }\n\n  let parts = url.split('?')[0].split('.');\n  // Handle files with no extensions and hidden files with no extension\n  if (parts.length === 1 || (parts[0] === '' && parts.length === 2)) {\n    return '';\n  }\n  return parts.pop().toLowerCase();\n}\n\nexport function detectPlayerType(url, protocol, isDRM) {\n  if (url == null || url === '' || !validateURL(url)) {\n    return AdaptivePlayer.PlayerType.UNKNOWN;\n  }\n\n  if (typeof protocol !== 'undefined') {\n    switch (protocol) {\n      case AdaptivePlayer.Protocol.HTTP:\n        return AdaptivePlayer.PlayerType.NATIVE;\n      case AdaptivePlayer.Protocol.WEBRTC:\n        return AdaptivePlayer.PlayerType.WEBRTC;\n      case AdaptivePlayer.Protocol.DASH:\n        return AdaptivePlayer.PlayerType.SHAKA;\n      case AdaptivePlayer.Protocol.HLS:\n        return (AdaptivePlayer.browserType === 'Safari' || AdaptivePlayer.browserType === 'Mobile Safari' /* || browserType === 'Edge' */)\n          ? AdaptivePlayer.PlayerType.NATIVE : AdaptivePlayer.PlayerType.HLSJS;\n      default:\n        return AdaptivePlayer.PlayerType.UNKNOWN;\n    }\n  } else {\n    if (url.indexOf('ws://') !== -1 || url.indexOf('wss://') !== -1) { // webrtc streams\n      return AdaptivePlayer.PlayerType.WEBRTC;\n    }\n    let ext = getExtension(url);\n    if (ext === 'm3u8' || ext === 'm3u') {\n      // Safari, use hls.js for non-drm contents\n      // Or use native player for DRM contents\n      // Mobile Safari uses native player (DRM not supported)\n      // Other browser use hls.js\n      if ((!!isDRM && AdaptivePlayer.browserType === 'Safari') || AdaptivePlayer.browserType === 'Mobile Safari' /* || browserType === 'Edge' */) {\n        return AdaptivePlayer.PlayerType.NATIVE;\n      }\n      return AdaptivePlayer.PlayerType.HLSJS;\n    } else if (ext === 'mpd') {\n      return AdaptivePlayer.PlayerType.SHAKA;\n    } else if (ext === 'mp4' || ext === 'webm' || ext === 'ogg') {\n      return AdaptivePlayer.PlayerType.NATIVE;\n    } else {\n      return AdaptivePlayer.PlayerType.UNKNOWN;\n    }\n  }\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Url.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1030,
    "kind": "function",
    "name": "validateURL",
    "memberof": "src/Utils/Url.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Url.js~validateURL",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Url.js",
    "importStyle": "{validateURL}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1031,
    "kind": "function",
    "name": "isAbsoluteUrl",
    "memberof": "src/Utils/Url.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Url.js~isAbsoluteUrl",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Url.js",
    "importStyle": "{isAbsoluteUrl}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1032,
    "kind": "function",
    "name": "getPath",
    "memberof": "src/Utils/Url.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Url.js~getPath",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Url.js",
    "importStyle": "{getPath}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1033,
    "kind": "function",
    "name": "getExtension",
    "memberof": "src/Utils/Url.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Url.js~getExtension",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Url.js",
    "importStyle": "{getExtension}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1034,
    "kind": "function",
    "name": "detectPlayerType",
    "memberof": "src/Utils/Url.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Url.js~detectPlayerType",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Url.js",
    "importStyle": "{detectPlayerType}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "protocol",
        "types": [
          "*"
        ]
      },
      {
        "name": "isDRM",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1035,
    "kind": "file",
    "name": "src/Utils/Video.js",
    "content": "\nlet extensionToCanPlayType = function (ext) {\n    if (ext === 'ogg') { return 'video/ogg'; }\n    if (ext === 'mp4') { return 'video/mp4'; }\n    if (ext === 'webm') { return 'video/webm'; }\n    if (ext === 'm3u8') { return 'application/vnd.apple.mpegurl'; }\n    if (ext === 'mpd') { return 'application/dash+xml'; }\n\n    return '';\n};\n\nlet canPlayNative = function (videoElement, ext) {\n    let type = extensionToCanPlayType(ext);\n    let canPlay = videoElement.canPlayType(type);\n\n    return canPlay === 'maybe' || canPlay === 'probably';\n};\n\nlet getHashNameOfTrack = function(track) {\n    let hashName = '';\n    hashName += (track.kind !== '') ? (track.kind + '_') : '';\n    hashName += (track.language !== '') ? (track.language + '_') : '';\n    hashName += (track.label !== '') ? track.label : '';\n    return hashName;\n};\n\nexport {\n    extensionToCanPlayType,\n    canPlayNative,\n    getHashNameOfTrack\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Video.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1036,
    "kind": "function",
    "name": "extensionToCanPlayType",
    "memberof": "src/Utils/Video.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Video.js~extensionToCanPlayType",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Video.js",
    "importStyle": "{extensionToCanPlayType}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "ext",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1037,
    "kind": "function",
    "name": "canPlayNative",
    "memberof": "src/Utils/Video.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Video.js~canPlayNative",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Video.js",
    "importStyle": "{canPlayNative}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "videoElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "ext",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1038,
    "kind": "function",
    "name": "getHashNameOfTrack",
    "memberof": "src/Utils/Video.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Video.js~getHashNameOfTrack",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Video.js",
    "importStyle": "{getHashNameOfTrack}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "track",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1039,
    "kind": "file",
    "name": "src/Utils/Xhr.js",
    "content": "/* eslint prefer-promise-reject-errors: \"off\" */\n\nexport function createXHR(options) {\n    let url = '';\n    if (typeof options === 'string') {\n        url = options;\n        options = {};\n    }\n\n    options.url = options.url || url;\n    options.responseType = options.responseType || '';\n    options.method = options.method || 'GET';\n    options.params = options.params || null;\n\n    let xhr = null;\n    let promise = new Promise(function (resolve, reject) {\n        function onLoaded(event) {\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                resolve(xhr.response);\n            } else {\n                reject(xhr.status);\n            }\n        }\n\n        function onError() {\n            reject(xhr.status);\n        }\n\n        let responseType = options.responseType;\n        let url = options.url;\n        let method = options.method;\n\n        xhr = new XMLHttpRequest();\n        xhr.responseType = responseType;\n        xhr.addEventListener('load', onLoaded, false);\n        xhr.addEventListener('error', onError, false);\n\n        xhr.open(method, url, true);\n\n        if (options.headers) {\n            for (let key in options.headers) {\n                xhr.setRequestHeader(key, options.headers[key]);\n            }\n        }\n    });\n\n    promise.getXHR = function () {\n        return xhr;\n    };\n\n    promise.abort = function () {\n        xhr.abort();\n    };\n\n    xhr.send(options.params);\n    return promise;\n}\n\nfunction rand(length, current) {\n    current = current || '';\n    return length ? rand(--length, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.charAt(Math.floor(Math.random() * 60)) + current) : current;\n}\n\nexport function sendWithIframe(url) {\n    let id = 'url_iframe_' + rand(16);\n    let iframe = document.getElementById(id);\n    if (!iframe) {\n        iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        iframe.id = id;\n        document.body.appendChild(iframe);\n    }\n    iframe.src = url;\n    if (iframe.attachEvent) {\n        iframe.attachEvent('onload', function () {\n            // console.trace('Local iframe is now loaded.' + url + ' on ' + id);\n            iframe.parentNode.removeChild(iframe);\n        });\n    } else {\n        iframe.onload = function () {\n            // console.trace('Local iframe is now loaded.' + url + ' on ' + id);\n            iframe.parentNode.removeChild(iframe);\n        };\n    }\n}\n\nexport function sendWithScript(url) {\n    let id = 'url_script_' + rand(16);\n    let script = document.getElementById(id);\n    if (!script) {\n        script = document.createElement('script');\n        document.body.appendChild(script);\n    }\n    script.src = url;\n    if (script.attachEvent) {\n        script.attachEvent('onload', function() {\n            // console.debug('Local script is now loaded.' + url + ' on ' + id);\n            script.parentNode.removeChild(script);\n        });\n    } else {\n        script.onload = function() {\n            // console.debug('Local script is now loaded.' + url + ' on ' + id);\n            script.parentNode.removeChild(script);\n        };\n    }\n}\n\nexport function createXHREx(options, userdata) {\n    let url = '';\n    if (typeof options === 'string') {\n        url = options;\n        options = {};\n    }\n\n    options.url = options.url || url;\n    options.responseType = options.responseType || '';\n    options.method = options.method || 'GET';\n    options.params = options.params || null;\n\n    let xhr = null;\n    let promise = new Promise(function(resolve, reject) {\n        function onLoaded(event) {\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                resolve({\n                    response: xhr.response, \n                    userdata: userdata\n                });\n            } else {\n                reject({\n                    response: xhr.status,\n                    userdata: userdata\n                });\n            }\n        }\n\n        function onError() {\n            reject({\n                response: xhr.status,\n                userdata: userdata\n            });\n        }\n\n        let responseType = options.responseType;\n        let url = options.url;\n        let method = options.method;\n\n        xhr = new XMLHttpRequest();\n        xhr.responseType = responseType;\n        xhr.addEventListener('load', onLoaded, false);\n        xhr.addEventListener('error', onError, false);\n\n        xhr.open(method, url, true);\n\n        if (options.headers) {\n            for (let key in options.headers) {\n                xhr.setRequestHeader(key, options.headers[key]);\n            }\n        }\n    });\n\n    promise.getXHR = function() {\n        return xhr;\n    };\n    promise.abort = function() {\n        xhr.abort();\n    };\n\n    xhr.send(options.params);\n    return promise;\n}\n",
    "static": true,
    "longname": "C:/Program Files (x86)/Jenkins/workspace/build_job_3.0.x/src/Utils/Xhr.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1040,
    "kind": "function",
    "name": "createXHR",
    "memberof": "src/Utils/Xhr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Xhr.js~createXHR",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Xhr.js",
    "importStyle": "{createXHR}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1041,
    "kind": "function",
    "name": "rand",
    "memberof": "src/Utils/Xhr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Xhr.js~rand",
    "access": "public",
    "export": false,
    "importPath": "eshtml5player/src/Utils/Xhr.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "current",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1042,
    "kind": "function",
    "name": "sendWithIframe",
    "memberof": "src/Utils/Xhr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Xhr.js~sendWithIframe",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Xhr.js",
    "importStyle": "{sendWithIframe}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1043,
    "kind": "function",
    "name": "sendWithScript",
    "memberof": "src/Utils/Xhr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Xhr.js~sendWithScript",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Xhr.js",
    "importStyle": "{sendWithScript}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1044,
    "kind": "function",
    "name": "createXHREx",
    "memberof": "src/Utils/Xhr.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Xhr.js~createXHREx",
    "access": "public",
    "export": true,
    "importPath": "eshtml5player/src/Utils/Xhr.js",
    "importStyle": "{createXHREx}",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "userdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# How to develop #\n\n## Project Repository\ngit clone https://git-stream.neulion.net.cn:745/player/html5player.git\n\n## Dev server \nRun `npm run start` for a dev server. \n\nNavigate to http://localhost:8000/. The app will automatically reload if you change any of the source files.\n\nNavigate to http://localhost:8000/uncompiled.html to debug core libraries.\n\n## Build\n- Run `npm run build` to build the project. \n- Run `npm run dist` for a production build.\n\nThe build artifacts will be stored in the dist/ directory.\n\n## Running unit tests\nRun `npm run test` to execute the unit tests via Karma.\n\n## Docs\n- Run `npm run docs` to generate API documents for release with jsdoc\n- Run `npm run docs:dev` to generate internal documents with esdoc\n\n\n",
    "longname": "C:\\Program Files (x86)\\Jenkins\\workspace\\build_job_3.0.x\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"eshtml5player\",\n  \"version\": \"3.0.1\",\n  \"description\": \"HTML5 Adaptive Player\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"build:hlsjs\": \"cd 3rd/hls.js/ && npm i && npm run build\",\n    \"build:muxjs\": \"cd 3rd/mux.js/ && npm i && npm run build\",\n    \"build:m3u8parser\": \"cd 3rd/m3u8-parser/ && npm i && npm run build\",\n    \"build:shaka\": \"cd 3rd/shaka-player/ && python ./build/all.py\",\n    \"dist\": \"npm run lint && npm run release\",\n    \"start\": \"webpack-dev-server\",\n    \"release\": \"webpack\",\n    \"lint\": \"eslint src\",\n    \"test\": \"karma start\",\n    \"test:winnodrm\": \"karma start --browsers Chrome --drm=false\",\n    \"test:win\": \"karma start --browsers Chrome,IE,Edge,Firefox\",\n    \"test:mac\": \"karma start --browsers Chrome,Firefox,SafariPrivate\",\n    \"docs\": \"jsdoc -c jsdoc.conf.json\",\n    \"docs:dev\": \"esdoc\"\n  },\n  \"author\": \"Endeavor Streaming\",\n  \"devDependencies\": {\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.4\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-exclude-source-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-standard\": \"^11.0.0\",\n    \"eslint-plugin-import\": \"^2.12.0\",\n    \"eslint-plugin-node\": \"^6.0.1\",\n    \"eslint-plugin-promise\": \"^3.8.0\",\n    \"eslint-plugin-standard\": \"^3.1.0\",\n    \"filemanager-webpack-plugin\": \"^1.0.26\",\n    \"git-revision-webpack-plugin\": \"^2.5.1\",\n    \"ink-docstrap\": \"^1.3.2\",\n    \"jasmine\": \"^2.5.3\",\n    \"jasmine-core\": \"^2.5.2\",\n    \"jsdoc\": \"^3.5.5\",\n    \"karma\": \"^2.0.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-edge-launcher\": \"^0.2.0\",\n    \"karma-firefox-launcher\": \"^1.0.0\",\n    \"karma-htmlfile-reporter\": \"^0.3.5\",\n    \"karma-ie-launcher\": \"^1.0.0\",\n    \"karma-jasmine\": \"^1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"karma-safari-launcher\": \"^1.0.0\",\n    \"karma-safari-private-launcher\": \"^1.0.0\",\n    \"karma-verbose-reporter\": \"0.0.5\",\n    \"webpack\": \"^4.20.2\",\n    \"uglifyjs-webpack-plugin\": \"^2.0.1\",\n    \"webpack-cli\": \"^3.1.1\",\n    \"webpack-dev-server\": \"^3.1.1\"\n  }\n}\n",
    "longname": "C:\\Program Files (x86)\\Jenkins\\workspace\\build_job_3.0.x\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]